Row,Project_Name,URL,New URL,Class,Test,Content,Detected
14,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
15,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
16,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
17,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
18,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
19,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetMotorRegisterRange,"def testGetMotorRegisterRange(self):
        self.assertIsNotNone(self.client.getMotorRegisterRange('base', 'goal_position'))

    ",True
20,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
21,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
22,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
23,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
24,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
25,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
26,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
27,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
28,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
29,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
30,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
31,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.assertIsNotNone(self.client.stopAudio())
",True
32,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
33,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
34,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
35,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
36,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
37,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetMotorRegisterRange,"def testGetMotorRegisterRange(self):
        self.assertIsNotNone(self.client.getMotorRegisterRange('base', 'goal_position'))

    ",True
38,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
39,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
40,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
41,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
42,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
43,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
44,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
45,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
46,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
47,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
48,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
49,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.assertIsNotNone(self.client.stopAudio())
",True
50,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
51,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
52,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
53,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
54,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
55,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
56,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
57,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
58,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
59,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
60,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
61,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
62,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
63,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
64,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
65,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
66,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.assertIsNotNone(self.client.stopAudio())
",True
87,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_delitem_method,"def test_aggregated_delitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __delitem__ method.""""""

    del(mocked_aggregated['name'])
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert not hasattr(node, 'name')
    mocked_aggregated._aggregator._redis_nodes = []
    del(mocked_aggregated['name'])
",True
88,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_getitem_method,"def test_aggregated_getitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __getitem__ method.""""""

    assert mocked_aggregated['pattern'] == 'node2'
    mocked_aggregated._aggregator._redis_nodes = []
    assert mocked_aggregated['pattern'] is None


",True
89,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_setitem_method,"def test_aggregated_setitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __setitem__ method.""""""

    mocked_aggregated['name'] = 'node0'
    nodes = mocked_aggregated._aggregator._redis_nodes
    assert [x.name for x in nodes] == ['node0', 'node0', 'node0']
    mocked_aggregated._aggregator._redis_nodes = []
    mocked_aggregated['name'] = 'node0'


",True
90,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_delete_method,"def test_aggregator_delete_method(mocked_aggregated):
    """"""Test aggregator delete method.""""""

    res = mocked_aggregated.delete('pattern')
    assert type(res) is int
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert not hasattr(node, 'name')


",True
91,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_get_method,"def test_aggregator_get_method(mocked_aggregated):
    """"""Test aggregator get method.""""""

    assert mocked_aggregated.get('pattern') == 'node2'


",True
92,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_keys_method,"def test_aggregator_keys_method(mocked_aggregated):
    """"""Test aggregator keys method.""""""

    assert mocked_aggregated.keys('pattern') == ['node3', 'pattern']


",True
93,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_keys_method_with_empty_nodes,"def test_aggregator_keys_method_with_empty_nodes(mocked_aggregated):
    """"""Test aggregator keys method with empty nodes.""""""

    assert mocked_aggregated.keys('empty') == []


",True
94,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_scan_iter_method,"def test_aggregator_scan_iter_method(mocked_aggregated):
    """"""Test aggregator scan_iter method.""""""

    for node in mocked_aggregated._aggregator._redis_nodes:
        node.set('value', 'pattern')
    results = [x for x in mocked_aggregated.scan_iter('value')]
    assert results == ['pattern', 'pattern', 'pattern']


",True
95,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_set_method,"def test_aggregator_set_method(mocked_aggregated):
    """"""Test aggregator set method.""""""

    res = mocked_aggregated.set('value', 'pattern')
    assert res is True
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert node.value == 'pattern'


",True
96,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_strategy,"def test_aggregator_strategy(aggregated):
    """"""Test that a constructor with aggregate strategy will initialize
    the connection.""""""
    assert aggregated._redis_client is not None
    assert hasattr(aggregated._redis_client, 'connection_pool')
    assert hasattr(aggregated._app, 'extensions')
    assert 'redis' in aggregated._app.extensions
    assert aggregated._app.extensions['redis'] == aggregated


",True
97,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_from_aggregated_node,"def test_attributes_transmission_from_aggregated_node(aggregated):
    """"""Test that attributes from aggregated nodes are
    available directly from FlaskMultiRedis object.""""""

    node = aggregated._aggregator._redis_nodes[0]
    assert aggregated.connection_pool is node.connection_pool


",True
98,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_from_loadbalanced_node,"def test_attributes_transmission_from_loadbalanced_node(loadbalanced):
    """"""Test that attributes from loadbalanced nodes are
    available directly from FlaskMultiRedis object.""""""

    node = loadbalanced._redis_nodes[0]
    assert loadbalanced.connection_pool is node.connection_pool


",True
99,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_if_aggregated_has_no_host,"def test_attributes_transmission_if_aggregated_has_no_host(aggregated):
    """"""Test that attributes transmission return None if Aggregator
    has an empty node list.""""""
    aggregated._aggregator._redis_nodes = []
    assert aggregated._redis_client is None


",True
100,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_constructor,"def test_constructor(loadbalanced):
    """"""Test that a constructor with app instance will initialize the
    connection.""""""
    assert loadbalanced._redis_client is not None
    assert hasattr(loadbalanced._redis_client, 'connection_pool')
    assert hasattr(loadbalanced._app, 'extensions')
    assert 'redis' in loadbalanced._app.extensions
    assert loadbalanced._app.extensions['redis'] is loadbalanced


",True
101,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_default_config,"def test_custom_default_config(app_custom_default):
    """"""Test that we can pass a custom default configuration.""""""

    redis = FlaskMultiRedis(app_custom_default)
    assert redis.connection_pool.connection_kwargs['port'] == 16379
    assert redis.connection_pool.connection_kwargs['db'] == 9
    assert redis.connection_pool.connection_kwargs['password'] == 'password'
    assert redis.connection_pool.connection_kwargs['socket_timeout'] == 2


",True
102,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_default_ssl,"def test_custom_default_ssl(app_custom_default_ssl):
    """"""Test that we can pass a custom default ssl configuration.""""""

    redis = FlaskMultiRedis(app_custom_default_ssl)
    kwargs = redis.connection_pool.connection_kwargs
    assert kwargs['ssl_keyfile'] == 'ssl/rediskey.pem'
    assert kwargs['ssl_certfile'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_ca_certs'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_cert_reqs'] == 'required'


",True
103,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_node,"def test_custom_node(app_custom_node):
    """"""Test that we can pass a custom node configuration.""""""

    redis = FlaskMultiRedis(app_custom_node)
    kwargs = redis.connection_pool.connection_kwargs
    assert kwargs['port'] == 16379
    assert kwargs['db'] == 9
    assert kwargs['password'] == 'password'
    assert kwargs['socket_timeout'] == 2
    assert kwargs['ssl_keyfile'] == 'ssl/rediskey.pem'
    assert kwargs['ssl_certfile'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_ca_certs'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_cert_reqs'] == 'required'


",True
104,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_prefix,"def test_custom_prefix(app):
    """"""Test that config prefixes enable distinct connections.""""""
    app.config['DBA_NODES'] = [{'host': 'localhost', 'db': 1}]
    app.config['DBB_NODES'] = [{'host': 'localhost', 'db': 2}]
    redis_a = FlaskMultiRedis(app, config_prefix='DBA')
    redis_b = FlaskMultiRedis(app, config_prefix='DBB')
    assert redis_a.connection_pool.connection_kwargs['db'] == 1
    assert redis_b.connection_pool.connection_kwargs['db'] == 2


",True
105,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_extension_registration_if_app_has_no_extensions,"def test_extension_registration_if_app_has_no_extensions(app):
    """"""Test that the constructor is able to register FlaskMultiRedis
    as an extension even if app has no extensions attribute.""""""
    delattr(app, 'extensions')
    redis = FlaskMultiRedis(app)
    assert hasattr(app, 'extensions')
    assert 'redis' in app.extensions
    assert app.extensions['redis'] == redis


",True
106,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_init_app,"def test_init_app(app):
    """"""Test that a constructor without app instance will not initialize the
    connection.

    After FlaskMultiRedis.init_app(app) is called, the connection will be
    initialized.""""""
    redis = FlaskMultiRedis()
    assert redis._app is None
    assert len(redis._redis_nodes) == 0
    redis.init_app(app)
    assert redis._app is app
    assert len(redis._redis_nodes) == 1
    assert hasattr(redis._redis_client, 'connection_pool')


",True
107,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_delitem_method,"def test_loadbalanced_delitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __delitem__ method.""""""

    del(mocked_loadbalanced['name'])
    for node in mocked_loadbalanced._redis_nodes:
        assert not hasattr(node, 'name')
    mocked_loadbalanced._redis_nodes = []
    del(mocked_loadbalanced['name'])


",True
108,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_getitem_method,"def test_loadbalanced_getitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __getitem__ method.""""""

    assert mocked_loadbalanced['pattern'] in ['node1', 'node2', 'node3']
    mocked_loadbalanced._redis_nodes = []
    assert mocked_loadbalanced['pattern'] is None


",True
109,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_setitem_method,"def test_loadbalanced_setitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __setitem__ method.""""""

    mocked_loadbalanced['name'] = 'node0'
    assert 'node0' in [x.name for x in mocked_loadbalanced._redis_nodes]
    mocked_loadbalanced._redis_nodes = []
    mocked_loadbalanced['name'] = 'node0'


",True
110,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_methods_transmission_from_aggregator,"def test_methods_transmission_from_aggregator(aggregated):
    """"""Test that methods from aggregator are available
    directly from FlaskMultiRedis object (aggregate).""""""

    assert isinstance(aggregated.keys.__self__, Aggregator)


",True
111,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_methods_transmission_from_redis,"def test_methods_transmission_from_redis(loadbalanced):
    """"""Test that methods from redis are available
    direcly from FlaskMultiRedis object (loadbalancing).""""""

    assert isinstance(loadbalanced.keys.__self__, StrictRedis)


",True
112,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_task_runner,"def test_task_runner(mocked_aggregated):
    """"""Test task runner in nominal operations.""""""

    ",True
313,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_add,"def test_command_add(self, centreon_con):
        values = [
            'command_test',
            'check',
            '/my/plugins my command'
        ]
        data = {}
        data['action'] = 'add'
        data['object'] = 'CMD'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.commands.add(""command_test"",
                                          ""check"",
                                          ""/my/plugins my command"",
                                          post_refresh=False
                                          )
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    ",True
314,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_delete,"def test_command_delete(self, centreon_con):
        data = {}
        data['action'] = 'del'
        data['object'] = 'CMD'
        data['values'] = 'command_test'

        with patch('requests.post') as patched_post:
            centreon_con.commands.delete('command_test', post_refresh=False)
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    @responses.activate
    ",True
315,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_list,"def test_command_list(self, centreon_con):
        with open(resource_dir / 'test_commands_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.commands.get('OS-Linux-SNMP-Memory')
        assert res.id == ""111""

    @responses.activate
    ",True
316,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_not_exist,"def test_command_not_exist(self, centreon_con):
        with open(resource_dir / 'test_commands_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')
        state, cmd = centreon_con.commands.get(""empty"")
        assert state == False

    ",True
317,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_setparam,"def test_command_setparam(self):
        with open(resource_dir / 'test_commands_1.json') as data:
            cmd = Command(json.load(data))
        values = [
            cmd.name,
            'type',
            'notif',
        ]
        data = {}
        data['action'] = 'setparam'
        data['object'] = 'CMD'
        data['values'] = values

        with patch('requests.post') as patched_post:
            cmd.setparam('type', 'notif')
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)



",True
318,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addcontact,"def test_host_addcontactgroupt(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'addcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.addcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
319,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addcontactgroupt,"def test_host_addcontactgroupt(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'addcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.addcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
320,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addparent,"def test_host_addparent(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parent.json') as parent:
            parents = Host(json.load(parent))

        data = dict()
        data['action'] = 'addparent'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""mail-neptune-frontend""]

        with patch('requests.post') as patched_post:
            host.addparent(parents)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
321,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addtemplate,"def test_host_addtemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                print(tlp)
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'addtemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.addtemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
322,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_applytemplate,"def test_host_applytemplate(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'applytpl'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.applytemplate()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
323,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletecontact,"def test_host_deletecontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'delcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.deletecontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
324,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletecontactgroup,"def test_host_deletecontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'delcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.deletecontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
325,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletehostgroup,"def test_host_deletehostgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_hostgroup.json') as hg:
            hgs = HostGroup(json.load(hg))

        data = dict()
        data['action'] = 'delhostgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""centreon-prod""]

        with patch('requests.post') as patched_post:
            host.deletehostgroup(hgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
326,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_delmacro,"def test_host_delmacro(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_macro.json') as m:
            macro = HostMacro(json.load(m))
        data = dict()
        data['action'] = 'delmacro'
        data['object'] = 'HOST'
        data['values'] = [host.name, 'NRPEPORT']

        with patch('requests.post') as patched_post:
            host.deletemacro(macro)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
327,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deteletemplate,"def test_host_deteletemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'deltemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.deletetemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
328,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_disable,"def test_host_disable(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'disable'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.disable()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
329,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_enable,"def test_host_enable(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'enable'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.enable()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
330,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getcontact,"def test_host_getcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_contactgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = host.getcontactgroup()
        assert res['astreinte'].id == ""9""

    ",True
331,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getcontactgroup,"def test_host_getcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_contactgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = host.getcontactgroup()
        assert res['astreinte'].id == ""9""

    ",True
332,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_gethostgroup,"def test_host_gethostgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_hostgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                          self.clapi_url,
                          json=wsresponses, status=200, content_type='application/json')
        _, res = host.gethostgroup()
        assert res['centreon-prj'].id == ""115""

    ",True
333,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getmacro,"def test_host_getmacro(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_macros.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.getmacro()
        assert res[""$_HOSTMATTERMOST_CHAN$""].name == ""MATTERMOST_CHAN""

    ",True
334,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getparents,"def test_host_getparents(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parents.json') as data:
                wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.getparent()
        assert res['mail-neptune-frontend'].id == ""13""

    ",True
335,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_gettemplate,"def test_host_gettemplate(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_templates.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.gettemplate()
        print(res)
        assert res[""OS-Linux-SNMP-custom""].id == ""6""


    ",True
336,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setcontact,"def test_host_setcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'setcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.setcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
337,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setcontactgroup,"def test_host_setcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'setcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.setcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
338,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setinstance,"def test_host_setinstance(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_poller.json') as instances:
            instance = Poller(json.load(instances))

        data = dict()
        data['action'] = 'setinstance'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""Central""]

        with patch('requests.post') as patched_post:
            host.setinstance(instance)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
339,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setmacro,"def test_host_setmacro(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'setmacro'
        data['object'] = 'HOST'
        data['values'] = [host.name, 'MACRO_TEST', 'VALUE_TEST', '0', 'DESC']

        with patch('requests.post') as patched_post:
            host.setmacro('MACRO_TEST', 'VALUE_TEST', '0', 'DESC')
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
340,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setparam,"def test_host_setparam(self, host_load_data):
        host = host_load_data

        data = dict()
        data['action'] = 'setparam'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""notes"", ""tested""]

        with patch('requests.post') as patched_post:
            host.setparam(""notes"", ""tested"")
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )",True
341,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setparent,"def test_host_setparent(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parent.json') as parent:
            parents = Host(json.load(parent))

        data = dict()
        data['action'] = 'setparent'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""mail-neptune-frontend""]

        with patch('requests.post') as patched_post:
            host.setparent(parents)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
342,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_settemplate,"def test_host_settemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                print(tlp)
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'settemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.settemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
343,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_add,"def test_hosts_add(self, centreon_con):
        values = [
            ""new_host.tld"",
            ""new_host"",
            ""127.0.0.7"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-disk"",
            ""Central"",
            ""hg""
        ]
        data = dict()
        data['action'] = 'add'
        data['object'] = 'HOST'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.hosts.add(
                ""new_host.tld"",
                ""new_host"",
                ""127.0.0.7"",
                ""Central"",
                [""OS-Linux-SNMP-custom"", ""OS-Linux-SNMP-disk""],
                [""hg""],
                post_refresh=False
            )
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
344,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_delete,"def test_hosts_delete(self, centreon_con):
        data = dict()
        data['action'] = 'del'
        data['object'] = 'HOST'
        data['values'] = 'my_deleted_host'

        with patch('requests.post') as patched_post:
            centreon_con.hosts.delete('my_deleted_host', post_refresh=False)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
345,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_delete_with_obj,"def test_hosts_delete_with_obj(self, centreon_con, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'del'
        data['object'] = 'HOST'
        data['values'] = 'mail-uranus-frontend'

        with patch('requests.post') as patched_post:
            centreon_con.hosts.delete(host, post_refresh=False)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )


",True
346,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_list,"def test_hosts_list(self, centreon_con):
        with open(resource_dir / 'test_hosts_list.json') as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = centreon_con.hosts.get('mail-uranus-frontend')
        assert res.id == ""12""

    @responses.activate
    ",True
347,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_not_exist,"def test_hosts_not_exist(self, centreon_con):
        with open(resource_dir / 'test_hosts_list.json') as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        state, res = centreon_con.hosts.get('empty')
        assert state == False
        assert res == None

    ",True
348,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_add,"def test_resourcecfg_add(self, centreon_con):
        values = [
            'resource_test',
            'ressource_value',
            'Central',
            'comment'
        ]
        data = {}
        data['action'] = 'add'
        data['object'] = 'RESOURCECFG'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.resourcecfgs.add(""resource_test"",
                                          ""ressource_value"",
                                          ""Central"",
                                          ""comment"",
                                          post_refresh=False
                                          )
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    ",True
349,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_building_line,"def test_resourcecfg_building_line(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.resourcecfgs.get('_HOSTSNMPVERSION')
        assert res.name == ""$_HOSTSNMPVERSION$""

    @responses.activate
    ",True
350,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_delete,"def test_resourcecfg_delete(self, centreon_con):
        data = {}
        data['action'] = 'del'
        data['object'] = 'RESOURCECFG'
        data['values'] = '42'

        with patch('requests.post') as patched_post:
            centreon_con.resourcecfgs.delete('42', post_refresh=False)
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    @responses.activate
    ",True
351,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_get_one,"def test_resourcecfg_get_one(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.resourcecfgs.get('$_HOSTSNMPVERSION$')
        assert res.name == ""$_HOSTSNMPVERSION$""

    @responses.activate
    ",True
352,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_not_exist,"def test_resourcecfg_not_exist(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')
        state, res = centreon_con.resourcecfgs.get('empty')
        assert state == False
        assert res == None


    clapi_url = 'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi'
    headers = {
        'Content-Type': 'application/json',
        'centreon-auth-token': 'NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc='
        }

    ",True
353,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_setparam,"def test_resourcecfg_setparam(self):
        with open(resource_dir / 'test_resourcecfg_1.json') as data:
            res = ResourceCFG(json.load(data))
        values = [
            res.id,
            'instance',
            'Central',
        ]
        data = {}
        data['action'] = 'setparam'
        data['object'] = 'RESOURCECFG'
        data['values'] = values

        with patch('requests.post') as patched_post:
            res.setparam('instance', 'Central')
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)


",True
382,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,TestFindRain,test_1,"def test_1(self):
        result = np.zeros(len(self.time))
        assert_array_equal(classify._find_rain(self.z, self.time), result)

    ",True
383,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,TestFindRain,test_3,"def test_3(self):
        self.z[5, 3] = 0.1
        result = np.ones(len(self.time))
        result[3:7] = 1
        assert_array_equal(classify._find_rain(self.z, self.time,
                                               time_buffer=1), result)

    ",True
384,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
385,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
386,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
387,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
388,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
389,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
390,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
391,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
392,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
393,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
394,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
395,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
396,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
397,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
398,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
399,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
400,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
401,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
402,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
403,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
404,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
405,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_beta_z_ratio,"def test_calc_beta_z_ratio(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    obj.data.beta = np.array([[1, 1, 2], [1, 1, 3]])
    obj.data.z = np.array([[2, 2, 1], [1, 1, 1]])
    compare = 2 / np.pi * obj.data.beta / obj.data.z
    testing.assert_array_almost_equal(obj._calc_beta_z_ratio(), compare)


",True
406,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_density,"def test_calc_density(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    obj.data.z = np.array([1, 2, 3])
    compare = obj.data.z * 3.67 ** 6 / obj.parameters['Do'] ** 6
    testing.assert_array_almost_equal(obj._calc_density(), compare)


",True
407,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
408,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
409,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
410,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
411,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
412,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_dia,"def test_calc_dia(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    beta_z = np.array([1, 2, 3])
    compare = (gamma(3) / gamma(7) * 3.67 ** 4 / beta_z) ** (1 / 4)
    testing.assert_array_almost_equal(obj._calc_dia(beta_z), compare)


# Create params object with class_objects
",True
413,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_fall_velocity,"def test_calc_fall_velocity(class_objects, params_objects):
    # TODO: fix this
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    compare = np.array([[0, -7.11002091, -7.11002091],
                        [-7.11002091, -7.11002091, 0]])
    testing.assert_array_almost_equal(obj._calc_fall_velocity(), compare)


",True
414,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_lwc,"def test_calc_lwc(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dia, mu, s = [obj.parameters.get(key) for key in ('Do', 'mu', 'S')]
    gamma_ratio = gamma(4 + mu) / gamma(3 + mu) / (3.67 + mu)
    compare = 1000 / 3 * obj.data.beta * s * dia * gamma_ratio
    testing.assert_array_almost_equal(obj._calc_lwc(), compare)


",True
415,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_lwf,"def test_calc_lwf(class_objects, params_objects):
    # TODO: fix this
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    lwc_in = np.array([[0.001, 0.001, 0.002],
                       [0.003, 0.002, 0.001]])
    compare = np.array([[0.001, 0.005508, 0.011016],
                        [0.016524, 0.011016, 0.001]])
    testing.assert_array_almost_equal(obj._calc_lwf(lwc_in), compare)


",True
416,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_v_air,"def test_calc_v_air(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    d_v = np.array([[2.0, 2.0, 4.0], [1.0, 3.0, 5.0]])
    obj.ind_drizzle = (np.array([0, 1]), np.array([1, 2]))
    compare = np.array([[-2.0, 0.0, -4.0],
                        [-1.0, -3.0, -2.0]])
    testing.assert_array_almost_equal(obj._calc_v_air(d_v), compare)


",True
417,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_indices,"def test_find_indices(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    obj.parameters['Do'] = np.array([[0.0, 1.0, 1.0],
                                     [1.0, 1.0, 0.0]])
    x, y = obj._find_indices()
    compare = (np.array([0, 0, 1, 1]),
               np.array([1, 2, 0, 1]))
    testing.assert_array_almost_equal(x, compare)


",True
418,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_lut_indices,"def test_find_lut_indices(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (1, 2)
    dia_init = np.array([[1, 3, 2], [3, 1, 2]])
    n_dia = 1
    n_width = 2
    ind_d = bisect_left(obj.data.mie['Do'], dia_init[ind], hi=n_dia - 1)
    ind_w = bisect_left(obj.width_lut[:, ind_d], -obj.width_ht[ind], hi=n_width - 1)
    compare = (ind_w, ind_d)
    testing.assert_almost_equal(obj._find_lut_indices
                                (ind, dia_init, n_dia, n_width), compare)


",True
419,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
420,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
421,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
422,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
423,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_is_converged,"def test_is_converged(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (1, 2)
    dia_init = np.array([[1, 3, 2], [3, 1, 2]])
    dia = 1
    compare = False
    assert obj._is_converged(ind, dia, dia_init) == compare


",True
424,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_screen_rain,"def test_screen_rain(class_objects, result):
    from cloudnetpy.products.drizzle import _screen_rain
    d_source, d_class, s_width = class_objects
    result = _screen_rain(result, d_class)
    compare = True
    for key in result.keys():
        if not utils.isscalar(result[key]):
            if not np.any(result[key][-1]) == np.any(np.array([0, 0, 0])):
                compare = False
    assert compare is True


",True
425,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
426,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
427,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
428,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_init_status,"@pytest.mark.parametrize(""value"", [0, 1])
def test_init_status(value):
    assert value in STATUS_OBJ._init_status()


",True
429,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_remove_good_profiles,"def test_remove_good_profiles():
    top_c = np.asarray([[1, 1, 0], [1, 0, 1]], dtype=bool)
    compare = np.asarray([[1, 1, 0], [0, 0, 0]], dtype=bool)
    assert_array_equal(STATUS_OBJ._remove_good_profiles(top_c), compare)


",True
430,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_update_status,"@pytest.mark.parametrize(""value"", [0, 1, 2])
def test_update_status(value):
    time = np.array([0])
    STATUS_OBJ._update_status(time)
    assert value in STATUS_OBJ.status


",True
431,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_update_status,"@pytest.mark.parametrize(""value"", [0, 1, 2])
def test_update_status(value):
    time = np.array([0])
    STATUS_OBJ._update_status(time)
    assert value in STATUS_OBJ.status


",True
432,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,TestReduceHeader,test_1,"def test_1(self):
        assert_array_equal(rpg._reduce_header(self.header),
                           {'a': 1, 'b': 2, 'c': 3})

    ",True
477,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_add_classification.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_add_classification.py,TestAddClassification,test_add_classification,"def test_add_classification(self):
		amnt = model.MonetaryAmount(ident='')
		amnt.value = 7.0
		self.assertNotIn('Asking Price', factory.toString(amnt))
		vocab.add_classification(amnt, vocab.AskingPrice)
		self.assertIn('Asking Price', factory.toString(amnt))

",True
478,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_est,"def test_extract_est(self):
		e = extract_monetary_amount({
			'est_price': '12.0',
			'currency': 'pounds'
		})
		self.assertEqual(e.value, 12)
		c = e.currency
		self.assertEqual(e.classified_as[0]._label, 'Estimated Price')
		self.assertEqual(e.currency._label, 'British Pounds')

	",True
479,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_price_with_citation,"def test_extract_price_with_citation(self):
		d = {
			'price': '7',
			'currency': 'pounds',
			'citation': 'crom test suite'
		}
		e = extract_monetary_amount(d, add_citations=True)
		self.assertEqual(e.value, 7)
		self.assertEqual(e.currency._label, 'British Pounds')
		self.assertEqual(e.referred_to_by[0].content, 'crom test suite')


",True
480,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_start,"def test_extract_start(self):
		e = extract_monetary_amount({
			'start_price': '8.5',
			'currency': 'pounds'
		})
		self.assertEqual(e.value, 8.5)
		c = e.currency
		self.assertEqual(e.classified_as[0]._label, 'Starting Price')
		self.assertEqual(e.currency._label, 'British Pounds')

	",True
481,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestAutoIdentifiers,test_no_ident,"def test_no_ident(self):

		model.factory.auto_assign_id = True
		p1 = model.Person()	# auto assigned	 
		p2 = model.Person(ident=None) # auto assigned
		p3 = model.Person(ident="""") # bnode explicitly

		self.assertTrue(p1.id.startswith('http'))
		self.assertTrue(p2.id.startswith('http'))
		self.assertEqual(p3.id, '')

		model.factory.auto_assign_id = False
		p4 = model.Person() # bnode is default
		p5 = model.Person(ident=None) # bnode is default
		p6 = model.Person(ident="""") # bnode explicitly

		self.assertEqual(p4.id, '')
		self.assertEqual(p5.id, '')
		self.assertEqual(p6.id, '')

		
",True
482,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_allows_multiple,"def test_allows_multiple(self):
		p = model.Person()
		self.assertTrue(p.allows_multiple('classified_as'))
		self.assertFalse(p.allows_multiple('born'))
		self.assertRaises(model.DataError, p.allows_multiple, 'fish')

	",True
483,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_check_prop,"def test_check_prop(self):
		desc = self.artist._check_prop('_label', 'Jane Doe\'s Bio')
		self.assertEqual(desc, 1)
		parent = self.artist._check_prop('parent_of', self.son)
		self.assertEqual(parent, 2)

	",True
484,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_check_reference,"def test_check_reference(self):
		self.assertTrue(self.artist._check_reference('http'))
		self.assertFalse(self.artist._check_reference('xxx'))
		self.assertTrue(self.artist._check_reference({'id': 'xxx'}))
		self.assertFalse(self.artist._check_reference({'xxx': 'yyy'}))
		self.assertTrue(self.artist._check_reference(self.son))
		self.assertTrue(self.artist._check_reference(['http']))
		self.assertFalse(self.artist._check_reference(['xxx', 'yyy']))
		self.assertTrue(self.artist._check_reference(model.Person))

	",True
485,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_init_params,"def test_init_params(self):
		p1 = model.Person(ident=""urn:uuid:1234"")
		self.assertEqual(p1.id, ""urn:uuid:1234"")
		p2 = model.Person(ident=""http://schema.org/Foo"")
		self.assertEqual(p2.id, ""schema:Foo"")
		p3 = model.Name(content=""Test"")
		self.assertEqual(p3.content, ""Test"")
		c = model.MonetaryAmount(value=10)
		self.assertEqual(c.value, 10)
		n = model.Name(value=""Rob"")
		self.assertEqual(n.content, ""Rob"")
		i = model.Identifier(content=""xyz123"")
		self.assertEqual(i.content, ""xyz123"")
		i2 = model.Identifier(value=""abc"")
		self.assertEqual(i2.content, ""abc"")

	",True
486,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_list_my_props,"def test_list_my_props(self):
		p1 = model.Person()
		p1.classified_as = model.Type()
		props = p1.list_my_props()
		self.assertEqual(set(props), set(['classified_as', 'id']))
		props = p1.list_my_props(filter=model.Type)
		self.assertEqual(props, ['classified_as'])

	",True
487,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_multiplicity,"def test_multiplicity(self):
		model.factory.process_multiplicity = True
		who = model.Actor()
		mmo = model.HumanMadeObject()
		prod = model.Production()
		mmo.produced_by = prod
		who.current_owner_of = mmo
		mmo.current_owner = who
		self.assertEqual(mmo.current_owner, [who])
		self.assertEqual(who.current_owner_of, [mmo])		
		self.assertEqual(mmo.produced_by, prod)

	",True
488,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_breadth,"def test_breadth(self):
		x = model.TransferOfCustody()
		e = model.Activity()
		fr = model.Group()
		to = model.Group()
		w = model.HumanMadeObject()
		fr._label = ""From""
		to._label = ""To""
		x.transferred_custody_of = w
		x.transferred_custody_from = fr
		x.transferred_custody_to = to
		e.used_specific_object = w
		e.carried_out_by = to
		w.current_owner = fr
		x.specific_purpose = e
		js = model.factory.toJSON(x)
		# Okay ... if we're breadth first, then custody_from is a resource
		# And now it's the first in the list
		self.assertTrue(isinstance(js['transferred_custody_from'][0], OrderedDict))

	",True
489,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_collapse_json,"def test_collapse_json(self):
		model.factory.auto_id_type = ""uuid""
		model.factory.base_url = ""http://lod.example.org/museum/""
		model.factory.context_uri = ""https://linked.art/ns/v1/linked-art.json""
		p = model.Person()
		p.classified_as = model.Type(ident=""http://example.org/Type"", label=""Test"")
		res1 = model.factory.toString(p, compact=False, collapse=60) # all new lines
		res2 = model.factory.toString(p, compact=False, collapse=120) # compact list of type
		self.assertEqual(len(res1.splitlines()), 12)
		self.assertEqual(len(res2.splitlines()), 6)

	",True
490,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_ordering,"def test_ordering(self):
		p = model.Person(label=""Person"")
		p.classified_as = model.Type(ident=""type-uri"")
		p.referred_to_by = model.LinguisticObject(content=""text"")
		p.dimension = model.Dimension(value=1)

		outstr = model.factory.toString(p)
		lbl = outstr.index(""_label"")
		clsf = outstr.index(""classified_as"")
		r2b = outstr.index(""referred_to_by"")
		dim = outstr.index(""dimension"")
		self.assertTrue(lbl < clsf)
		self.assertTrue(clsf < r2b)
		self.assertTrue(r2b < dim)


",True
491,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_pipe_scoped,"def test_pipe_scoped(self):
		x = model.Activity()
		y = model.Activity()
		x.part = y
		model.factory.pipe_scoped_contexts = True
		js = model.factory.toJSON(x)
		self.assertTrue('part|crm:P9_consists_of' in js)
		model.factory.pipe_scoped_contexts = False
		js = model.factory.toJSON(x)		
		self.assertTrue('part|crm:P9_consists_of' not in js)		
		self.assertTrue('part' in js)

	",True
492,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_production_mode,"def test_production_mode(self):

		# model.factory.production_mode()
		# Can't unset the cached hierarchy
		# and it causes the test for the hierarchy to fail
		model.factory.validate_profile = False
		model.factory.validate_properties = False
		model.factory.validate_range = False
		model.factory.validate_multiplicity = False

		p = model.Person()
		p.identified_by = model.Name(value=""abc"")
		p.part = model.HumanMadeObject()
		js = model.factory.toJSON(p)

		model.factory.production_mode(state=False)


	",True
493,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_recursion,"def test_recursion(self):
		x = model.Activity()
		x.part = x
		js = model.factory.toJSON(x)
		# If our recursion checks have regressed, this will barf right here
		self.assertTrue(1)

	",True
494,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_string_list,"def test_string_list(self):
		x = model.Activity()
		x._label = [""Label 1"", ""Label 2""]
		js = model.factory.toJSON(x)
		self.assertTrue(js['_label'] == x._label)

	",True
495,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toFile,"def test_toFile(self):
		self.assertRaises(model.ConfigurationError, model.factory.toFile, self.collection)
		# Test auto filename determination
		model.factory.base_dir = 'tests'
		model.factory.toFile(self.collection)
		self.assertTrue(os.path.isfile('tests/InformationObject/collection.json'))
		# Test explicit filename setting
		model.factory.toFile(self.collection, filename='tests/fishbat.bar')
		self.assertTrue(os.path.isfile('tests/fishbat.bar'))
		# Tidy up
		shutil.rmtree('tests/InformationObject')

	",True
496,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON,"def test_toJSON(self):
		# model.factory.context_uri = 'http://lod.getty.edu/context.json'
		expect = OrderedDict([
			('@context', model.factory.context_uri),
			('id', u'http://lod.example.org/museum/InformationObject/collection'), 
			('type', 'InformationObject'), ('_label', 'Test Object')])
		outj = model.factory.toJSON(self.collection)
		self.assertEqual(expect, outj)

	",True
497,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON_fast,"def test_toJSON_fast(self):
		model.factory.json_serializer = ""fast""
		expect = {'@context': model.factory.context_uri, 
			'id': 'http://lod.example.org/museum/InformationObject/collection', 
			'type': 'InformationObject', 
			'_label': 'Test Object'}
		outj = model.factory.toJSON(self.collection)
		self.assertEqual(expect, outj)
		model.factory.json_serializer = ""normal""

	",True
498,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON_normal,"def test_toJSON_normal(self):
		expect = OrderedDict([(u'@context', model.factory.context_uri), 
			(u'@id', u'http://lod.example.org/museum/Person/1'), (u'@type', u'crm:E21_Person'),
			('rdfs:label', 'Test Person')])
		model.factory.full_names = True
		p = model.Person(""1"")
		p._label = ""Test Person""
		outj = model.factory.toJSON(p)
		self.assertEqual(expect, outj)
		# reset
		model.factory.full_names = False

	",True
499,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toString,"def test_toString(self):
		expect = u'{""@context"":""'+model.factory.context_uri+'"",""id"":""http://lod.example.org/museum/InformationObject/collection"",""type"":""InformationObject"",""_label"":""Test Object""}'
		outs = model.factory.toString(self.collection)
		self.assertEqual(expect, outs)

	",True
500,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toString_fast,"def test_toString_fast(self):
		# Should only be trusted in python 3
		if sys.version_info.major >= 3 and sys.version_info.minor >= 6:
			expect = u'{""@context"":""'+model.factory.context_uri+'"",""id"":""http://lod.example.org/museum/InformationObject/collection"",""type"":""InformationObject"",""_label"":""Test Object""}'
			model.factory.json_serializer = ""fast""		
			outs = model.factory.toString(self.collection)
			model.factory.json_serializer = ""normal""
			self.assertEqual(expect, outs)
		else:
			print(""Skipping toString_fast test in Python 2.x"")

	",True
501,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_not_multiple_instance,"def test_not_multiple_instance(self):
		who = model.Person()
		n = model.Name(content=""Test"")
		who.identified_by = n

		model.factory.multiple_instances_per_property = ""error""
		self.assertRaises(model.DataError, who.__setattr__, 'identified_by', n)
		self.assertEqual(who.identified_by, [n])

		model.factory.multiple_instances_per_property = ""drop""
		who.identified_by = n
		self.assertEqual(who.identified_by, [n,n])		
		# and check that only serialized once
		js = model.factory.toJSON(who)
		self.assertEqual(len(js['identified_by']), 1)

		model.factory.multiple_instances_per_property = ""allow""
		js = model.factory.toJSON(who)
		self.assertEqual(len(js['identified_by']), 2)


",True
502,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validate_multiplicity,"def test_validate_multiplicity(self):
		model.factory.validate_multiplicity = True
		who = model.Person()
		b1 = model.Birth()
		who.born = b1
		b2 = model.Birth()
		self.assertRaises(model.ProfileError, who.__setattr__, 'born', b2)
		model.factory.validate_multiplicity = False
		who.born = b2
		self.assertEqual(who.born, [b1, b2])

	",True
503,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validate_profile_off,"def test_validate_profile_off(self):
		model.factory.validate_profile = False
		ia = model.IdentifierAssignment()
		# If it's not turned off this should raise
		model.factory.validate_profile = True
		self.assertRaises(model.ProfileError, model.IdentifierAssignment)		
		p1 = model.Person()
		self.assertRaises(model.ProfileError, p1.__setattr__, 'documented_in', ""foo"")

	",True
504,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validation_wrong_type,"def test_validation_wrong_type(self):
		model.factory.validate_properties = True
		artist = model.Person('00001', 'Jane Doe')	
		self.assertRaises(model.DataError, artist.__setattr__, 'parent_of', 'Bad Value')

	",True
505,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestPropertyCache,test_cache_hierarchy,"def test_cache_hierarchy(self):
		o = model.HumanMadeObject()
		self.assertEqual(o._all_properties, {})
		model.factory.cache_hierarchy()
		self.assertTrue(len(o._all_properties) > 50)
		

",True
506,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,TestReader,test_read,"def test_read(self):
		self.assertRaises(DataError, self.reader.read, """")
		self.assertRaises(DataError, self.reader.read, ""This is not JSON"")
		self.assertRaises(DataError, self.reader.read, ""{}"")

		whostr = '{""type"": ""Person"", ""_label"": ""me""}'
		self.assertTrue(isinstance(self.reader.read(whostr), Person))

		whostr = '{""@context"": ""fishbat"", ""type"": ""Person"", ""_label"": ""me""}'
		self.assertTrue(isinstance(self.reader.read(whostr), Person))

		levelstr = '{""type"": ""Person"", ""parent_of"": {""type"": ""Person"", ""_label"": ""child""}}'
		self.assertTrue(isinstance(self.reader.read(levelstr).parent_of[0], Person))

		basestr = '{""_label"": ""base""}'
		self.assertTrue(isinstance(self.reader.read(basestr), BaseResource))

		unknown = '{""type"":""FishBat""}'
		self.assertRaises(DataError, self.reader.read, unknown)

		unknown2 = '{""type"":""Person"", ""fishbat"": ""bob""}'
		self.assertRaises(DataError, self.reader.read, unknown)

	",True
507,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,TestReader,test_vocab_collision,"def test_vocab_collision(self):
		# Test that the algorithm picks the right vocab instance
		# if multiple have the same AAT term but different base class

		data = """"""
        {
          ""type"": ""LinguisticObject"",
          ""_label"": ""Sale recorded in catalog: B-267 0003 (1817) (record number 22947)"",
	      ""part_of"": [
            {
              ""type"": ""LinguisticObject"",
              ""_label"": ""Sale Catalog B-267"",
              ""classified_as"": [
                {
                  ""id"": ""http://vocab.getty.edu/aat/300026068"",
                  ""type"": ""Type"",
                  ""_label"": ""Auction Catalog""
                }
              ]
            }
          ]
        }
        """"""
		d = self.reader.read(data)
		self.assertTrue(isinstance(d.part_of[0], vocab.AuctionCatalogText))

",True
508,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_aa_check,"def test_aa_check(self):

		# Make sure that some other test hasn't set it
		try:
			del model.AttributeAssignment.set_assigned_property
		except:
			pass

		t = model.Type()
		aa = model.AttributeAssignment()
		# First check that aa accepts a type
		aa.assigned_property = t
		# And will not accept a string
		self.assertRaises(model.DataError, aa.__setattr__, ""assigned_property"", ""classified_as"")

		# Check we can set anything to assigned / assigned_to
		aa.assigned_property = None
		aa.assigned = aa
		aa.assigned_to = aa
		self.assertEqual(aa.assigned, aa)
		self.assertEqual(aa.assigned_to, aa)

		vocab.add_attribute_assignment_check()

		# This should fail right now as can't classify as an AA
		self.assertRaises(model.DataError, aa.__setattr__, ""assigned_property"", ""classified_as"")
		aa.assigned = None
		aa.assigned_to = None
		aa.assigned = t
		aa.assigned_to = t
		aa.assigned_property = ""classified_as""
		self.assertEqual(aa.assigned_property, 'classified_as')


	",True
509,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_boundary_setter,"def test_boundary_setter(self):
		vocab.add_linked_art_boundary_check()
		p = model.Person()
		p2 = model.Person()
		n = model.Name()
		n.content = ""Test""
		p2.identified_by = n
		p.exact_match = p2
		# Now, Test should not appear in the resulting JSON of p
		factory.linked_art_boundaries = True
		js = factory.toJSON(p)
		self.assertTrue(not 'identified_by' in js['exact_match'][0])
		factory.linked_art_boundaries = False
		js = factory.toJSON(p)
		self.assertTrue('identified_by' in js['exact_match'][0])		

	",True
510,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_conceptual_parts,"def test_conceptual_parts(self):
		r = model.Right()
		r2 = model.Right()
		self.assertRaises(model.DataError, r.__setattr__, 'part', r2)
		r.c_part = r2
		self.assertTrue(r2 in r.c_part)

		vocab.conceptual_only_parts()
		r3 = model.Right()
		r4 = model.Right()
		r3.part = r4
		self.assertTrue(r4 in r3.c_part)
		self.assertTrue(""part"" in model.factory.toJSON(r3))
		self.assertTrue(r4 in r3.part)


	",True
511,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_linguistic_object_boundary,"def test_linguistic_object_boundary(self):
		vocab.add_linked_art_boundary_check()
		jrnl = vocab.JournalText(label=""journal"")
		issue = vocab.IssueText(label=""issue"")
		issue.part_of = jrnl
		issue.referred_to_by = vocab.MaterialStatement(content=""Statement"")

		js = factory.toJSON(issue)
		# Have not embedded journal in issue
		self.assertTrue(not 'classified_as' in js['part_of'][0])
		# Have embedded statement in issue
		self.assertTrue('content' in js['referred_to_by'][0])
		self.assertTrue('type' in js['referred_to_by'][0]['classified_as'][0]['classified_as'][0])

",True
512,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_metatype,"def test_metatype(self):
		vocab.register_instance(""example"", {""parent"": model.Type, ""id"": ""3"", ""label"": ""example type""}) 
		vocab.register_aat_class(""TestObject2"", 
			{""parent"": model.HumanMadeObject, ""id"": ""4"", ""label"": ""example typed object"", ""metatype"": ""example""})
		from cromulent.vocab import TestObject2
		self.assertEqual(TestObject2._classification[0].classified_as[0].id, 'http://vocab.getty.edu/aat/3')

	",True
513,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_multitype,"def test_multitype(self):
		from cromulent.vocab import make_multitype_obj, Painting, Drawing
		inst = make_multitype_obj(Painting, Drawing)
		self.assertTrue(isinstance(inst, Painting))
		self.assertTrue(len(inst.classified_as) == 2)
		self.assertTrue(inst.classified_as[1].id == ""http://vocab.getty.edu/aat/300033973"")

		from cromulent.model import HumanMadeObject

		inst = make_multitype_obj(HumanMadeObject, Painting)
		self.assertTrue(len(inst.classified_as) == 1)
		self.assertTrue(inst.classified_as[0].id == ""http://vocab.getty.edu/aat/300033618"")

	",True
514,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_procurement_boundary,"def test_procurement_boundary(self):
		vocab.add_linked_art_boundary_check()
		a = model.Activity()
		p = vocab.ProvenanceEntry()
		a.caused = p
		js = factory.toJSON(a)
		self.assertTrue(not 'classified_as' in js['caused'][0])		

	",True
586,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_resilient_between_timecaches,"def test_resilient_between_timecaches():
    ",True
587,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_concurrent_done_status,"@pytest.mark.parametrize('throw', [False, True])
def test_concurrent_done_status(throw):
    from threading import Event

    continue_func = Event()

    ",True
588,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_concurrent_done_status,"@pytest.mark.parametrize('throw', [False, True])
def test_concurrent_done_status(throw):
    from threading import Event

    continue_func = Event()

    ",True
589,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_api,"@pytest.mark.usefixtures('concurrency_enabled_and_disabled')
def test_multiexception_api():
    with pytest.raises(MultiException) as exc:
        MultiObject([0, 5]).call(lambda i: 10 // i)

    failed, sucsessful = exc.value.futures

    assert failed.done()
    with pytest.raises(ZeroDivisionError):
        failed.result()
    assert isinstance(failed.exception(), ZeroDivisionError)

    assert sucsessful.done()
    assert sucsessful.result() == 2
    assert sucsessful.exception() is None


",True
590,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_api,"@pytest.mark.usefixtures('concurrency_enabled_and_disabled')
def test_multiexception_api():
    with pytest.raises(MultiException) as exc:
        MultiObject([0, 5]).call(lambda i: 10 // i)

    failed, sucsessful = exc.value.futures

    assert failed.done()
    with pytest.raises(ZeroDivisionError):
        failed.result()
    assert isinstance(failed.exception(), ZeroDivisionError)

    assert sucsessful.done()
    assert sucsessful.result() == 2
    assert sucsessful.exception() is None


",True
591,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_pickling,"def test_multiexception_pickling():
    import pickle
    import multiprocessing

    ",True
592,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_types,"def test_multiexception_types():

    ",True
593,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_1,"def test_multiobject_1():
    m = MultiObject(range(10))

    ",True
594,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_exceptions,"def test_multiobject_exceptions():

    assert MultiException[ValueError] is MultiException[ValueError]
    assert issubclass(MultiException[UnicodeDecodeError], MultiException[UnicodeError])
    assert issubclass(MultiException[UnicodeDecodeError], MultiException[ValueError])

    with pytest.raises(AssertionError):
        MultiException[0]

    with pytest.raises(MultiException):
        MultiObject(range(5)).call(lambda n: 1 / n)

    with pytest.raises(MultiException[Exception]):
        MultiObject(range(5)).call(lambda n: 1 / n)

    with pytest.raises(MultiException[ZeroDivisionError]):
        MultiObject(range(5)).call(lambda n: 1 / n)

    try:
        MultiObject(range(5)).call(lambda n: 1 / n)
    except MultiException[ValueError] as exc:
        assert False
    except MultiException[ZeroDivisionError] as exc:
        assert len(exc.actual) == 1
        assert isinstance(exc.one, ZeroDivisionError)
    else:
        assert False

    with pytest.raises(MultiException[ArithmeticError]):
        try:
            MultiObject(range(5)).call(lambda n: 1 / n)
        except ZeroDivisionError:
            assert False  # shouldn't be here
        except MultiException[ValueError]:
            assert False  # shouldn't be here


",True
595,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_logging,"def test_multiobject_logging():
    m = MultiObject(range(4), log_ctx=""abcd"", initial_log_interval=0.1)

    ",True
596,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_context_stacks,"def test_thread_context_stacks():
    TC = ThreadContexts(stacks=('i', 'j'))
    assert TC.i == TC.j == []

    with TC(i='a'):
        ",True
597,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_contexts_counters,"def test_thread_contexts_counters():
    TC = ThreadContexts(counters=('i', 'j'))
    assert TC.i == TC.j == 0

    with TC(i=1):
        ",True
598,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_stacks,"def test_thread_stacks():
    with concurrent(sleep, .1, threadname='sleep'):
        print(get_thread_stacks().render())


",True
599,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_exceptions.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_exceptions.py,,test_pickle_texception,"def test_pickle_texception():
    import pickle

    t1 = T(what=""happened"", a=1, b=Bunch(x=[1, 2, 3], y=range(5)))
    t2 = pickle.loads(pickle.dumps(t1))

    assert t1.render() == t2.render()
    assert t1._params == t2._params
",True
600,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_ctx,"def test_indent_around_ctx(get_log):

    @logger.indented(""hey"")
    @contextmanager
    ",True
601,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_function,"def test_indent_around_function(get_log):

    @logger.indented(""hey"")
    ",True
602,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_generator,"def test_indent_around_generator(get_log):

    @logger.indented(""hey"")
    ",True
603,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_rwlock.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_rwlock.py,,test_rwlock,"def test_rwlock():

    main_ctrl = threading.Event()
    reader_ctrl = threading.Event()
    writer_ctrl = threading.Event()
    lock = RWLock(""test"")

    state = Bunch(reading=False, writing=False)

    ",True
604,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_async,"def test_async():
    from threading import get_ident

    main = get_ident()

    @on_async_test.register(asynchronous=True)
    ",True
605,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_ctx,"def test_ctx():
    result = []

    ",True
606,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_ctx_with_identifier,"def test_ctx_with_identifier():
    ",True
607,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_priorities,"def test_priorities():

    l = []

    @on_test.register(priority=PRIORITIES.LAST)
    ",True
608,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_priorities_async,"def test_priorities_async():

    l = []
    import time

    @on_test.register(asynchronous=True, priority=PRIORITIES.FIRST)
    ",True
609,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_registration_context,"def test_registration_context():

    ",True
610,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref,"def test_signal_weakref():
    """"""
    Test that signals handlers of methods are deleted when their objects get collected
    """"""
    import gc

    ",True
611,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_complex_descriptors,"def test_signal_weakref_complex_descriptors():
    import gc
    from easypy.lockstep import lockstep

    ",True
612,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_after,"def test_signal_weakref_context_manager_delete_after():
    import gc

    result = []

    ",True
613,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_after_with_identifier,"def test_signal_weakref_context_manager_delete_after_with_identifier():
    import gc

    result = []

    ",True
614,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_during,"def test_signal_weakref_context_manager_delete_during():
    import gc

    result = []

    ",True
615,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_during_with_identifier,"def test_signal_weakref_context_manager_delete_during_with_identifier():
    import gc

    result = []

    ",True
616,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_with_identifier,"def test_signal_weakref_with_identifier():
    import gc

    ",True
617,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_identifier,"def test_simple_signal_object_identifier():

    on_test_identifier(obj='xxx')

    ",True
618,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_identifier_attribute,"def test_simple_signal_object_identifier_attribute():

    ",True
619,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_registration,"def test_simple_signal_object_registration():

    ",True
620,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_wo_identifier,"def test_simple_signal_object_wo_identifier():

    ",True
621,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_registration,"def test_simple_signal_registration():

    @on_test.register
    ",True
622,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition,"def test_logged_condition():
    cond = LoggedCondition('test', log_interval=.1)

    progress = 0
    executed = []

    ",True
623,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition_exception,"def test_logged_condition_exception():
    cond = LoggedCondition('test', log_interval=.2)

    should_throw = False

    ",True
624,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition_waited_for,"def test_logged_condition_waited_for():
    cond = LoggedCondition('test', log_interval=15)
    progress = 0
    executed = []

    ",True
625,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_lock,"def test_logged_lock():
    lock = LoggedRLock(""test"", lease_expiration=1, log_interval=.2)

    step1 = threading.Event()
    step2 = threading.Event()

    ",True
626,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_failing_context_manager,"def test_synchronization_coordinator_failing_context_manager():
    ",True
627,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_timeout,"def test_synchronization_coordinator_timeout():
    mo = MultiObject(range(3))

    ",True
628,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_multiobject_exception,"def test_synchronization_coordinator_with_multiobject_exception():
    mo = MultiObject(range(3))

    executed = []

    ",True
629,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_log_predicate,"def test_wait_log_predicate(get_log):
    ",True
646,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,TestIDF,test_popidfobject,"def test_popidfobject(self):
        idftxt = """"
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        key = ""BUILDING""
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building1"")
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building2"")
        buildings = idf.idfobjects[""building""]
        removethis = buildings[-2]
        idf.popidfobject(key, 2)
        assert buildings[2].Name == ""Building2""
        assert idf.model.dt[key][2][1] == ""Building2""
",True
647,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,TestIDF,test_removeidfobject,"def test_removeidfobject(self):
        """"""py.test for IDF.removeidfobject """"""
        idftxt = """"
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        key = ""BUILDING""
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building1"")
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building2"")
        buildings = idf.idfobjects[""building""]
        removethis = buildings[-2]
        idf.removeidfobject(removethis)
        assert buildings[2].Name == ""Building2""
        assert idf.model.dt[key][2][1] == ""Building2""

    ",True
648,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,TestEpBunch,test_get_referenced_object,"def test_get_referenced_object(self):
        """"""py.test for get_referenced_object""""""
        idf = IDF()
        idf.initnew(""test.idf"")
        idf.newidfobject(""VERSION"")  # does not have a field ""Name""

        # construction material
        construction = idf.newidfobject(""CONSTRUCTION"", Name=""construction"")
        construction.Outside_Layer = ""TestMaterial""

        expected = idf.newidfobject(""MATERIAL"", Name=""TestMaterial"")

        fetched = idf.getobject(""MATERIAL"", ""TestMaterial"")
        assert fetched == expected

        material = construction.get_referenced_object(""Outside_Layer"")
        assert material == expected

        # window material
        glazing_group = idf.newidfobject(
            ""WINDOWMATERIAL:GLAZINGGROUP:THERMOCHROMIC"", Name=""glazing_group""
        )
        glazing_group.Window_Material_Glazing_Name_1 = ""TestWindowMaterial""

        expected = idf.newidfobject(
            ""WINDOWMATERIAL:GLAZING"", Name=""TestWindowMaterial""
        )  # has several \references

        fetched = idf.getobject(""WINDOWMATERIAL:GLAZING"", ""TestWindowMaterial"")
        assert fetched == expected

        material = glazing_group.get_referenced_object(""Window_Material_Glazing_Name_1"")
        assert material == expected


bldfidf = """"""
Version,
    6.0;

BUILDING,
    Empire State Building,    !- Name
    30.0,                     !- North Axis
    City,                     !- Terrain
    0.04,                     !- Loads Convergence Tolerance Value
    0.4,                      !- Temperature Convergence Tolerance Value
    FullExterior,             !- Solar Distribution
    25,                       !- Maximum Number of Warmup Days
    6;                        !- Minimum Number of Warmup Days

BuildingSurface:Detailed,
  Zn001:Wall001,           !- Name
  Wall,                    !- Surface Type
  EXTWALL80,               !- Construction Name
  West Zone,               !- Zone Name
  Outdoors,                !- Outside Boundary Condition
  ,                        !- Outside Boundary Condition Object
  SunExposed,              !- Sun Exposure
  WindExposed,             !- Wind Exposure
  0.5000000,               !- View Factor to Ground
  4,                       !- Number of Vertices
  0,0,3.048000,  !- X,Y,Z ==> Vertex 1 {m}
  0,0,0,  !- X,Y,Z ==> Vertex 2 {m}
  6.096000,0,0,  !- X,Y,Z ==> Vertex 3 {m}
  6.096000,0,3.048000;  !- X,Y,Z ==> Vertex 4 {m}
""""""
# test_EpBunch1()
# import idfreader


",True
649,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,TestEpBunch,test_getreferingobjs,"def test_getreferingobjs(self):
        """"""py.test for getreferingobjs""""""
        thedata = (
            (
                """"""  Zone,
        Box,  !- Name
        0.0,  !- Direction of Relative North {deg}
        0.288184,  !- X Origin {m}
        0.756604,  !- Y Origin {m}
        0.0,  !- Z Origin {m}
        ,  !- Type
        1;  !- Multiplier

      BuildingSurface:Detailed,
        N_Wall,  !- Name
        Wall,  !- Surface Type
        Exterior Wall,  !- Construction Name
        Box,  !- Zone Name
        Outdoors,  !- Outside Boundary Condition
        ,  !- Outside Boundary Condition Object
        SunExposed,  !- Sun Exposure
        WindExposed,  !- Wind Exposure
        ,  !- View Factor to Ground
        1,  !- Number of Vertices
        5.000000000000,  !- Vertex 1 X-coordinate {m}
        6.000000000000,  !- Vertex 1 Y-coordinate {m}
        3.000000000000;  !- Vertex 1 Z-coordinate {m}

      WALL:EXTERIOR,
          WallExterior,                    !- Name
          ,                         !- Construction Name
          Box,                         !- Zone Name
          ,                         !- Azimuth Angle
          90;                       !- Tilt Angle

        BUILDINGSURFACE:DETAILED,
            EWall,                    !- Name
            ,                         !- Surface Type
            ,                         !- Construction Name
            BOX,                         !- Zone Name
            OtherBox,                         !- Outside Boundary Condition
            ,                         !- Outside Boundary Condition Object
            SunExposed,               !- Sun Exposure
            WindExposed,              !- Wind Exposure
            autocalculate,            !- View Factor to Ground
            autocalculate;            !- Number of Vertices

        BUILDINGSURFACE:DETAILED,
            EWall1,                    !- Name
            ,                         !- Surface Type
            ,                         !- Construction Name
            BOX_other,                         !- Zone Name
            OtherBox,                         !- Outside Boundary Condition
            ,                         !- Outside Boundary Condition Object
            SunExposed,               !- Sun Exposure
            WindExposed,              !- Wind Exposure
            autocalculate,            !- View Factor to Ground
            autocalculate;            !- Number of Vertices
      HVACTemplate:Thermostat,
        Constant Setpoint Thermostat,  !- Name
        ,                        !- Heating Setpoint Schedule Name
        20,                      !- Constant Heating Setpoint {C}
        ,                        !- Cooling Setpoint Schedule Name
        25;                      !- Constant Cooling Setpoint {C}

    FENESTRATIONSURFACE:DETAILED,
        Window1,                  !- Name
        ,                         !- Surface Type
        ,                         !- Construction Name
        EWall1,                         !- Building Surface Name
        ,                         !- Outside Boundary Condition Object
        autocalculate,            !- View Factor to Ground
        ,                         !- Shading Control Name
        ,                         !- Frame and Divider Name
        1.0,                      !- Multiplier
        autocalculate;            !- Number of Vertices
      """""",
                ""Box"",
                [""N_Wall"", ""EWall"", ""WallExterior""],
            ),  # idftxt, zname, surfnamelst
        )
        for idftxt, zname, surfnamelst in thedata:
            # import pdb; pdb.set_trace()
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {""iddgroups"": [""Thermal Zones and Surfaces""]}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {""fields"": [""Zone_Name""]}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {
                ""fields"": [""Zone_Name""],
                ""iddgroups"": [""Thermal Zones and Surfaces""],
            }
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        # use the above idftxt and try other to get other references.
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            wname = ""EWall1""
            windownamelist = [""Window1""]
            wall = idf.getobject(""BUILDINGSURFACE:DETAILED"", wname)
            kwargs = {
                ""fields"": [""Building_Surface_Name""],
                ""iddgroups"": [""Thermal Zones and Surfaces""],
            }
            result = wall.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == windownamelist

    ",True
650,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
651,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
652,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
653,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
654,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
655,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
656,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
657,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
658,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
659,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
660,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
661,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
662,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,,test_pythonic,"def test_pythonic():
    """"""py.test for ex_pythonic.py""""""
    zones = bunchdt[""zone""]  # all the zones
    zone0 = zones[0]
    # -
    printout = ""PLENUM-1""
    assert zone0.Name == printout
    # -
    printout = [
        ""PLENUM-1"",
        ""SPACE1-1"",
        ""SPACE2-1"",
        ""SPACE3-1"",
        ""SPACE4-1"",
        ""SPACE5-1"",
        ""Sup-PLENUM-1"",
    ]
    zonenames = [zone.Name for zone in zones]
    assert printout == zonenames
    # -
    printout = [
        ""283.2"",
        ""239.247360229"",
        ""103.311355591"",
        ""239.247360229"",
        ""103.311355591"",
        ""447.682556152"",
        ""208.6"",
    ]
    zonevolumes = [zone.Volume for zone in zones]
    for item1, item2 in zip(printout, zonevolumes):
        item1, item2 = float(item1), float(item2)
        assert pytest_helpers.almostequal(item1, item2)
    # -
    printout = [(""SPACE2-1"", ""103.311355591""), (""SPACE4-1"", ""103.311355591"")]
    smallzones = [zn for zn in zones if float(zn.Volume) < 150]
    namevolume = [(zn.Name, zn.Volume) for zn in smallzones]
    for (n1, v1), (n2, v2) in zip(printout, namevolume):
        (n1, v1) = (n1, float(v1))
        (n2, v2) = (n2, float(v2))
        assert n1 == n2
        assert pytest_helpers.almostequal(v1, v2)
    # -
    printout = 2
    assert printout == len(smallzones)
    # -
    printout = [
        ""PLENUM-1"",
        ""SPACE1-1"",
        ""FIRST-SMALL-ZONE"",
        ""SPACE3-1"",
        ""SECOND-SMALL-ZONE"",
        ""SPACE5-1"",
        ""Sup-PLENUM-1"",
    ]
    smallzones[0].Name = ""FIRST-SMALL-ZONE""
    smallzones[1].Name = ""SECOND-SMALL-ZONE""
    # now the zone names are:
    zonenames = [zone.Name for zone in zones]
    assert printout == zonenames


",True
663,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_fan_maxcfm,"def test_fan_maxcfm():
    """"""py.test for fan_maxcfm in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    cfm = thefan.f_fan_maxcfm
    assert almostequal(cfm, 12000, places=5)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    watts = thefan.f_fanpower_watts
    assert watts == ""autosize""


",True
664,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,testfanpower_bhp,"def testfanpower_bhp():
    """"""py.test for fanpower_bhp in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    bhp = thefan.f_fanpower_bhp
    assert almostequal(bhp, 2.40306611606)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    bhp = thefan.f_fanpower_bhp
    assert bhp == ""autosize""


",True
665,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,testfanpower_watts,"def testfanpower_watts():
    """"""py.test for fanpower_watts in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    watts = thefan.f_fanpower_watts
    assert almostequal(watts, 1791.9664027495671)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    watts = thefan.f_fanpower_watts
    assert watts == ""autosize""


",True
666,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_componentsintobranch,"def test_componentsintobranch():
    """"""py.test for componentsintobranch""""""
    tdata = (
        (
            """"""BRANCH,
             sb0,
             0.0,
             ,
             Pipe:Adiabatic,
             sb0_pipe,
             p_loop Supply Inlet,
             sb0_pipe_outlet,
             Bypass;
             """""",
            [(""PIPE:ADIABATIC"", ""pipe1"", None), (""PIPE:ADIABATIC"", ""pipe2"", None)],
            """",
            [
                ""PIPE:ADIABATIC"",
                ""pipe1"",
                ""pipe1_Inlet_Node_Name"",
                ""pipe1_Outlet_Node_Name"",
                """",
                ""PIPE:ADIABATIC"",
                ""pipe2"",
                ""pipe2_Inlet_Node_Name"",
                ""pipe2_Outlet_Node_Name"",
                """",
            ],
        ),
        # idftxt, complst, fluid, branchcomps
        (
            """"""BRANCH,
            sb0,
            0.0,
            ,
            Pipe:Adiabatic,
            sb0_pipe,
            p_loop Supply Inlet,
            sb0_pipe_outlet,
            Bypass;
            """""",
            [
                (""PIPE:ADIABATIC"", ""pipe1"", None),
                (""CHILLER:ELECTRIC"", ""chiller"", ""Chilled_Water_""),
            ],
            """",
            [
                ""PIPE:ADIABATIC"",
                ""pipe1"",
                ""pipe1_Inlet_Node_Name"",
                ""pipe1_Outlet_Node_Name"",
                """",
                ""CHILLER:ELECTRIC"",
                ""chiller"",
                ""chiller_Chilled_Water_Inlet_Node_Name"",
                ""chiller_Chilled_Water_Outlet_Node_Name"",
                """",
            ],
        ),
        # idftxt, complst, fluid, branchcomps
    )
    for ii, (idftxt, complst, fluid, branchcomps) in enumerate(tdata):
        fhandle = StringIO(idftxt)
        idf = IDF(fhandle)
        components_thisnodes = [
            (idf.newidfobject(key, Name=nm), thisnode) for key, nm, thisnode in complst
        ]
        fnc = hvacbuilder.initinletoutlet
        components_thisnodes = [
            (fnc(idf, cp, thisnode), thisnode) for cp, thisnode in components_thisnodes
        ]
        branch = idf.idfobjects[""BRANCH""][0]
        branch = hvacbuilder.componentsintobranch(
            idf, branch, components_thisnodes, fluid
        )
        assert branch.obj[4:] == branchcomps


",True
667,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_connectcomponents,"def test_connectcomponents():
    """"""py.test for connectcomponents""""""
    fhandle = StringIO("""")
    idf = IDF(fhandle)

    tdata = (
        (
            [
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe1""), None),
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe2""), None),
            ],
            [""pipe1_Inlet_Node_Name"", [""pipe2_Inlet_Node_Name"", ""pipe1_pipe2_node""]],
            [[""pipe1_Outlet_Node_Name"", ""pipe1_pipe2_node""], ""pipe2_Outlet_Node_Name""],
            """",
        ),
        # components_thisnodes, inlets, outlets, fluid
        (
            [
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe1""), ""Water_""),
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe2""), ""Water_""),
            ],
            [
                ""pipe1_Water_Inlet_Node_Name"",
                """",
                ""pipe2_Water_Inlet_Node_Name"",
                ["""", ""pipe1_pipe2_node""],
            ],
            [
                [""pipe1_Water_Outlet_Node_Name"", ""pipe1_pipe2_node""],
                """",
                ""pipe2_Water_Outlet_Node_Name"",
                """",
            ],
            ""Air"",
        ),
        # components_thisnodes, inlets, outlets, fluid
        (
            [
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe1""), None),
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe2""), ""Water_""),
            ],
            [
                ""pipe1_Inlet_Node_Name"",
                ""pipe2_Water_Inlet_Node_Name"",
                [""pipe2_Air_Inlet_Node_Name"", ""pipe1_pipe2_node""],
            ],
            [
                [""pipe1_Outlet_Node_Name"", ""pipe1_pipe2_node""],
                ""pipe2_Water_Outlet_Node_Name"",
                """",
            ],
            ""Air"",
        ),
        # components_thisnodes, inlets, outlets, fluid
    )
    for components_thisnodes, inlets, outlets, fluid in tdata:
        # init the nodes in the new components
        for component, thisnode in components_thisnodes:
            hvacbuilder.initinletoutlet(idf, component, thisnode)
        hvacbuilder.connectcomponents(idf, components_thisnodes, fluid)
        inresult = []
        for component, thisnode in components_thisnodes:
            fldnames = hvacbuilder.getfieldnamesendswith(component, ""Inlet_Node_Name"")
            for name in fldnames:
                inresult.append(component[name])
        assert inresult == inresult
        outresult = []
        for component, thisnode in components_thisnodes:
            fldnames = hvacbuilder.getfieldnamesendswith(component, ""Outlet_Node_Name"")
            for name in fldnames:
                outresult.append(component[name])
        assert outresult == outlets


",True
668,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getbranchcomponents,"def test_getbranchcomponents():
    """"""py.test for getbranchcomponents""""""
    tdata = (
        (
            """"""BRANCH,
            sb1,
            0.0,
            ,
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node,
            ,
            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet,
            ;
            """""",
            True,
            [(""PIPE:ADIABATIC"", ""np1""), (""PIPE:ADIABATIC"", ""np2"")],
        ),  # idftxt, utest, componentlist
        (
            """"""BRANCH,
            sb1,
            0.0,
            ,
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node,
            ,
            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet,
            ;
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node;

            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet;

            """""",
            False,
            [
                [""PIPE:ADIABATIC"", ""np1"", ""np1_inlet"", ""np1_np2_node""],
                [""PIPE:ADIABATIC"", ""np2"", ""np1_np2_node"", ""np2_outlet""],
            ],
        ),
        # idftxt, utest, componentlist
    )
    for idftxt, utest, componentlist in tdata:
        fhandle = StringIO(idftxt)
        idf = IDF(fhandle)
        branch = idf.idfobjects[""BRANCH""][0]
        result = hvacbuilder.getbranchcomponents(idf, branch, utest=utest)
        if utest:
            assert result == componentlist
        else:
            lresult = [item.obj for item in result]
            assert lresult == componentlist


",True
669,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getfieldnamesendswith,"def test_getfieldnamesendswith():
    """"""py.test for getfieldnamesendswith""""""
    idftxt = """"""PIPE:ADIABATIC,
        np2,                      !- Name
        np1_np2_node,             !- Inlet Node Name
        np2_outlet;               !- Outlet Node Name

    """"""
    tdata = (
        (""Inlet_Node_Name"", [""Inlet_Node_Name""]),  # endswith, fieldnames
        (""Node_Name"", [""Inlet_Node_Name"", ""Outlet_Node_Name""]),  # endswith, fieldnames
        (
            ""Name"",
            [""Name"", ""Inlet_Node_Name"", ""Outlet_Node_Name""],
        ),  # endswith, fieldnames
    )
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    idfobject = idf.idfobjects[""PIPE:ADIABATIC""][0]
    for endswith, fieldnames in tdata:
        result = hvacbuilder.getfieldnamesendswith(idfobject, endswith)
        assert result == fieldnames


",True
670,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getnodefieldname,"def test_getnodefieldname():
    """"""py.test for getnodefieldname""""""
    tdata = (
        (""PIPE:ADIABATIC"", ""pipe1"", ""Inlet_Node_Name"", """", ""Inlet_Node_Name""),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""CHILLER:ELECTRIC"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            """",
            ""Chilled_Water_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            ""Water"",
            ""Water_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            ""Air"",
            ""Air_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Outlet_Node_Name"",
            ""Air"",
            ""Air_Outlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
    )
    for objtype, objname, endswith, fluid, nodefieldname in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        idfobject = idf.newidfobject(objtype, Name=objname)
        result = hvacbuilder.getnodefieldname(idfobject, endswith, fluid)
        assert result == nodefieldname


",True
671,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_initinletoutlet,"def test_initinletoutlet():
    """"""py.test for initinletoutlet""""""
    tdata = (
        (
            ""PIPE:ADIABATIC"",
            ""apipe"",
            None,
            True,
            [""apipe_Inlet_Node_Name""],
            [""apipe_Outlet_Node_Name""],
        ),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
        (""PIPE:ADIABATIC"", ""apipe"", None, False, [""Gumby""], [""apipe_Outlet_Node_Name""]),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
        (
            ""Coil:Cooling:Water"",
            ""acoil"",
            ""Water_"",
            True,
            [""acoil_Water_Inlet_Node_Name"", """"],
            [""acoil_Water_Outlet_Node_Name"", """"],
        ),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
    )
    fhandle = StringIO("""")
    idf = IDF(fhandle)
    for idfobjectkey, idfobjname, thisnode, force, inlets, outlets in tdata:
        idfobject = idf.newidfobject(idfobjectkey, Name=idfobjname)
        inodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Inlet_Node_Name"")
        idfobject[inodefields[0]] = ""Gumby""
        hvacbuilder.initinletoutlet(idf, idfobject, thisnode, force=force)
        inodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Inlet_Node_Name"")
        for nodefield, inlet in zip(inodefields, inlets):
            result = idfobject[nodefield]
            assert result == inlet
        onodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Outlet_Node_Name"")
        for nodefield, outlet in zip(onodefields, outlets):
            result = idfobject[nodefield]
            assert result == outlet


",True
672,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makecondenserloop,"def test_makecondenserloop():
    """"""pytest for makecondenserloop""""""
    tdata = (
        (
            """",
            ""c_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            """"""BRANCH, sb0, 0.0, , Pipe:Adiabatic, sb0_pipe,
        c_loop Cond_Supply Inlet, sb0_pipe_outlet, Bypass;  BRANCH, sb1, 0.0,
        , Pipe:Adiabatic, sb1_pipe, sb1_pipe_inlet, sb1_pipe_outlet,
        Bypass;  BRANCH, sb2, 0.0, , Pipe:Adiabatic, sb2_pipe,
        sb2_pipe_inlet, sb2_pipe_outlet, Bypass;  BRANCH, sb3, 0.0, ,
        Pipe:Adiabatic, sb3_pipe, sb3_pipe_inlet, sb3_pipe_outlet,
        Bypass;  BRANCH, sb4, 0.0, , Pipe:Adiabatic, sb4_pipe,
        sb4_pipe_inlet, c_loop Cond_Supply Outlet, Bypass;  BRANCH,
        db0, 0.0, , Pipe:Adiabatic, db0_pipe, c_loop Demand Inlet,
        db0_pipe_outlet, Bypass;  BRANCH, db1, 0.0, , Pipe:Adiabatic, db1_pipe,
        db1_pipe_inlet, db1_pipe_outlet, Bypass;  BRANCH, db2, 0.0, ,
        Pipe:Adiabatic, db2_pipe, db2_pipe_inlet, db2_pipe_outlet, Bypass;
        BRANCH, db3, 0.0, , Pipe:Adiabatic, db3_pipe, db3_pipe_inlet,
        db3_pipe_outlet, Bypass;  BRANCH, db4, 0.0, , Pipe:Adiabatic,
        db4_pipe, db4_pipe_inlet, c_loop Demand Outlet, Bypass;
        BRANCHLIST, c_loop Cond_Supply Branchs, sb0, sb1, sb2, sb3, sb4;
        BRANCHLIST, c_loop Condenser Demand Branchs, db0, db1, db2, db3,
        db4;  CONNECTOR:SPLITTER, c_loop_supply_splitter, sb0, sb1,
        sb2, sb3;  CONNECTOR:SPLITTER, c_loop_demand_splitter, db0, db1, db2,
        db3;  CONNECTOR:MIXER, c_loop_supply_mixer, sb4, sb1, sb2, sb3;
        CONNECTOR:MIXER, c_loop_demand_mixer, db4, db1, db2, db3;
        CONNECTORLIST, c_loop Cond_Supply Connectors, Connector:Splitter,
        c_loop_supply_splitter, Connector:Mixer, c_loop_supply_mixer;
        CONNECTORLIST, c_loop Condenser Demand Connectors,
        Connector:Splitter, c_loop_demand_splitter, Connector:Mixer,
        c_loop_demand_mixer;  PIPE:ADIABATIC, sb0_pipe,
        c_loop Cond_Supply Inlet, sb0_pipe_outlet;  PIPE:ADIABATIC,
        sb1_pipe, sb1_pipe_inlet, sb1_pipe_outlet;  PIPE:ADIABATIC, sb2_pipe,
        sb2_pipe_inlet, sb2_pipe_outlet;  PIPE:ADIABATIC, sb3_pipe,
        sb3_pipe_inlet, sb3_pipe_outlet;  PIPE:ADIABATIC, sb4_pipe,
        sb4_pipe_inlet, c_loop Cond_Supply Outlet;  PIPE:ADIABATIC,
        db0_pipe, c_loop Demand Inlet, db0_pipe_outlet;  PIPE:ADIABATIC,
        db1_pipe, db1_pipe_inlet, db1_pipe_outlet;  PIPE:ADIABATIC,
        db2_pipe, db2_pipe_inlet, db2_pipe_outlet;  PIPE:ADIABATIC,
        db3_pipe, db3_pipe_inlet, db3_pipe_outlet;  PIPE:ADIABATIC, db4_pipe,
        db4_pipe_inlet, c_loop Demand Outlet;  CONDENSERLOOP, c_loop, Water, ,
        , , , , , 0.0, Autocalculate, c_loop Cond_Supply Inlet,
        c_loop Cond_Supply Outlet, c_loop Cond_Supply Branchs,
        c_loop Cond_Supply Connectors, c_loop Demand Inlet,
        c_loop Demand Outlet, c_loop Condenser Demand Branchs,
        c_loop Condenser Demand Connectors, Sequential, None;  """""",
        ),  # blankidf, loopname, sloop, dloop, nidf
    )
    for blankidf, loopname, sloop, dloop, nidf in tdata:

        fhandle = StringIO("""")
        idf1 = IDF(fhandle)
        loopname = ""c_loop""
        sloop = [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""]
        dloop = [""db0"", [""db1"", ""db2"", ""db3""], ""db4""]
        hvacbuilder.makecondenserloop(idf1, loopname, sloop, dloop)
        idf2 = IDF(StringIO(nidf))
        assert str(idf1.model) == str(idf2.model)


",True
673,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeductbranch,"def test_makeductbranch():
    """"""py.test for makeductbranch""""""
    tdata = (
        (
            ""d_branch"",
            [
                ""BRANCH"",
                ""d_branch"",
                0.0,
                """",
                ""duct"",
                ""d_branch_duct"",
                ""d_branch_duct_inlet"",
                ""d_branch_duct_outlet"",
                ""Bypass"",
            ],
            [""DUCT"", ""d_branch_duct"", ""d_branch_duct_inlet"", ""d_branch_duct_outlet""],
        ),  # db_name, branch_obj, duct_obj
    )
    for db_name, branch_obj, duct_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makeductbranch(idf, db_name)
        assert result.obj == branch_obj
        theduct = idf.getobject(""DUCT"", result.Component_1_Name)
        assert theduct.obj == duct_obj


",True
674,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeductcomponent,"def test_makeductcomponent():
    """"""py.test for makeductcomponent""""""
    tdata = (
        (""aduct"", [""DUCT"", ""aduct"", ""aduct_inlet"", ""aduct_outlet""]),  # dname, duct_obj
    )
    for dname, duct_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makeductcomponent(idf, dname)
        assert result.obj == duct_obj


",True
675,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makepipebranch,"def test_makepipebranch():
    """"""py.test for makepipebranch""""""
    tdata = (
        (
            ""p_branch"",
            [
                ""BRANCH"",
                ""p_branch"",
                0.0,
                """",
                ""Pipe:Adiabatic"",
                ""p_branch_pipe"",
                ""p_branch_pipe_inlet"",
                ""p_branch_pipe_outlet"",
                ""Bypass"",
            ],
            [
                ""PIPE:ADIABATIC"",
                ""p_branch_pipe"",
                ""p_branch_pipe_inlet"",
                ""p_branch_pipe_outlet"",
            ],
        ),  # pb_name, branch_obj, pipe_obj
    )
    for pb_name, branch_obj, pipe_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makepipebranch(idf, pb_name)
        assert result.obj == branch_obj
        thepipe = idf.getobject(""PIPE:ADIABATIC"", result.Component_1_Name)
        assert thepipe.obj == pipe_obj


",True
676,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makepipecomponent,"def test_makepipecomponent():
    """"""py.test for makepipecomponent""""""
    tdata = (
        (
            ""apipe"",
            [""PIPE:ADIABATIC"", ""apipe"", ""apipe_inlet"", ""apipe_outlet""],
        ),  # pname, pipe_obj
        (
            ""bpipe"",
            [""PIPE:ADIABATIC"", ""bpipe"", ""bpipe_inlet"", ""bpipe_outlet""],
        ),  # pname, pipe_obj
    )
    for pname, pipe_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makepipecomponent(idf, pname)
        assert result.obj == pipe_obj


",True
677,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeplantloop,"def test_makeplantloop():
    """"""pytest for makeplantloop""""""
    tdata = (
        (
            """",
            ""p_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            """"""BRANCH, sb0, 0.0, , Pipe:Adiabatic, sb0_pipe, p_loop Supply Inlet,
        sb0_pipe_outlet, Bypass;BRANCH, sb1, 0.0, , Pipe:Adiabatic, sb1_pipe,
        sb1_pipe_inlet, sb1_pipe_outlet, Bypass;BRANCH, sb2, 0.0, ,
        Pipe:Adiabatic, sb2_pipe, sb2_pipe_inlet, sb2_pipe_outlet,
        Bypass;BRANCH, sb3, 0.0, , Pipe:Adiabatic, sb3_pipe, sb3_pipe_inlet,
        sb3_pipe_outlet, Bypass;BRANCH, sb4, 0.0, , Pipe:Adiabatic, sb4_pipe,
        sb4_pipe_inlet, p_loop Supply Outlet, Bypass;BRANCH, db0, 0.0, ,
        Pipe:Adiabatic, db0_pipe, p_loop Demand Inlet, db0_pipe_outlet,
        Bypass;BRANCH, db1, 0.0, , Pipe:Adiabatic, db1_pipe, db1_pipe_inlet,
        db1_pipe_outlet, Bypass;BRANCH, db2, 0.0, , Pipe:Adiabatic, db2_pipe,
        db2_pipe_inlet, db2_pipe_outlet, Bypass;BRANCH, db3, 0.0, ,
        Pipe:Adiabatic, db3_pipe, db3_pipe_inlet, db3_pipe_outlet,
        Bypass;BRANCH, db4, 0.0, , Pipe:Adiabatic, db4_pipe, db4_pipe_inlet,
        p_loop Demand Outlet, Bypass;BRANCHLIST, p_loop Supply Branchs,
        sb0, sb1, sb2, sb3, sb4;BRANCHLIST, p_loop Demand Branchs, db0,
        db1, db2, db3, db4;CONNECTOR:SPLITTER, p_loop_supply_splitter,
        sb0, sb1, sb2, sb3;CONNECTOR:SPLITTER, p_loop_demand_splitter,
        db0, db1, db2, db3;CONNECTOR:MIXER, p_loop_supply_mixer, sb4,
        sb1, sb2, sb3;CONNECTOR:MIXER, p_loop_demand_mixer, db4, db1,
        db2, db3;CONNECTORLIST, p_loop Supply Connectors, Connector:Splitter,
        p_loop_supply_splitter, Connector:Mixer,
        p_loop_supply_mixer;CONNECTORLIST, p_loop Demand Connectors,
        Connector:Splitter, p_loop_demand_splitter, Connector:Mixer,
        p_loop_demand_mixer;PIPE:ADIABATIC, sb0_pipe, p_loop Supply Inlet,
        sb0_pipe_outlet;PIPE:ADIABATIC, sb1_pipe, sb1_pipe_inlet,
        sb1_pipe_outlet;PIPE:ADIABATIC, sb2_pipe, sb2_pipe_inlet,
        sb2_pipe_outlet;PIPE:ADIABATIC, sb3_pipe, sb3_pipe_inlet,
        sb3_pipe_outlet;PIPE:ADIABATIC, sb4_pipe, sb4_pipe_inlet,
        p_loop Supply Outlet;PIPE:ADIABATIC, db0_pipe,
        p_loop Demand Inlet, db0_pipe_outlet;PIPE:ADIABATIC, db1_pipe,
        db1_pipe_inlet, db1_pipe_outlet;PIPE:ADIABATIC, db2_pipe,
        db2_pipe_inlet, db2_pipe_outlet;PIPE:ADIABATIC, db3_pipe,
        db3_pipe_inlet, db3_pipe_outlet;PIPE:ADIABATIC, db4_pipe,
        db4_pipe_inlet, p_loop Demand Outlet;PLANTLOOP, p_loop, Water, , ,
        , , , , 0.0, Autocalculate, p_loop Supply Inlet,
        p_loop Supply Outlet, p_loop Supply Branchs,
        p_loop Supply Connectors, p_loop Demand Inlet, p_loop Demand Outlet,
        p_loop Demand Branchs, p_loop Demand Connectors, Sequential, ,
        SingleSetpoint, None, None;"""""",
        ),  # blankidf, loopname, sloop, dloop, nidf
    )
    for blankidf, loopname, sloop, dloop, nidf in tdata:
        fhandle = StringIO("""")
        idf1 = IDF(fhandle)
        loopname = ""p_loop""
        sloop = [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""]
        dloop = [""db0"", [""db1"", ""db2"", ""db3""], ""db4""]
        hvacbuilder.makeplantloop(idf1, loopname, sloop, dloop)
        idf2 = IDF(StringIO(nidf))
        # print('=' * 15)
        # print(idf1.model)
        # print('-' * 15)
        # print(idf2.model)
        # print('=' * 15)
        assert str(idf1.model) == str(idf2.model)


",True
678,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_renamenodes,"def test_renamenodes():
    """"""py.test for renamenodes""""""
    idftxt = """"""PIPE:ADIABATIC,
         np1,
         np1_inlet,
         np1_outlet;
         !- ['np1_outlet', 'np1_np2_node'];

    BRANCH,
         sb0,
         0.0,
         ,
         Pipe:Adiabatic,
         np1,
         np1_inlet,
         np1_outlet,
         Bypass;
    """"""
    outtxt = """"""PIPE:ADIABATIC,
         np1,
         np1_inlet,
         np1_np2_node;
         !- ['np1_outlet', 'np1_np2_node'];

    BRANCH,
         sb0,
         0.0,
         ,
         Pipe:Adiabatic,
         np1,
         np1_inlet,
         np1_np2_node,
         Bypass;
    """"""
    # !- ['np1_outlet', 'np1_np2_node'];
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    pipe = idf.idfobjects[""PIPE:ADIABATIC""][0]
    pipe.Outlet_Node_Name = [
        ""np1_outlet"",
        ""np1_np2_node"",
    ]  # this is the first step of the replace
    hvacbuilder.renamenodes(idf, fieldtype=""node"")
    outidf = IDF(StringIO(outtxt))
    result = idf.idfobjects[""PIPE:ADIABATIC""][0].obj
    assert result == outidf.idfobjects[""PIPE:ADIABATIC""][0].obj


",True
679,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_replacebranch,"def test_replacebranch():
    """"""py.test for replacebranch""""""
    tdata = (
        (
            ""p_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            ""sb0"",
            [
                (""Chiller:Electric"", ""Central_Chiller"", ""Chilled_Water_""),
                (""PIPE:ADIABATIC"", ""np1"", None),
                (""PIPE:ADIABATIC"", ""np2"", None),
            ],
            ""Water"",
            [
                ""BRANCH"",
                ""sb0"",
                0.0,
                """",
                ""CHILLER:ELECTRIC"",
                ""Central_Chiller"",
                ""p_loop Supply Inlet"",
                ""Central_Chiller_np1_node"",
                """",
                ""PIPE:ADIABATIC"",
                ""np1"",
                ""Central_Chiller_np1_node"",
                ""np1_np2_node"",
                """",
                ""PIPE:ADIABATIC"",
                ""np2"",
                ""np1_np2_node"",
                ""np2_Outlet_Node_Name"",
                """",
            ],
        ),  # loopname, sloop, dloop, branchname, componenttuple, fluid, outbranch
    )
    for (loopname, sloop, dloop, branchname, componenttuple, fluid, outbranch) in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        loop = hvacbuilder.makeplantloop(idf, loopname, sloop, dloop)
        components_thisnodes = [
            (idf.newidfobject(key, Name=nm), thisnode)
            for key, nm, thisnode in componenttuple
        ]
        branch = idf.getobject(""BRANCH"", branchname)
        newbr = hvacbuilder.replacebranch(
            idf, loop, branch, components_thisnodes, fluid=fluid
        )
        assert newbr.obj == outbranch


",True
680,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_copyidfintoidf,"def test_copyidfintoidf():
    """"""py.test for copyidfintoidf""""""
    tonames = [""a"", ""b"", ""c""]
    fromnames = [""d"", ""e""]
    allnames = [""a"", ""b"", ""c"", ""d"", ""e""]
    toidf = IDF(StringIO(""""))
    toidf.newidfobject(""building"", Name=""a"")
    toidf.newidfobject(""building"", Name=""b"")
    toidf.newidfobject(""Site:Location"", Name=""c"")
    result = idf_helpers.getidfobjectlist(toidf)
    assert [res.Name for res in result] == tonames
    fromidf = IDF(StringIO(""""))
    fromidf.newidfobject(""ScheduleTypeLimits"", Name=""d"")
    fromidf.newidfobject(""ScheduleTypeLimits"", Name=""e"")
    result = idf_helpers.getidfobjectlist(fromidf)
    assert [res.Name for res in result] == fromnames
    idf_helpers.copyidfintoidf(toidf, fromidf)
    result = idf_helpers.getidfobjectlist(toidf)
    assert [res.Name for res in result] == allnames
",True
681,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getanymentions,"def test_getanymentions():
    """"""py.test for getanymentions""""""
    idf = IDF(StringIO(""""))
    mat = idf.newidfobject(""MATERIAL"", Name=""mat"")
    aconst = idf.newidfobject(""CONSTRUCTION"", Name=""const"")
    foundobjs = idf_helpers.getanymentions(idf, mat)
    assert len(foundobjs) == 1
    assert foundobjs[0] == mat


",True
682,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getidfkeyswithnodes,"def test_getidfkeyswithnodes():
    """"""py.test for getidfkeyswithnodes""""""
    nodekeys = idf_helpers.getidfkeyswithnodes()
    # print(len(nodekeys))
    assert ""PLANTLOOP"" in nodekeys
    assert ""ZONE"" not in nodekeys


# ",True
683,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getidfobjectlist,"def test_getidfobjectlist():
    """"""py.test for getidfobjectlist""""""
    names = [""a"", ""b"", ""c"", ""d"", ""e""]
    idf = IDF(StringIO(""""))
    idf.newidfobject(""building"", Name=""a"")
    idf.newidfobject(""building"", Name=""b"")
    idf.newidfobject(""Site:Location"", Name=""c"")
    idf.newidfobject(""ScheduleTypeLimits"", Name=""d"")
    idf.newidfobject(""ScheduleTypeLimits"", Name=""e"")
    result = idf_helpers.getidfobjectlist(idf)
    assert [res.Name for res in result] == names


",True
684,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getobject_use_prevfield,"def test_getobject_use_prevfield():
    """"""py.test for getobject_use_prevfield""""""
    idf = IDF(StringIO(""""))
    branch = idf.newidfobject(
        ""BRANCH"",
        Name=""CW Pump Branch"",
        Component_1_Object_Type=""Pump:VariableSpeed"",
        Component_1_Name=""CW Circ Pump"",
    )
    pump = idf.newidfobject(""PUMP:VARIABLESPEED"", Name=""CW Circ Pump"")
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Component_1_Name"")
    assert foundobject == pump
    # test for all times it should return None
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Name"")
    foundobject = None  # prev field not end with Object_Type
    foundobject = idf_helpers.getobject_use_prevfield(
        idf, branch, ""Component_11_Object_Type""
    )
    foundobject = None  # field does not end with ""Name""
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Component_3_Name"")
    foundobject = None  # bad idfobject key


",True
685,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getobjectswithnode,"def test_getobjectswithnode():
    """"""py.test for getobjectswithnode""""""
    idf = IDF(StringIO(""""))
    nodekeys = idf_helpers.getidfkeyswithnodes()
    plantloop = idf.newidfobject(
        ""PlantLoop"",
        Name=""Chilled Water Loop"",
        Plant_Side_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    branch = idf.newidfobject(
        ""Branch"",
        Name=""CW Pump Branch"",
        Component_1_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    pump = idf.newidfobject(
        ""Pump:VariableSpeed"",
        Name=""CW Circ Pump"",
        Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    zone = idf.newidfobject(""zone"")
    foundobjs = idf_helpers.getobjectswithnode(idf, nodekeys, ""CW Supply Inlet Node"")
    expected = [plantloop, branch, pump]
    expectedset = set([item.key for item in expected])
    resultset = set([item.key for item in foundobjs])
    assert resultset == expectedset
    expectedset = set([item.Name for item in expected])
    resultset = set([item.Name for item in foundobjs])
    assert resultset == expectedset


",True
686,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_idfobjectkeys,"def test_idfobjectkeys():
    """"""py.test for idfobjectkeys""""""
    expected = [
        ""LEAD INPUT"",
        ""SIMULATION DATA"",
        ""VERSION"",
        ""SIMULATIONCONTROL"",
        ""BUILDING"",
    ]
    idf = IDF(StringIO(""""))
    result = idf_helpers.idfobjectkeys(idf)
    assert result[:5] == expected


",True
687,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_name2idfobject,"def test_name2idfobject():
    """"""py.test for name2idfobject""""""
    idf = IDF(StringIO(""""))
    plantloopname = ""plantloopname""
    branchname = ""branchname""
    pumpname = ""pumpname""
    zonename = ""zonename""
    plantloop = idf.newidfobject(
        ""PlantLoop"",
        Name=plantloopname,
        Plant_Side_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    branch = idf.newidfobject(
        ""Branch"", Name=branchname, Component_1_Inlet_Node_Name=""CW Supply Inlet Node""
    )
    pump = idf.newidfobject(
        ""Pump:VariableSpeed"", Name=pumpname, Inlet_Node_Name=""CW Supply Inlet Node""
    )
    zone = idf.newidfobject(""zone"", Name=zonename)
    simulation = idf.newidfobject(""SimulationControl"")
    # - test
    names = [plantloopname, branchname, pumpname, zonename]
    idfobjs = [plantloop, branch, pump, zone]
    for name, idfobj in zip(names, idfobjs):
        result = idf_helpers.name2idfobject(idf, Name=name)
        assert result == idfobj
    # test when objkeys!=None
    objkey = ""ZoneHVAC:EquipmentConnections""
    equipconnections = idf.newidfobject(objkey, Zone_Name=zonename)
    result = idf_helpers.name2idfobject(idf, Zone_Name=zonename, objkeys=[objkey])
    assert result == equipconnections


",True
688,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,,test_updateidf,"def test_updateidf():
    """"""py.test for updateidf""""""
    iddtxt = """"""!IDD_Version 8.4.0""""""
    data = (
        (
            """"""Version,
        8.3;                     !- Version Identifier

    """""",
            {""idf.version..Version_Identifier"": ""0.1""},
            ""version"",
            ""Version_Identifier"",
            ""0.1"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""SimulationControl,
    No,                      !- Do Zone Sizing Calculation
    No,                      !- Do System Sizing Calculation
    No,                      !- Do Plant Sizing Calculation
    No,                      !- Run Simulation for Sizing Periods
    Yes;                     !- Run Simulation for Weather File Run Periods
    """""",
            {""idf.SimulationControl..Do_Zone_Sizing_Calculation"": ""Yes""},
            ""SimulationControl"",
            ""Do_Zone_Sizing_Calculation"",
            ""Yes"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Untitled,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.Untitled.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        # make a new object
        (
            """"""
    """""",
            {""idf.BUilding.Taj.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        # make a new object with no Name field
        (
            """"""
    """""",
            {""idf.GlobalGeometryRules..Starting_Vertex_Position"": ""UpperLeftCorner""},
            ""GlobalGeometryRules"",
            ""Starting_Vertex_Position"",
            ""UpperLeftCorner"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Name.name,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.Name.name.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Name.name,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.'Name.name'.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
    )
    for idftxt, dct, key, field, fieldval in data:
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        json_functions.updateidf(idf, dct)
        assert idf.idfobjects[key][0][field] == fieldval
",True
689,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getallobjlists,"def test_getallobjlists():
    """"""py.test for getallobjlists""""""
    tdata = (
        (
            ""TransformerNames"",
            [(""ElectricLoadCenter:Distribution"".upper(), ""TransformerNames"", [10])],
        ),  # refname, objlists
    )
    for refname, objlists in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.getallobjlists(idf, refname)
        assert result == objlists


",True
690,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getiddgroupdict,"def test_getiddgroupdict():
    """"""py.test for IDF.getiddgroupdict()""""""
    data = (({None: [""Lead Input"", ""Simulation Data""]},),)  # gdict,
    for (gdict,) in data:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = idf.getiddgroupdict()
        assert result[None] == gdict[None]


",True
691,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getrefnames,"def test_getrefnames():
    """"""py.test for getrefnames""""""
    tdata = (
        (
            ""ZONE"",
            [
                ""ZoneNames"",
                ""OutFaceEnvNames"",
                ""ZoneAndZoneListNames"",
                ""AirflowNetworkNodeAndZoneNames"",
            ],
        ),  # objkey, therefs
        (
            ""FluidProperties:Name"".upper(),
            [""FluidNames"", ""FluidAndGlycolNames""],
        ),  # objkey, therefs
        (""Building"".upper(), []),  # objkey, therefs
    )
    for objkey, therefs in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.getrefnames(idf, objkey)
        assert result == therefs


",True
692,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idd_index,"def test_idd_index():
    """"""py.test to see if idd_index is returned""""""
    idftxt = """"""""""""
    idf = IDF(StringIO(idftxt))
    assert idf.idd_index == {}
",True
693,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idfinmsequence,"def test_idfinmsequence():
    """"""py.test for setting of theidf in Idf_MSequence""""""
    idftxt = """"""Version, 6.0;""""""
    # theidf set in Idf_MSequence.__init__
    idf = IDF(StringIO(idftxt))
    versions = idf.idfobjects[""version"".upper()]
    assert versions.theidf == idf
    assert versions[0].theidf == idf
    # theidf set in Idf_MSequence.insert()
    material = idf.newidfobject(""material"".upper())
    assert material.theidf == idf
    # theidf set when you pop an item
    newmaterial = idf.newidfobject(""material"".upper())
    materials = idf.idfobjects[""material"".upper()]
    material = materials.pop(0)
    assert material.theidf == None
    assert materials[0].theidf == idf


",True
694,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idfstr,"def test_idfstr():
    """"""Test all outputtype options in IDF.idfstr().
    """"""
    idf = IDF()
    idf.initreadtxt(idfsnippet)
    assert idf.outputtype == ""standard""  # start with the default
    original = idf.idfstr()
    assert ""!-"" in original  # has comment
    assert ""\n"" in original  # has line break
    assert ""\n\n"" in original  # has empty line

    idf.outputtype = ""standard""
    s = idf.idfstr()
    assert ""!-"" in s  # has comment
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty line
    assert s == original  # is unchanged

    idf.outputtype = ""nocomment""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty line
    assert s != original  # is changed

    idf.outputtype = ""nocomment1""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty lines
    assert s != original  # is changed

    idf.outputtype = ""nocomment2""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" not in s  # has no empty lines
    assert s != original  # is changed

    idf.outputtype = ""compressed""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" not in s  # has no line breaks
    assert ""\n\n"" not in s  # has no empty lines
    assert s != original  # is changed


",True
695,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_initread,"def test_initread():
    """"""Test for IDF.initread() with filename in unicode and as python str.
    """"""
    # setup
    idf = IDF()
    idf.initreadtxt(idfsnippet)
    idf.saveas(""tmp.idf"")

    # test fname as unicode
    fname = ""tmp.idf""
    assert isinstance(fname, string_types)
    idf = IDF()
    idf.initread(fname)
    assert idf.getobject(""BUILDING"", ""Building"")

    # test fname as str
    fname = str(""tmp.idf"")
    assert isinstance(fname, string_types)
    idf = IDF()
    idf.initread(fname)
    assert idf.getobject(""BUILDING"", ""Building"")

    # test that a nonexistent file raises an IOError
    fname = ""notarealfilename.notreal""
    idf = IDF()
    try:
        idf.initread(fname)
        assert False  # shouldn't reach here
    except IOError:
        pass

    # teardown
    os.remove(""tmp.idf"")


",True
696,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_initreadtxt,"def test_initreadtxt():
    """"""Test for IDF.initreadtxt().
    """"""
    idftxt = """"""
        Material,
          G01a 19mm gypsum board,  !- Name
          MediumSmooth,            !- Roughness
          0.019,                   !- Thickness {m}
          0.16,                    !- Conductivity {W/m-K}
          800,                     !- Density {kg/m3}
          1090;                    !- Specific Heat {J/kg-K}

        Construction,
          Interior Wall,           !- Name
          G01a 19mm gypsum board,  !- Outside Layer
          F04 Wall air space resistance,  !- Layer 2
          G01a 19mm gypsum board;  !- Layer 3
        """"""
    idf = IDF()
    idf.initreadtxt(idftxt)
    assert idf.getobject(""MATERIAL"", ""G01a 19mm gypsum board"")


",True
697,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_new,"def test_new():
    """"""py.test for IDF.new()""""""
    idf = IDF()
    idf.new()
    # assert idf.idfobjects['building'.upper()] == Idf_MSequence()
    assert idf.idfobjects[""building"".upper()].list1 == []
    assert idf.idfobjects[""building"".upper()].list2 == []


",True
698,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_newidfobject,"def test_newidfobject():
    """"""py.test for newidfobject""""""
    # make a blank idf
    # make a function for this and then continue.
    idf = IDF()
    idf.new()
    objtype = ""material:airgap"".upper()
    obj = idf.newidfobject(objtype, Name=""Argon"")
    obj = idf.newidfobject(objtype, Name=""Krypton"")
    obj = idf.newidfobject(objtype, Name=""Xenon"")
    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Krypton""],
        [""MATERIAL:AIRGAP"", ""Xenon""],
    ]
    # remove an object
    idf.popidfobject(objtype, 1)
    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Xenon""],
    ]
    lastobject = idf.idfobjects[objtype][-1]
    idf.removeidfobject(lastobject)
    assert idf.model.dt[objtype] == [[""MATERIAL:AIRGAP"", ""Argon""]]
    # copyidfobject
    onlyobject = idf.idfobjects[objtype][0]
    idf.copyidfobject(onlyobject)

    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Argon""],
    ]
    # test some functions
    objtype = ""FENESTRATIONSURFACE:DETAILED""
    obj = idf.newidfobject(objtype, Name=""A Wall"")
    assert obj.coords == []
    assert obj.fieldvalues[1] == ""A Wall""

    # test defaultvalues=True and defaultvalues=False
    sim_deftrue = idf.newidfobject(""SimulationControl"".upper(), defaultvalues=True)
    assert sim_deftrue.Do_Zone_Sizing_Calculation == ""No""
    sim_deffalse = idf.newidfobject(""SimulationControl"".upper(), defaultvalues=False)
    assert sim_deffalse.Do_Zone_Sizing_Calculation == """"


",True
699,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_newidfobject_warning,"def test_newidfobject_warning():
    """"""Test that the warning for newidfobject created with `aname` is working.

    Fails if the warning is not issued when `aname` is used, or if the warning
    is issued when `aname` is not used.
    """"""
    # make a blank idf
    # make a function for this and then continue.
    idf = IDF()
    idf.new()
    objtype = ""material:airgap"".upper()
    # expect warnings here
    with pytest.warns(UserWarning):
        idf.newidfobject(objtype, aname=""Krypton"")
    with pytest.warns(UserWarning):
        idf.newidfobject(objtype, ""Krypton"")

    # expect no warnings here - we pass None so as not to trigger the `Failed: DID NOT WARN` message from pytest
    with pytest.warns(None) as captured_warnings:
        idf.newidfobject(objtype, Name=""Krypton"")
    assert len(captured_warnings) == 0


",True
700,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_refname2key,"def test_refname2key():
    """"""py.test for refname2key""""""
    tdata = (
        (
            ""TransformerNames"",
            [""ElectricLoadCenter:Distribution"".upper()],
        ),  # refname, key
        (
            ""AllCurves"",
            [
                ""PUMP:VARIABLESPEED"",
                ""PUMP:CONSTANTSPEED"",
                ""BOILER:HOTWATER"",
                ""ENERGYMANAGEMENTSYSTEM:CURVEORTABLEINDEXVARIABLE"",
            ],
        ),  # refname, key
    )
    for refname, key in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.refname2key(idf, refname)
        assert result == key


",True
701,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_rename,"def test_rename():
    """"""py.test for rename""""""
    idftxt = """"""Material,
      G01a 19mm gypsum board,  !- Name
      MediumSmooth,            !- Roughness
      0.019,                   !- Thickness {m}
      0.16,                    !- Conductivity {W/m-K}
      800,                     !- Density {kg/m3}
      1090;                    !- Specific Heat {J/kg-K}

      Construction,
        Interior Wall,           !- Name
        G01a 19mm gypsum board,  !- Outside Layer
        F04 Wall air space resistance,  !- Layer 2
        G01a 19mm gypsum board;  !- Layer 3

      Construction,
        Other Wall,           !- Name
        G01a 19mm gypsum board,  !- Outside Layer
        G01a 19mm gypsum board,  !- Layer 2
        G01a 19mm gypsum board;  !- Layer 3

    """"""
    ridftxt = """"""Material,
      peanut butter,  !- Name
      MediumSmooth,            !- Roughness
      0.019,                   !- Thickness {m}
      0.16,                    !- Conductivity {W/m-K}
      800,                     !- Density {kg/m3}
      1090;                    !- Specific Heat {J/kg-K}

      Construction,
        Interior Wall,           !- Name
        peanut butter,  !- Outside Layer
        F04 Wall air space resistance,  !- Layer 2
        peanut butter;  !- Layer 3

      Construction,
        Other Wall,           !- Name
        peanut butter,  !- Outside Layer
        peanut butter,  !- Layer 2
        peanut butter;  !- Layer 3

    """"""
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    result = modeleditor.rename(
        idf, ""Material"".upper(), ""G01a 19mm gypsum board"", ""peanut butter""
    )
    assert result.Name == ""peanut butter""
    assert idf.idfobjects[""CONSTRUCTION""][0].Outside_Layer == ""peanut butter""
    assert idf.idfobjects[""CONSTRUCTION""][0].Layer_3 == ""peanut butter""


",True
702,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_save,"def test_save():
    """"""
    Test the IDF.save() function using a filehandle to avoid external effects.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    # test save with just a filehandle
    file_handle = StringIO()
    idf.save(file_handle)
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    # minimal test that TestMaterial is being written to the file handle
    assert expected in result


",True
703,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_save_with_lineendings_and_encodings,"def test_save_with_lineendings_and_encodings():
    """"""
    Test the IDF.save() function with combinations of encodings and line
    endings.

    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    lineendings = (""windows"", ""unix"", ""default"")
    encodings = (""ascii"", ""latin-1"", ""UTF-8"")

    for le, enc in product(lineendings, encodings):
        file_handle = StringIO()
        idf.save(file_handle, encoding=enc, lineendings=le)
        file_handle.seek(0)
        result = file_handle.read().encode(enc)
        if le == ""windows"":
            assert b""\r\n"" in result
        elif le == ""unix"":
            assert b""\r\n"" not in result
        elif le == ""default"":
            assert os.linesep.encode(enc) in result


",True
704,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_saveas,"def test_saveas():
    """"""Test the IDF.saveas() function.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    idf.idfname = ""test.idf""

    try:
        idf.saveas()  # this should raise an error as no filename is passed
        assert False
    except TypeError:
        pass

    file_handle = StringIO()
    idf.saveas(file_handle)  # save with a filehandle
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    assert expected in result

    # test the idfname attribute has been changed
    assert idf.idfname != ""test.idf""


",True
705,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_savecopy,"def test_savecopy():
    """"""Test the IDF.savecopy() function.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    idf.idfname = ""test.idf""

    try:
        idf.savecopy()  # this should raise an error as no filename is passed
        assert False
    except TypeError:
        pass

    file_handle = StringIO()
    idf.savecopy(file_handle)  # save a copy with a different filename
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    assert expected in result

    # test the idfname attribute has not been changed
    assert idf.idfname == ""test.idf""


",True
706,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_zonearea_zonevolume,"def test_zonearea_zonevolume():
    """"""py.test for zonearea and zonevolume""""""
    idftxt = """"""Zone, 473222, 0.0, 0.0, 0.0, 0.0, , 1;
        BuildingSurface:Detailed, F7289B, Floor, Exterior Floor, 473222,
        Ground, ,
        NoSun, NoWind, , 4, 2.23, 2.56, 0.0, 2.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        2.56, 0.0;  BuildingSurface:Detailed, F3659B, Wall, Exterior Wall,
        473222, Outdoors, , SunExposed, WindExposed, , 4, 2.23, 2.56, 1.49,
        2.23, 2.56, 0.0, 0.0, 2.56, 0.0, 0.0, 2.56, 1.49;
        BuildingSurface:Detailed, 46C6C9, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23, 0.0, 1.49, 2.23,
        0.0, 0.0, 2.23, 1.02548139464, 0.0, 2.23, 1.02548139464, 1.49;
        BuildingSurface:Detailed, 4287DD, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 0.0, 2.56, 1.49, 0.0,
        2.56, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.49;
        BuildingSurface:Detailed, 570C2E, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 0.0, 0.0, 1.49, 0.0, 0.0,
        0.0, 2.23, 0.0, 0.0, 2.23, 0.0, 1.49;  BuildingSurface:Detailed,
        BAEA99, Roof, Exterior Roof, 473222, Outdoors, , SunExposed,
        WindExposed, , 4, 0.0, 2.56, 1.49, 0.0, 0.0, 1.49, 2.23, 0.0, 1.49,
        2.23, 2.56, 1.49;  BuildingSurface:Detailed, C879FE, Floor,
        Exterior Floor, 473222, Ground, , NoSun, NoWind, , 4, 3.22,
        2.52548139464, 0.0, 3.22, 1.02548139464, 0.0, 2.23,
        1.02548139464, 0.0, 2.23, 2.52548139464, 0.0;
        BuildingSurface:Detailed, 25B601, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23,
        1.02548139464, 1.49, 2.23, 1.02548139464, 0.0, 2.23, 2.52548139464,
        0.0, 2.23, 2.52548139464, 1.49;  BuildingSurface:Detailed, F5EADC,
        Wall, Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, ,
        4, 2.23, 1.02548139464, 1.49, 2.23, 1.02548139464, 0.0, 3.22,
        1.02548139464, 0.0, 3.22, 1.02548139464, 1.49;
        BuildingSurface:Detailed, D0AABE, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 3.22, 1.02548139464,
        1.49, 3.22, 1.02548139464, 0.0, 3.22, 2.52548139464, 0.0, 3.22,
        2.52548139464, 1.49;  BuildingSurface:Detailed, B0EA02, Wall,
        Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, ,
        4, 3.22, 2.52548139464, 1.49, 3.22, 2.52548139464, 0.0, 2.23,
        2.52548139464, 0.0, 2.23, 2.52548139464, 1.49;
        BuildingSurface:Detailed, E6DF3B, Roof, Exterior Roof, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23, 2.52548139464, 1.49,
        2.23, 1.02548139464, 1.49, 3.22, 1.02548139464, 1.49, 3.22,
        2.52548139464, 1.49;  BuildingSurface:Detailed, 4F8681, Wall,
        Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, , 4,
        2.23, 2.52548139464, 1.49, 2.23, 2.52548139464, 0.0, 2.23, 2.56,
        0.0, 2.23, 2.56, 1.49;  """"""
    idf = IDF(StringIO(idftxt))
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea_floor(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zone_floor2roofheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zone_floor2roofheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)
    # remove floor
    zone = idf.getobject(""ZONE"", ""473222"")
    surfs = idf.idfobjects[""BuildingSurface:Detailed"".upper()]
    zone_surfs = [s for s in surfs if s.Zone_Name == zone.Name]
    floors = [s for s in zone_surfs if s.Surface_Type.upper() == ""FLOOR""]
    for floor in floors:
        idf.removeidfobject(floor)
    result = modeleditor.zonearea_floor(idf, ""473222"")
    assert almostequal(result, 0)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)
    # reload idf and remove roof/ceiling
    idf = IDF(StringIO(idftxt))
    zone = idf.getobject(""ZONE"", ""473222"")
    surfs = idf.idfobjects[""BuildingSurface:Detailed"".upper()]
    zone_surfs = [s for s in surfs if s.Zone_Name == zone.Name]
    roofs = [s for s in zone_surfs if s.Surface_Type.upper() == ""ROOF""]
    ceilings = [s for s in zone_surfs if s.Surface_Type.upper() == ""CEILING""]
    topsurfaces = roofs + ceilings
    for surf in topsurfaces:
        idf.removeidfobject(surf)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 0)
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)


",True
707,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,,test_idfreadtest,"def test_idfreadtest():
    """"""py.test for idfreadtest""""""
    data = (
        (
            """"""!IDD_Version 7.2.0.006
Version,
      \\unique-object
      \\format singleLine
  A1 ; \\field Version Identifier

SimulationControl,
      \\unique-object
  A1, \\field Do Zone Sizing Calculation
  A2, \\field Do System Sizing Calculation
  A3, \\field Do Plant Sizing Calculation
  A4, \\field Run Simulation for Sizing Periods
  A5; \\field Run Simulation for Weather File Run Periods

Building,
       \\unique-object
  A1 , \\field Name
  N1 , \\field North Axis
  A2 , \\field Terrain
  N2 , \\field Loads Convergence Tolerance Value
  N3 , \\field Temperature Convergence Tolerance Value
  A3 , \\field Solar Distribution
  N4 , \\field Maximum Number of Warmup Days
  N5 ; \\field Minimum Number of Warmup Days

Site:Location,
       \\unique-object
  A1 , \\field Name
  N1 , \\field Latitude
  N2 , \\field Longitude
  N3 , \\field Time Zone
  N4 ; \\field Elevation

"""""",
            """"""
VERSION,
    7.3;                      !- Version Identifier

SIMULATIONCONTROL,
    Yes,                      !- Do Zone Sizing Calculation
    Yes,                      !- Do System Sizing Calculation
    Yes,                      !- Do Plant Sizing Calculation
    No,                       !- Run Simulation for Sizing Periods
    Yes;                      !- Run Simulation for Weather File Run Periods

BUILDING,
    Empire State Building,    !- Name
    30.0,                     !- North Axis
    City,                     !- Terrain
    0.04,                     !- Loads Convergence Tolerance Value
    0.4,                      !- Temperature Convergence Tolerance Value
    FullExterior,             !- Solar Distribution
    25,                       !- Maximum Number of Warmup Days
    6;                        !- Minimum Number of Warmup Days

SITE:LOCATION,
    CHICAGO_IL_USA TMY2-94846,    !- Name
    41.78,                    !- Latitude
    -87.75,                   !- Longitude
    -6.0,                     !- Time Zone
    190.0;                    !- Elevation
"""""",
        ),  # iddtxt, idftxt
    )
    for iddtxt, idftxt in data:
        iddhandle = StringIO(iddtxt)
        idfhandle1 = StringIO(idftxt)
        idfhandle2 = StringIO(idftxt)
        result = simpleread.idfreadtest(iddhandle, idfhandle1, idfhandle2)
        assert result == True
",True
708,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_1_layer_construction,"def test_heatcapacity_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001
        assert c.heatcapacity == expected
        assert c.heatcapacity == 120

    ",True
709,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_2_layer_construction,"def test_heatcapacity_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert c.heatcapacity == expected
        assert c.heatcapacity == 240

    ",True
710,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_airgap_construction,"def test_heatcapacity_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert almostequal(c.heatcapacity, expected, places=2)
        assert almostequal(c.heatcapacity, 240, places=2)

    ",True
711,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_infraredtransparent_construction,"def test_heatcapacity_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert almostequal(c.heatcapacity, expected, places=2)
        assert almostequal(c.heatcapacity, 240, places=2)

    ",True
712,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_material,"def test_heatcapacity_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001
        assert m.heatcapacity == expected
        assert m.heatcapacity == 120
",True
713,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_nomass_construction,"def test_heatcapacity_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert almostequal(c.heatcapacity, expected, places=2)
            assert almostequal(c.heatcapacity, 240, places=2)
            assert issubclass(w[-1].category, UserWarning)

    ",True
714,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_roofvegetation_construction,"def test_heatcapacity_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = (
            m.Thickness * m.Specific_Heat_of_Dry_Soil * m.Density_of_Dry_Soil * 0.001
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            # check that a UserWarning is raised
            assert almostequal(c.heatcapacity, expected, places=2)
            assert almostequal(c.heatcapacity, 120, places=2)
            assert issubclass(w[-1].category, UserWarning)

    ",True
715,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_1_layer_construction,"def test_rvalue_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = INSIDE_FILM_R + m.Thickness / m.Conductivity + OUTSIDE_FILM_R
        assert c.rvalue == expected
        assert c.rvalue == 0.35

    ",True
716,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_2_layer_construction,"def test_rvalue_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert c.rvalue == expected
        assert c.rvalue == 0.55

    ",True
717,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_airgap_construction,"def test_rvalue_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        a = self.idf.getobject(""MATERIAL:AIRGAP"", ""AirGap"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + a.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.65, places=2)

    ",True
718,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_fails,"def test_rvalue_fails(self):
        self.idf.initreadtxt(expected_failure)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        try:
            c.rvalue
            assert False
        except AttributeError as e:
            assert str(e) == ""Skyhooks material not found in IDF""

    ",True
719,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_infraredtransparent_construction,"def test_rvalue_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.55, places=2)

    ",True
720,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_material,"def test_rvalue_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness / m.Conductivity
        assert m.rvalue == expected
        assert m.rvalue == 0.2

    ",True
721,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_nomass_construction,"def test_rvalue_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        n = self.idf.getobject(""MATERIAL:NOMASS"", ""NoMass"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + n.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.65, places=2)

    ",True
722,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_roofvegetation_construction,"def test_rvalue_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = (
            INSIDE_FILM_R + m.Thickness / m.Conductivity_of_Dry_Soil + OUTSIDE_FILM_R
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert c.rvalue == expected
            assert c.rvalue == 0.35
            # check that a UserWarning is raised
            assert issubclass(w[-1].category, UserWarning)

    ",True
723,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_1_layer_construction,"def test_ufactor_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (INSIDE_FILM_R + m.Thickness / m.Conductivity + OUTSIDE_FILM_R)
        assert c.ufactor == expected
        assert c.ufactor == 1 / 0.35

    ",True
724,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_2_layer_construction,"def test_ufactor_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert c.ufactor == expected
        assert c.ufactor == 1 / 0.55

    ",True
725,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_airgap_construction,"def test_ufactor_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        a = self.idf.getobject(""MATERIAL:AIRGAP"", ""AirGap"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + a.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.65, places=2)

    ",True
726,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_infraredtransparent_construction,"def test_ufactor_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.55, places=2)

    ",True
727,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_material,"def test_ufactor_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (m.Thickness / m.Conductivity)
        assert m.ufactor == expected
        assert m.ufactor == 1 / 0.2

    ",True
728,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_nomass_construction,"def test_ufactor_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        n = self.idf.getobject(""MATERIAL:NOMASS"", ""NoMass"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + n.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.65, places=2)

    ",True
729,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_roofvegetation_construction,"def test_ufactor_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = 1 / (
            INSIDE_FILM_R + m.Thickness / m.Conductivity_of_Dry_Soil + OUTSIDE_FILM_R
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert c.ufactor == expected
            assert c.ufactor == 1 / 0.35
            # check that a UserWarning is raised
            assert issubclass(w[-1].category, UserWarning)

    ",True
1249,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,CurveTests,test_curve,"def test_curve(self):
        curve = Curve.parse(
            '(fp_curve (pts (xy 0 0) (xy 1 1) (xy 2 2) (xy 3 3)))')
        assert curve.start == (0, 0)
        assert curve.bezier1 == (1, 1)
        assert curve.bezier2 == (2, 2)
        assert curve.end == (3, 3)


",True
1250,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill,"def test_drill(self):
        drill = Drill.parse('(drill 0.8)')
        assert drill.size == 0.8
        assert Drill.parse(drill.to_string()) == drill

    ",True
1251,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill_offset,"def test_drill_offset(self):
        drill = Drill.parse('(drill 0.8 (offset 0.1 0.2))')
        assert drill.size == 0.8 and drill.offset == [0.1, 0.2]
        assert Drill.parse(drill.to_string()) == drill


",True
1252,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill_oval,"def test_drill_oval(self):
        drill = Drill.parse('(drill oval 0.6 0.8)')
        assert drill.size == [0.6, 0.8]
        assert Drill.parse(drill.to_string()) == drill

    ",True
1253,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,LineTests,test_line,"def test_line(self):
        line = Line.parse('(fp_line (start 0 0) (end 1 1) (layer layer))')
        assert line.start == [0.0, 0.0]
        assert line.end == [1.0, 1.0]
        assert line.layer == 'layer'
        assert Line.parse(line.to_string()) == line


",True
1254,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,ModelTests,test_model,"def test_model(self):
        model_string = (
            '(model path'
            '    (at (xyz 0 0 0))'
            '    (scale (xyz 0 0 0))'
            '    (rotate (xyz 0 0 0)))')
        model = Model.parse(model_string)
        assert model.at == (0, 0, 0)
        assert model.scale == (0, 0, 0)
        assert model.rotate == (0, 0, 0)
        assert Model.parse(model.to_string()) == model


",True
1255,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,ModuleTests,test_module,"def test_module(self):
        module_string = '(module name (layer F.Cu) %s)'
        module = Module.parse(module_string % '')
        assert module.name == 'name'
        assert module.layer == 'F.Cu'
        assert Module.parse(module.to_string()) == module

        pads = ''
        for i in range(2):
            pads += Pad(str(i + 1), drill=Drill(0.8)).to_string()

        module = Module.parse(module_string % pads)
        assert module.pads[0].name == '1'
        assert module.pads[0].drill.size == 0.8
        assert module.pads[1].name == '2'
        assert module.pads[1].drill.size == 0.8
        assert Module.parse(module.to_string()) == module


",True
1256,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,NetTests,test_net_auto_numbering,"def test_net_auto_numbering(self):
        n1, n2, n3 = Net(), Net(), Net()
        assert n1.code == 1
        assert n2.code == 2
        assert n3.code == 3
",True
1257,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad,"def test_pad(self):
        pad = Pad.parse(
            '(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) (layers F.Cu))')
        assert pad.name == '1'
        assert pad.type == 'smd'
        assert pad.shape == 'rect'
        assert pad.at == [0.1, 0.1]
        assert pad.size == [0.2, 0.2]
        assert pad.layers == ['F.Cu']
        assert Pad.parse(pad.to_string()) == pad

    ",True
1258,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad_with_drill,"def test_pad_with_drill(self):
        pad = Pad.parse('(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) '
                        '(layers F.Cu) (drill 0.8))')
        assert pad.drill.size == 0.8
        assert Pad.parse(pad.to_string()) == pad

    ",True
1259,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad_with_multiple_layers,"def test_pad_with_multiple_layers(self):
        pad = Pad.parse('(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) '
                        '(layers F.Cu B.Cu))')
        assert pad.layers == ['F.Cu', 'B.Cu']
        assert Pad.parse(pad.to_string()) == pad


",True
1260,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PolygonTests,test_polygon,"def test_polygon(self):
        poly = Polygon.parse('(fp_poly (pts (xy 0 0) (xy 1 0)) (width 0.01))')
        assert poly.pts == [(0, 0), (1, 0)]
        assert poly.width == 0.01
        assert Polygon.parse(poly.to_string()) == poly


",True
1261,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text,"def test_text(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer F.SilkS))')
        assert text.type == 'user'
        assert text.text == 'text'
        assert text.at == [0.0, 0.0]
        assert text.layer == 'F.SilkS'
        assert Text.parse(text.to_string()) == text

    ",True
1262,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_hide,"def test_text_with_hide(self):
        text = Text.parse(
            '(fp_text user text (at 0.0 0.0) (layer F.SilkS) hide)')
        assert text.hide == True
        assert Text.parse(text.to_string()) == text

    ",True
1263,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_justify,"def test_text_with_justify(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer layer) '
                          '(effects (justify mirror)))')
        assert text.justify == 'mirror'
        assert Text.parse(text.to_string()) == text


",True
1264,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_rotation,"def test_text_with_rotation(self):
        text = Text.parse(
            '(fp_text user text (at 0.0 0.0 0.0) (layer F.SilkS))')
        assert text.at == [0.0, 0.0, 0.0]
        assert text.hide == False
        assert Text.parse(text.to_string()) == text

    ",True
1265,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_thickness,"def test_text_with_thickness(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer F.SilkS) '
                          '(effects (font (size 0.1 0.1) (thickness 0.2))))')
        assert text.size == [0.1, 0.1]
        assert text.thickness == 0.2
        assert Text.parse(text.to_string()) == text

    ",True
1266,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_parse,"def test_parse(self):
        nc_string = ""(net_",True
1267,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_with_multiple_nets,"def test_with_multiple_nets(self):
        nc = NetClass('default')
        nc.nets += ['GND', 'VO']
        nc_str = nc.to_string()
        assert NetClass.parse(nc.to_string()) == nc


",True
1268,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_with_net,"def test_with_net(self):
        nc = NetClass('default')
        nc.nets.append('GND')
        assert NetClass.parse(nc.to_string()) == nc

    ",True
1269,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_without_net,"def test_without_net(self):
        nc = NetClass('default')
        assert NetClass.parse(nc.to_string()) == nc

    ",True
1270,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_comment,"def test_comment(self):
        pcb = Pcb(comment1='hello world', comment2='bye world')
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1271,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_layers,"def test_layers(self):
        pcb = Pcb()
        pcb.layers.append(Layer('B.Cu'))
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.layers.append(Layer('F.Cu'))
        assert Pcb.parse(pcb.to_string()) == pcb
",True
1272,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_minimal_pcb,"def test_minimal_pcb(self):
        pcb_string = open('tests/minimal_pcb.kicad_pcb', 'r').read()
        pcb = Pcb.parse(pcb_string)
        assert pcb.version == 123
        assert pcb.host == ['pcbnew', 'version']
        assert len(pcb.nets) == 4
        assert len(pcb.modules) == 2
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1273,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_num_nets,"def test_num_nets(self):
        pcb = Pcb(num_nets=5)
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.nets.append(Net())
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1274,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_page,"def test_page(self):
        pcb = Pcb()
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.page_type = 'A4'
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.page_type = [200, 200]
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1275,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_single_module,"def test_single_module(self):
        pcb = Pcb()
        pcb.modules.append(Module(name='R'))
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1276,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,ZoneTests,test_parse,"def test_parse(self):
        zone_string = '(zone (polygon (pts (xy 0 0) (xy 1 1))))'
        zone = Zone.parse(zone_string)
        assert zone.polygon[0] == (0, 0)
        assert zone.polygon[1] == (1, 1)
        assert Zone.parse(zone.to_string()) == zone


",True
1379,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_cpu_only,"def test_have_cpu_only(self):
        assert 1 == self.count_checks(filters.have_cpu_only())

    ",True
1380,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_gpu_only,"def test_have_gpu_only(self):
        assert 2 == self.count_checks(filters.have_gpu_only())

    ",True
1381,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_name,"def test_have_name(self):
        assert 1 == self.count_checks(filters.have_name('check1'))
        assert 3 == self.count_checks(filters.have_name('check'))
        assert 2 == self.count_checks(filters.have_name(r'\S*1|\S*3'))
        assert 0 == self.count_checks(filters.have_name('Check'))
        assert 3 == self.count_checks(filters.have_name('(?i)Check'))
        assert 2 == self.count_checks(filters.have_name('(?i)check1|CHECK2'))

    ",True
1382,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_not_name,"def test_have_not_name(self):
        assert 2 == self.count_checks(filters.have_not_name('check1'))
        assert 1 == self.count_checks(filters.have_not_name('check1|check3'))
        assert 0 == self.count_checks(filters.have_not_name(
            'check1|check2|check3'))
        assert 3 == self.count_checks(filters.have_not_name('Check1'))
        assert 2 == self.count_checks(filters.have_not_name('(?i)Check1'))

    ",True
1383,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_prgenv,"def test_have_prgenv(self):
        assert 1 == self.count_checks(filters.have_prgenv('env1|env2'))
        assert 2 == self.count_checks(filters.have_prgenv('env3'))
        assert 1 == self.count_checks(filters.have_prgenv('env4'))
        assert 3 == self.count_checks(filters.have_prgenv('env1|env3'))

    @rt.switch_runtime(fixtures.TEST_CONFIG_FILE, 'testsys')
    ",True
1384,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_tags,"def test_have_tags(self):
        assert 2 == self.count_checks(filters.have_tag('a|c'))
        assert 0 == self.count_checks(filters.have_tag('p|q'))
        assert 2 == self.count_checks(filters.have_tag('z'))

    ",True
1385,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_invalid_regex,"def test_invalid_regex(self):
        # We need to explicitly call `evaluate` to make sure the exception
        # is triggered in all cases
        with pytest.raises(ReframeError):
            self.count_checks(filters.have_name('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_not_name('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_tag('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_prgenv('*foo')).evaluate()
",True
1386,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_partition,"def test_partition(self):
        p = fixtures.partition_by_name('gpu')
        assert 2 == self.count_checks(filters.have_partition([p]))
        p = fixtures.partition_by_name('login')
        assert 0 == self.count_checks(filters.have_partition([p]))

    ",True
1387,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_failure,"def test_check_failure(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'BadSetupCheck']
    )
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1388,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_kbd_interrupt,"def test_check_kbd_interrupt(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=[
            'unittests/resources/checks_unlisted/kbd_interrupt.py'
        ],
        more_options=['-t', 'KeyboardInterruptCheck'],
        local=False,
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1389,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_sanity_failure,"def test_check_sanity_failure(run_reframe, tmp_path):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck']
    )
    assert 'FAILED' in stdout

    # This is a normal failure, it should not raise any exception
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
    assert os.path.exists(
        tmp_path / 'stage' / 'generic' / 'default' /
        'builtin-gcc' / 'SanityFailureCheck'
    )


",False
1390,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_setup_failure,"def test_check_setup_failure(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'BadSetupCheckEarly'],
        local=False,

    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1391,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_success,"def test_check_success(run_reframe, tmp_path, logfile):
    returncode, stdout, _ = run_reframe(more_options=['--save-log-files'])
    assert 'PASSED' in stdout
    assert 'FAILED' not in stdout
    assert returncode == 0
    assert os.path.exists(tmp_path / 'output' / logfile)
    assert os.path.exists(tmp_path / 'report.json')


",True
1392,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_checkpath_recursion,"def test_checkpath_recursion(run_reframe):
    _, stdout, _ = run_reframe(action='list', checkpath=[])
    num_checks_default = re.search(r'Found (\d+) check', stdout).group(1)

    _, stdout, _ = run_reframe(action='list',
                               checkpath=['checks/'],
                               more_options=['-R'])
    num_checks_in_checkdir = re.search(r'Found (\d+) check', stdout).group(1)
    assert num_checks_in_checkdir == num_checks_default

    _, stdout, _ = run_reframe(action='list',
                               checkpath=['checks/'],
                               more_options=[])
    num_checks_in_checkdir = re.search(r'Found (\d+) check', stdout).group(1)
    assert num_checks_in_checkdir == '0'


",False
1393,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_checkpath_symlink,"def test_checkpath_symlink(run_reframe, tmp_path):
    # FIXME: This should move to test_loader.py
    checks_symlink = tmp_path / 'checks_symlink'
    os.symlink(os.path.abspath('unittests/resources/checks'),
               checks_symlink)

    returncode, stdout, _ = run_reframe(
        action='list',
        more_options=['-R'],
        checkpath=['unittests/resources/checks', str(checks_symlink)]
    )
    num_checks_default = re.search(
        r'Found (\d+) check', stdout, re.MULTILINE).group(1)
    num_checks_in_checkdir = re.search(
        r'Found (\d+) check', stdout, re.MULTILINE).group(1)
    assert num_checks_in_checkdir == num_checks_default


",False
1394,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_dont_restage,"def test_dont_restage(run_reframe, tmp_path):
    run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck']
    )

    # Place a random file in the test's stage directory and rerun with
    # `--dont-restage` and `--max-retries`
    stagedir = (tmp_path / 'stage' / 'generic' / 'default' /
                'builtin-gcc' / 'SanityFailureCheck')
    (stagedir / 'foobar').touch()
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck',
                      '--dont-restage', '--max-retries=1']
    )
    assert os.path.exists(stagedir / 'foobar')
    assert not os.path.exists(f'{stagedir}_retry1')

    # And some standard assertions
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0


",False
1395,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_execution_modes,"def test_execution_modes(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=[],
        environs=[],
        local=False,
        mode='unittest'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' not in stdout
    assert 'PASSED' in stdout
    assert 'Ran 1 test case' in stdout


",False
1396,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_failure_stats,"def test_failure_stats(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck', '--failure-stats']
    )
    assert r'FAILURE STATISTICS' in stdout
    assert r'sanity        1     [SanityFailureCheck' in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
",False
1397,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_check_with_empty_prgenvs,"def test_list_check_with_empty_prgenvs(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=['foo'],
        more_options=['-n', 'NoPrgEnvCheck']
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1398,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_empty_prgenvs_check_and_options,"def test_list_empty_prgenvs_check_and_options(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=[],
        more_options=['-n', 'NoPrgEnvCheck'],
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1399,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_empty_prgenvs_in_check_and_options,"def test_list_empty_prgenvs_in_check_and_options(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=[],
        more_options=['-n', 'NoPrgEnvCheck']
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1400,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_no_ignore_check_conflicts,"def test_no_ignore_check_conflicts(run_reframe):
    returncode, *_ = run_reframe(
        checkpath=['unittests/resources/checks'],
        more_options=['-R'],
        ignore_check_conflicts=False,
        action='list'
    )
    assert returncode != 0


",False
1401,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_performance_check_failure,"def test_performance_check_failure(run_reframe, tmp_path, perflogdir):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'PerformanceFailureCheck']
    )
    assert 'FAILED' in stdout

    # This is a normal failure, it should not raise any exception
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
    assert os.path.exists(
        tmp_path / 'stage' / 'generic' / 'default' /
        'builtin-gcc' / 'PerformanceFailureCheck'
    )
    assert os.path.exists(perflogdir / 'generic' /
                          'default' / 'PerformanceFailureCheck.log')


",True
1402,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_performance_report,"def test_performance_report(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'PerformanceFailureCheck', '--performance-report']
    )
    assert r'PERFORMANCE REPORT' in stdout
    assert r'perf: 10 Gflop/s' in stdout


",False
1403,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_report_file_with_sessionid,"def test_report_file_with_sessionid(run_reframe, tmp_path):
    returncode, stdout, _ = run_reframe(
        more_options=[
            f'--save-log-files',
            f'--report-file={tmp_path / ""rfm-report-{sessionid}.json""}'
        ]
    )
    assert returncode == 0
    assert os.path.exists(tmp_path / 'rfm-report-0.json')


",False
1404,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_same_output_stage_dir,"def test_same_output_stage_dir(run_reframe, tmp_path):
    output_dir = str(tmp_path / 'foo')
    returncode, *_ = run_reframe(
        more_options=['-o', output_dir, '-s', output_dir]
    )
    assert returncode == 1

    # Retry with --keep-stage-files
    returncode, *_ = run_reframe(
        more_options=['-o', output_dir, '-s', output_dir, '--keep-stage-files']
    )
    assert returncode == 0
    assert os.path.exists(output_dir)


",False
1405,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_sanity_of_checks,"def test_sanity_of_checks(run_reframe, tmp_path, logfile):
    # This test will effectively load all the tests in the checks path and
    # will force a syntactic and runtime check at least for the constructor
    # of the checks
    returncode, *_ = run_reframe(
        action='list',
        more_options=['--save-log-files'],
        checkpath=[]
    )
    assert returncode == 0
    os.path.exists(tmp_path / 'output' / logfile)


",False
1406,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_all,"def test_show_config_all(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config'],
        system='testsys'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1407,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_param,"def test_show_config_param(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config=systems'],
        system='testsys'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1408,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_unknown_param,"def test_show_config_unknown_param(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config=foo'],
        system='testsys'
    )
    assert 'no such configuration parameter found' in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1409,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_skip_prgenv_check_option,"def test_skip_prgenv_check_option(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['--skip-prgenv-check', '-t', 'NoPrgEnvCheck']
    )
    assert 'PASSED' in stdout
    assert returncode == 0


",False
1410,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_skip_system_check_option,"def test_skip_system_check_option(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['--skip-system-check', '-t', 'NoSystemCheck']
    )
    assert 'PASSED' in stdout
    assert returncode == 0


",True
1411,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_timestamp_option,"def test_timestamp_option(run_reframe):
    from datetime import datetime

    timefmt = datetime.now().strftime('xxx_%F')
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks'],
        ignore_check_conflicts=False,
        action='list',
        more_options=['-R', '--timestamp=xxx_%F']
    )
    assert returncode != 0
    assert timefmt in stdout


",False
1412,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_verbosity,"def test_verbosity(run_reframe):
    returncode, stdout, stderr = run_reframe(
        more_options=['-vvvvv'],
        system='testsys',
        action='list'
    )
    assert stdout != ''
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1413,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_verbosity_with_check,"def test_verbosity_with_check(run_reframe):
    returncode, stdout, stderr = run_reframe(
        more_options=['-vvvvv'],
        system='testsys',
        checkpath=['unittests/resources/checks/hellocheck.py']
    )
    assert '' != stdout
    assert '--- Logging error ---' not in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 0 == returncode


",False
1414,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_source_env,"def test_build_deps_unknown_source_env(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    test1 = find_check('Test1_default', checks)
    test1.depends_on('Test0', rfm.DEPEND_EXACT, {'eX': ['e0']})

    # Unknown source is ignored, because it might simply be that the test
    # is not executed for eX
    deps = dependency.build_deps(executors.generate_testcases(checks))
    assert num_deps(deps, 'Test1_default') == 4


",False
1415,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_target_env,"def test_build_deps_unknown_target_env(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    test1 = find_check('Test1_default', checks)
    test1.depends_on('Test0', rfm.DEPEND_EXACT, {'e0': ['eX']})
    with pytest.raises(DependencyError):
        dependency.build_deps(executors.generate_testcases(checks))


",False
1416,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_test,"def test_build_deps_unknown_test(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    for depkind in ('default', 'fully', 'by_env', 'exact'):
        test1 = find_check('Test1_' + depkind, checks)
        if depkind == 'default':
            test1.depends_on('TestX')
        elif depkind == 'exact':
            test1.depends_on('TestX', rfm.DEPEND_EXACT, {'e0': ['e0']})
        elif depkind == 'fully':
            test1.depends_on('TestX', rfm.DEPEND_FULLY)
        elif depkind == 'by_env':
            test1.depends_on('TestX', rfm.DEPEND_BY_ENV)

        with pytest.raises(DependencyError):
            dependency.build_deps(executors.generate_testcases(checks))


",True
1417,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_cyclic_deps,"def test_cyclic_deps(make_test, exec_ctx):
    #
    #       t0       +-->t5<--+
    #       ^        |        |
    #       |        |        |
    #   +-->t1<--+   t6       t7
    #   |   |    |            ^
    #   t2  |    t3           |
    #   ^   |    ^            |
    #   |   v    |            t8
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t5 = make_test('t5')
    t6 = make_test('t6')
    t7 = make_test('t7')
    t8 = make_test('t8')
    t1.depends_on('t0')
    t1.depends_on('t4')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t4.depends_on('t2')
    t4.depends_on('t3')
    t6.depends_on('t5')
    t7.depends_on('t5')
    t8.depends_on('t7')
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4,
                                      t5, t6, t7, t8])
    )

    with pytest.raises(DependencyError) as exc_info:
        dependency.validate_deps(deps)

    assert ('t4->t2->t1->t4' in str(exc_info.value) or
            't2->t1->t4->t2' in str(exc_info.value) or
            't1->t4->t2->t1' in str(exc_info.value) or
            't1->t4->t3->t1' in str(exc_info.value) or
            't4->t3->t1->t4' in str(exc_info.value) or
            't3->t1->t4->t3' in str(exc_info.value))


",False
1418,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_cyclic_deps_by_env,"def test_cyclic_deps_by_env(make_test, exec_ctx):
    t0 = make_test('t0')
    t1 = make_test('t1')
    t1.depends_on('t0', rfm.DEPEND_EXACT, {'e0': ['e0']})
    t0.depends_on('t1', rfm.DEPEND_EXACT, {'e1': ['e1']})
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1])
    )
    with pytest.raises(DependencyError) as exc_info:
        dependency.validate_deps(deps)

    assert ('t1->t0->t1' in str(exc_info.value) or
            't0->t1->t0' in str(exc_info.value))


",False
1419,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_eq_hash,"def test_eq_hash(loader, exec_ctx):
    cases = executors.generate_testcases(loader.load_all())
    case0 = find_case('Test0', 'e0', cases)
    case1 = find_case('Test0', 'e1', cases)
    case0_copy = case0.clone()

    assert case0 == case0_copy
    assert hash(case0) == hash(case0_copy)
    assert case1 != case0
    assert hash(case1) != hash(case0)


",False
1420,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_toposort,"def test_toposort(make_test, exec_ctx):
    #
    #       t0       +-->t5<--+
    #       ^        |        |
    #       |        |        |
    #   +-->t1<--+   t6       t7
    #   |        |            ^
    #   t2<------t3           |
    #   ^        ^            |
    #   |        |            t8
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t5 = make_test('t5')
    t6 = make_test('t6')
    t7 = make_test('t7')
    t8 = make_test('t8')
    t1.depends_on('t0')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t3.depends_on('t2')
    t4.depends_on('t2')
    t4.depends_on('t3')
    t6.depends_on('t5')
    t7.depends_on('t5')
    t8.depends_on('t7')
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4,
                                      t5, t6, t7, t8])
    )
    cases = dependency.toposort(deps)
    assert_topological_order(cases, deps)


",False
1421,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_toposort_subgraph,"def test_toposort_subgraph(make_test, exec_ctx):
    #
    #       t0
    #       ^
    #       |
    #   +-->t1<--+
    #   |        |
    #   t2<------t3
    #   ^        ^
    #   |        |
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t1.depends_on('t0')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t3.depends_on('t2')
    t4.depends_on('t2')
    t4.depends_on('t3')
    full_deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4])
    )
    partial_deps = dependency.build_deps(
        executors.generate_testcases([t3, t4]), full_deps
    )
    cases = dependency.toposort(partial_deps, is_subgraph=True)
    assert_topological_order(cases, partial_deps)
",True
1422,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_environ_snapshot,"def test_environ_snapshot(self):
        rt.loadenv(self.environ, self.environ_other)
        self.environ_save.restore()
        assert self.environ_save == env.snapshot()
        assert not rt.is_env_loaded(self.environ)
        assert not rt.is_env_loaded(self.environ_other)

    ",True
1423,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_immutability,"def test_immutability(self):
        # Check emit_load_commands()
        _, commands = rt.loadenv(self.environ)

        # Try to modify the returned list of commands
        commands.append('foo')
        assert 'foo' not in rt.loadenv(self.environ)[1]

        # Test ProgEnvironment
        prgenv = env.ProgEnvironment('foo_prgenv')
        assert isinstance(prgenv, env.Environment)
        with pytest.raises(AttributeError):
            prgenv.cc = 'gcc'

        with pytest.raises(AttributeError):
            prgenv.cxx = 'g++'

        with pytest.raises(AttributeError):
            prgenv.ftn = 'gfortran'

        with pytest.raises(AttributeError):
            prgenv.nvcc = 'clang'

        with pytest.raises(AttributeError):
            prgenv.cppflags = ['-DFOO']

        with pytest.raises(AttributeError):
            prgenv.cflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.cxxflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.fflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.ldflags = ['-lm']

    @fixtures.switch_to_user_runtime
    ",True
1424,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_non_overlapping,"def test_load_non_overlapping(self):
        e0 = env.Environment(name='e0', variables=[('a', '1'), ('b', '2')])
        e1 = env.Environment(name='e1', variables=[('c', '3'), ('d', '4')])
        rt.loadenv(e0, e1)
        assert rt.is_env_loaded(e0)
        assert rt.is_env_loaded(e1)

    ",True
1425,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_overlapping,"def test_load_overlapping(self):
        e0 = env.Environment(name='e0', variables=[('a', '1'), ('b', '2')])
        e1 = env.Environment(name='e1', variables=[('b', '3'), ('c', '4')])
        rt.loadenv(e0, e1)
        assert not rt.is_env_loaded(e0)
        assert rt.is_env_loaded(e1)

    ",True
1426,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_restore,"def test_load_restore(self):
        snapshot, _ = rt.loadenv(self.environ)
        os.environ['_var0'] == 'val1'
        os.environ['_var1'] == 'val1'
        os.environ['_var2'] == 'val1'
        os.environ['_var3'] == 'val1'
        if fixtures.has_sane_modules_system():
            self.assertModulesLoaded(self.environ.modules)

        assert rt.is_env_loaded(self.environ)
        snapshot.restore()
        self.environ_save == env.snapshot()
        os.environ['_var0'], 'val0'
        if fixtures.has_sane_modules_system():
            assert not self.modules_system.is_module_loaded('testmod_foo')

        assert not rt.is_env_loaded(self.environ)

    @fixtures.switch_to_user_runtime
    ",True
1427,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_setup,"def test_setup(self):
        if fixtures.has_sane_modules_system():
            assert len(self.environ.modules) == 1
            assert 'testmod_foo' in self.environ.modules

        assert len(self.environ.variables.keys()) == 3
        assert self.environ.variables['_var0'] == 'val1'

        # No variable expansion, if environment is not loaded
        self.environ.variables['_var2'] == '$_var0'
        self.environ.variables['_var3'] == '${_var1}'

    ",True
1428,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_conflicted_checks,"def test_conflicted_checks(self):
        self.loader_with_path._ignore_conflicts = False
        with pytest.raises(NameConflictError):
            self.loader_with_path.load_all()

    ",True
1429,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_all,"def test_load_all(self):
        checks = self.loader_with_path.load_all()
        assert 11 == len(checks)

    ",True
1430,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_bad_init,"def test_load_bad_init(self):
        tests = self.loader.load_from_file(
            'unittests/resources/checks_unlisted/bad_init_check.py')
        assert 0 == len(tests)

    ",True
1431,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_file_absolute,"def test_load_file_absolute(self):
        checks = self.loader.load_from_file(
            os.path.abspath('unittests/resources/checks/emptycheck.py'))
        assert 1 == len(checks)
        assert checks[0].name == 'EmptyTest'

    ",True
1432,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_file_relative,"def test_load_file_relative(self):
        checks = self.loader.load_from_file(
            'unittests/resources/checks/emptycheck.py')
        assert 1 == len(checks)
        assert checks[0].name == 'EmptyTest'

    ",True
1433,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_new_syntax,"def test_load_new_syntax(self):
        checks = self.loader.load_from_file(
            'unittests/resources/checks_unlisted/good.py')
        assert 13 == len(checks)

    ",True
1434,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_recursive,"def test_load_recursive(self):
        checks = self.loader.load_from_dir('unittests/resources/checks',
                                           recurse=True)
        assert 12 == len(checks)

    ",True
1435,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_special_test,"def test_special_test(self):
        with pytest.warns(ReframeDeprecationWarning):
            @rfm.simple_test
            ",False
1436,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_handler_noappend,"def test_handler_noappend(temp_runtime, logfile):
    runtime = temp_runtime(
        {
            'level': 'info',
            'handlers': [
                {
                    'type': 'file',
                    'name': logfile,
                    'level': 'warning',
                    'format': '[%(asctime)s] %(levelname)s: %(message)s',
                    'datefmt': '%F',
                    'append': False,
                }
            ],
            'handlers_perflog': []
        }

    )
    next(runtime)

    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('foo')
    _close_handlers()

    # Reload logger
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('bar')

    assert not _found_in_logfile('foo', logfile)
    assert _found_in_logfile('bar', logfile)


",False
1437,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_check_logger,"def test_check_logger(self):
        self.logger_with_check.info('foo')
        self.logger_with_check.verbose('bar')

        assert os.path.exists(self.logfile)
        assert self.found_in_logfile('info')
        assert self.found_in_logfile('verbose')
        assert self.found_in_logfile('_FakeCheck')

    ",True
1438,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_custom_handler_levels,"def test_custom_handler_levels(self):
        self.handler.setLevel('verbose')
        self.handler.setLevel(rlog.VERBOSE)

        self.logger_with_check.debug('foo')
        self.logger_with_check.verbose('bar')

        assert not self.found_in_logfile('foo')
        assert self.found_in_logfile('bar')

    ",True
1439,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_custom_loglevels,"def test_custom_loglevels(self):
        self.logger_without_check.info('foo')
        self.logger_without_check.verbose('bar')

        assert os.path.exists(self.logfile)
        assert self.found_in_logfile('info')
        assert self.found_in_logfile('verbose')
        assert self.found_in_logfile('reframe')

    ",True
1440,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_handler_types,"def test_handler_types(self):
        assert issubclass(logging.Handler, rlog.Handler)
        assert issubclass(logging.StreamHandler, rlog.Handler)
        assert issubclass(logging.FileHandler, rlog.Handler)
        assert issubclass(logging.handlers.RotatingFileHandler, rlog.Handler)

        # Try to instantiate rlog.Handler
        with pytest.raises(TypeError):
            rlog.Handler()

    ",True
1441,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_invalid_loglevel,"def test_invalid_loglevel(self):
        with pytest.raises(ValueError):
            self.logger.setLevel('level')

        with pytest.raises(ValueError):
            rlog.Logger('logger', 'level')

    ",True
1442,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_logger_levels,"def test_logger_levels(self):
        self.logger_with_check.setLevel('verbose')
        self.logger_with_check.setLevel(rlog.VERBOSE)

        self.logger_with_check.debug('bar')
        self.logger_with_check.verbose('foo')

        assert not self.found_in_logfile('bar')
        assert self.found_in_logfile('foo')

    ",True
1443,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_rfc3339_timezone_extension,"def test_rfc3339_timezone_extension(self):
        self.formatter = rlog.RFC3339Formatter(
            fmt=('[%(asctime)s] %(levelname)s: %(check_name)s: '
                 'ct:%(check_job_completion_time)s: %(message)s'),
            datefmt='%FT%T%:z')
        self.handler.setFormatter(self.formatter)
        self.logger_with_check.info('foo')
        self.logger_without_check.info('foo')
        assert not self.found_in_logfile(r'%%:z')
        assert self.found_in_logfile(r'\[.+(\+|-)\d\d:\d\d\]')
        assert self.found_in_logfile(r'ct:.+(\+|-)\d\d:\d\d')

    ",True
1444,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_rfc3339_timezone_wrong_directive,"def test_rfc3339_timezone_wrong_directive(self):
        self.formatter = rlog.RFC3339Formatter(
            fmt='[%(asctime)s] %(levelname)s: %(check_name)s: %(message)s',
            datefmt='%FT%T:z')
        self.handler.setFormatter(self.formatter)
        self.logger_without_check.info('foo')
        assert self.found_in_logfile(':z')


",True
1445,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_compile_hooks,"def test_compile_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1446,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_environ_setup,"def test_environ_setup(hellotest, local_exec_ctx):
    # Use test environment for the regression check
    hellotest.variables = {'_FOO_': '1', '_BAR_': '2'}
    hellotest.setup(*local_exec_ctx)
    for k in hellotest.variables.keys():
        assert k not in os.environ


",True
1447,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_extra_resources,"def test_extra_resources(testsys_system):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1448,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck_local,"def test_hellocheck_local(hellotest, local_exec_ctx):
    # Test also the prebuild/postbuild functionality
    hellotest.prebuild_cmds = ['touch prebuild', 'mkdir prebuild_dir']
    hellotest.postbuild_cmds = ['touch postbuild', 'mkdir postbuild_dir']
    hellotest.keep_files = ['prebuild', 'postbuild',
                            'prebuild_dir', 'postbuild_dir']

    # Force local execution of the test; just for testing .local
    hellotest.local = True
    _run(hellotest, *local_exec_ctx)
    must_keep = [
        hellotest.stdout.evaluate(),
        hellotest.stderr.evaluate(),
        hellotest.build_stdout.evaluate(),
        hellotest.build_stderr.evaluate(),
        hellotest.job.script_filename,
        *hellotest.keep_files
    ]
    for f in must_keep:
        assert os.path.exists(os.path.join(hellotest.outputdir, f))


",True
1449,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck_local_prepost_run,"def test_hellocheck_local_prepost_run(hellotest, local_exec_ctx):
    @sn.sanity_function
    ",True
1450,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_multiple_hooks,"def test_multiple_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1451,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_compileonly_test,"def test_name_compileonly_test():
    ",True
1452,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_runonly_test,"def test_name_runonly_test():
    ",True
1453,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_user_inheritance,"def test_name_user_inheritance():
    ",True
1454,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_performance_var_evaluation,"def test_performance_var_evaluation(dummytest, sanity_file,
                                    perf_file, dummy_gpu_exec_ctx):
    # All performance values must be evaluated, despite the first one
    # failing To test this, we need an extract function that will have a
    # side effect when evaluated, whose result we will check after calling
    # `check_performance()`.
    logfile = 'perf.log'

    @sn.sanity_function
    ",False
1455,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_default,"def test_reference_default(dummytest, sanity_file,
                           perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        '*': {
            'value1': (1.4, -0.1, 0.1, None),
            'value2': (1.7, -0.1, 0.1, None),
            'value3': (3.1, -0.1, 0.1, None),
        }
    }
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
1456,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_unknown_tag,"def test_reference_unknown_tag(dummytest, sanity_file,
                               perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        'testsys': {
            'value1': (1.4, -0.1, 0.1, None),
            'value2': (1.7, -0.1, 0.1, None),
            'foo': (3.1, -0.1, 0.1, None),
        }
    }
    with pytest.raises(SanityError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
1457,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_registration_of_tests,"def test_registration_of_tests():
    import sys
    import unittests.resources.checks_unlisted.good as mod

    checks = mod._rfm_gettests()
    assert 13 == len(checks)
    assert [mod.MyBaseTest(0, 0),
            mod.MyBaseTest(0, 1),
            mod.MyBaseTest(1, 0),
            mod.MyBaseTest(1, 1),
            mod.MyBaseTest(2, 0),
            mod.MyBaseTest(2, 1),
            mod.AnotherBaseTest(0, 0),
            mod.AnotherBaseTest(0, 1),
            mod.AnotherBaseTest(1, 0),
            mod.AnotherBaseTest(1, 1),
            mod.AnotherBaseTest(2, 0),
            mod.AnotherBaseTest(2, 1),
            mod.MyBaseTest(10, 20)] == checks


",True
1458,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_regression_test_name,"def test_regression_test_name():
    ",True
1459,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_strange_test_names,"def test_strange_test_names():
    ",True
1460,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_supports_environ,"def test_supports_environ(hellotest, generic_system):
    hellotest.valid_prog_environs = ['*']
    assert hellotest.supports_environ('foo1')
    assert hellotest.supports_environ('foo-env')
    assert hellotest.supports_environ('*')


",True
1461,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_supports_system,"def test_supports_system(hellotest, testsys_system):
    hellotest.valid_systems = ['*']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['*:*']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:gpu']
    assert hellotest.supports_system('gpu')
    assert not hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:login']
    assert not hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert not hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['foo']
    assert not hellotest.supports_system('gpu')
    assert not hellotest.supports_system('login')
    assert not hellotest.supports_system('testsys:gpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['*:gpu']
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('foo:gpu')
    assert not hellotest.supports_system('testsys:cpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:*']
    assert hellotest.supports_system('testsys:login')
    assert hellotest.supports_system('gpu')
    assert not hellotest.supports_system('foo:gpu')


",True
1462,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_limited,"def test_concurrency_limited(async_runner, make_cases, make_async_exec_ctx):
    # The number of checks must be <= 2*max_jobs.
    num_checks, max_jobs = 5, 3
    ctx = make_async_exec_ctx(max_jobs)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that maximum concurrency was reached as fast as possible
    assert max_jobs == max(monitor.num_tasks)
    assert max_jobs == monitor.num_tasks[max_jobs]

    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Ensure that the jobs after the first #max_jobs were each run after
    # one of the previous #max_jobs jobs had finished
    # (e.g. begin[max_jobs] > end[0]).
    # Note: we may ensure this strictly as we may ensure serial behaviour.
    begin_after_end = (b > e for b, e in zip(begin_stamps[max_jobs:],
                                             end_stamps[:-max_jobs]))
    assert all(begin_after_end)

    # NOTE: to ensure that these remaining jobs were also run
    # in parallel one could do the command hereafter; however, it would
    # require to substantially increase the sleep time (in SleepCheck),
    # because of the delays in rescheduling (1s, 2s, 3s, 1s, 2s,...).
    # We currently prefer not to do this last concurrency test to avoid an
    # important prolongation of the unit test execution time.
    # self.assertTrue(self.begin_stamps[-1] < self.end_stamps[max_jobs])

    # Warn if the first #max_jobs jobs were not run in parallel; the
    # corresponding strict check would be:
    # self.assertTrue(self.begin_stamps[max_jobs-1] <= self.end_stamps[0])
    if begin_stamps[max_jobs-1] > end_stamps[0]:
        pytest.skip('the system seems too loaded.')


",True
1463,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_none,"def test_concurrency_none(async_runner, make_cases, make_async_exec_ctx):
    num_checks = 3
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that a single task was running all the time
    assert 1 == max(monitor.num_tasks)

    # Read the timestamps sorted to permit simple concurrency tests.
    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Ensure that the jobs were run after the previous job had finished
    # (e.g. begin[1] > end[0]).
    begin_after_end = (b > e
                       for b, e in zip(begin_stamps[1:], end_stamps[:-1]))
    assert all(begin_after_end)


",False
1464,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_unlimited,"def test_concurrency_unlimited(async_runner, make_cases, make_async_exec_ctx):
    num_checks = 3

    # Trigger evaluation of the execution context
    ctx = make_async_exec_ctx(num_checks)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that maximum concurrency was reached as fast as possible
    assert num_checks == max(monitor.num_tasks)
    assert num_checks == monitor.num_tasks[num_checks]
    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Warn if not all tests were run in parallel; the corresponding strict
    # check would be:
    #
    #     assert begin_stamps[-1] <= end_stamps[0]
    #
    if begin_stamps[-1] > end_stamps[0]:
        pytest.skip('the system seems too much loaded.')


",True
1465,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies,"def test_dependencies(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1466,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies,"def test_dependencies(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1467,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies_with_retries,"def test_dependencies_with_retries(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1468,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies_with_retries,"def test_dependencies_with_retries(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1469,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_in_wait_with_concurrency,"def test_kbd_interrupt_in_wait_with_concurrency(async_runner, make_cases,
                                                make_async_exec_ctx):
    ctx = make_async_exec_ctx(4)
    next(ctx)

    runner, _ = async_runner
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([
            KeyboardInterruptCheck(), SleepCheck(10),
            SleepCheck(10), SleepCheck(10)
        ]))

    assert_interrupted_run(runner)


",True
1470,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_within_test,"def test_kbd_interrupt_within_test(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    check = KeyboardInterruptCheck()
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([KeyboardInterruptCheck()]))

    stats = runner.stats
    assert 1 == len(stats.failures())
    assert_all_dead(runner)


",False
1471,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_within_test,"def test_kbd_interrupt_within_test(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    check = KeyboardInterruptCheck()
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([KeyboardInterruptCheck()]))

    stats = runner.stats
    assert 1 == len(stats.failures())
    assert_all_dead(runner)


",False
1472,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_pass_in_retries,"def test_pass_in_retries(make_runner, make_cases, tmp_path, common_exec_ctx):
    tmpfile = tmp_path / 'out.txt'
    tmpfile.write_text('0\n')
    runner = make_runner(max_retries=3)
    pass_run_no = 2
    runner.runall(make_cases([RetriesCheck(pass_run_no, tmpfile)]))

    # Ensure that the test passed after retries in run `pass_run_no`
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 1 == len(runner.stats.failures(run=0))
    assert pass_run_no == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",True
1473,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_pass_in_retries,"def test_pass_in_retries(make_runner, make_cases, tmp_path, common_exec_ctx):
    tmpfile = tmp_path / 'out.txt'
    tmpfile.write_text('0\n')
    runner = make_runner(max_retries=3)
    pass_run_no = 2
    runner.runall(make_cases([RetriesCheck(pass_run_no, tmpfile)]))

    # Ensure that the test passed after retries in run `pass_run_no`
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 1 == len(runner.stats.failures(run=0))
    assert pass_run_no == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",True
1474,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_bad_check,"def test_retries_bad_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([BadSetupCheck(), BadSetupCheckEarly()]))

    # Ensure that the test was retried #max_retries times and failed
    assert 2 == runner.stats.num_cases()
    assert_runall(runner)
    assert runner.max_retries == rt.runtime().current_run
    assert 2 == len(runner.stats.failures())

    # Ensure that the report does not raise any exception
    runner.stats.retry_report()


",True
1475,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_bad_check,"def test_retries_bad_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([BadSetupCheck(), BadSetupCheckEarly()]))

    # Ensure that the test was retried #max_retries times and failed
    assert 2 == runner.stats.num_cases()
    assert_runall(runner)
    assert runner.max_retries == rt.runtime().current_run
    assert 2 == len(runner.stats.failures())

    # Ensure that the report does not raise any exception
    runner.stats.retry_report()


",True
1476,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_good_check,"def test_retries_good_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([HelloTest()]))

    # Ensure that the test passed without retries.
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",False
1477,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall,"def test_runall(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    time_start = time.time()
    runner.runall(make_cases())
    time_end = time.time()
    assert 8 == runner.stats.num_cases()
    assert_runall(runner)
    assert 5 == len(runner.stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')

    # Create a run report and validate it
    run_stats = runner.stats.json()
    report = {
        'session_info': {
            'cmdline': ' '.join(sys.argv),
            'config_file': rt.runtime().site_config.filename,
            'data_version': '1.0',
            'hostname': socket.gethostname(),
            'num_cases': run_stats[0]['num_cases'],
            'num_failures': run_stats[-1]['num_failures'],
            'prefix_output': rt.runtime().output_prefix,
            'prefix_stage': rt.runtime().stage_prefix,
            'time_elapsed': time_end - time_start,
            'time_end': time.strftime(
                '%FT%T%z', time.localtime(time_end),
            ),
            'time_start': time.strftime(
                '%FT%T%z', time.localtime(time_start),
            ),
            'user': os_ext.osuser(),
            'version': os_ext.reframe_version(),
            'workdir': os.getcwd()
        },
        'runs': run_stats
    }
    _validate_runreport(report)


",True
1478,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall,"def test_runall(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    time_start = time.time()
    runner.runall(make_cases())
    time_end = time.time()
    assert 8 == runner.stats.num_cases()
    assert_runall(runner)
    assert 5 == len(runner.stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')

    # Create a run report and validate it
    run_stats = runner.stats.json()
    report = {
        'session_info': {
            'cmdline': ' '.join(sys.argv),
            'config_file': rt.runtime().site_config.filename,
            'data_version': '1.0',
            'hostname': socket.gethostname(),
            'num_cases': run_stats[0]['num_cases'],
            'num_failures': run_stats[-1]['num_failures'],
            'prefix_output': rt.runtime().output_prefix,
            'prefix_stage': rt.runtime().stage_prefix,
            'time_elapsed': time_end - time_start,
            'time_end': time.strftime(
                '%FT%T%z', time.localtime(time_end),
            ),
            'time_start': time.strftime(
                '%FT%T%z', time.localtime(time_start),
            ),
            'user': os_ext.osuser(),
            'version': os_ext.reframe_version(),
            'workdir': os.getcwd()
        },
        'runs': run_stats
    }
    _validate_runreport(report)


",True
1479,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_performance_check,"def test_runall_skip_performance_check(make_runner, make_cases,
                                       common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_performance_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 0 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1480,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_performance_check,"def test_runall_skip_performance_check(make_runner, make_cases,
                                       common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_performance_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 0 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1481,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_prgenv_check,"def test_runall_skip_prgenv_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_environ_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1482,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_prgenv_check,"def test_runall_skip_prgenv_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_environ_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1483,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_sanity_check,"def test_runall_skip_sanity_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_sanity_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 0 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1484,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_sanity_check,"def test_runall_skip_sanity_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_sanity_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 0 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1485,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_system_check,"def test_runall_skip_system_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_system_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1486,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_system_check,"def test_runall_skip_system_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_system_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1487,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_sigterm_handling,"def test_sigterm_handling(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    with pytest.raises(ReframeForceExitError,
                       match='received TERM signal'):
        runner.runall(make_cases([SelfKillCheck()]))

    assert_all_dead(runner)
    assert runner.stats.num_cases() == 1
    assert len(runner.stats.failures()) == 1


",True
1488,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_sigterm_handling,"def test_sigterm_handling(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    with pytest.raises(ReframeForceExitError,
                       match='received TERM signal'):
        runner.runall(make_cases([SelfKillCheck()]))

    assert_all_dead(runner)
    assert runner.stats.num_cases() == 1
    assert len(runner.stats.failures()) == 1


",False
1489,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_strict_performance_check,"def test_strict_performance_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.strict_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 6 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 2 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1490,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_strict_performance_check,"def test_strict_performance_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.strict_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 6 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 2 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1491,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel,"def test_cancel(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job, 'sleep 30')
    t_job = datetime.now()
    minimal_job.submit()
    minimal_job.cancel()
    minimal_job.wait()
    t_job = datetime.now() - t_job
    assert minimal_job.finished()
    assert t_job.total_seconds() < 30

    # Additional scheduler-specific checks
    sched_name = minimal_job.scheduler.registered_name
    if sched_name in ('slurm', 'squeue'):
        assert minimal_job.state == 'CANCELLED'


",True
1492,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1493,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1494,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1495,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1496,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1497,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_term_ignore,"def test_cancel_term_ignore(minimal_job, scheduler, local_only):
    # This test emulates a descendant process of the spawned job that
    # ignores the SIGTERM signal:
    #
    #   reframe --- local job script --- sleep_deeply.sh --- sleep
    #                                      (TERM IGN)
    #
    #  Since the ""local job script"" does not ignore SIGTERM, it will be
    #  terminated immediately after we cancel the job. However, the deeply
    #  spawned sleep will ignore it. We need to make sure that our
    #  implementation grants the sleep process a grace period and then
    #  kills it.
    minimal_job.time_limit = '1m'
    minimal_job.scheduler._cancel_grace_period = 2
    prepare_job(minimal_job,
                command=os.path.join(fixtures.TEST_RESOURCES_CHECKS,
                                     'src', 'sleep_deeply.sh'),
                pre_run=[''],
                post_run=[''])
    minimal_job.submit()

    # Stall a bit here to let the the spawned process start and install its
    # signal handler for SIGTERM
    time.sleep(1)

    t_grace = datetime.now()
    minimal_job.cancel()
    t_grace = datetime.now() - t_grace
    minimal_job.wait()

    # Read pid of spawned sleep
    with open(minimal_job.stdout) as fp:
        sleep_pid = int(fp.read())

    assert t_grace.total_seconds() >= 2
    assert minimal_job.state == 'TIMEOUT'

    # Verify that the spawned sleep is killed, too
    assert_process_died(sleep_pid)


# Flexible node allocation tests


",True
1498,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_with_grace,"def test_cancel_with_grace(minimal_job, scheduler, local_only):
    # This test emulates a spawned process that ignores the SIGTERM signal
    # and also spawns another process:
    #
    #   reframe --- local job script --- sleep 10
    #                  (TERM IGN)
    #
    # We expect the job not to be cancelled immediately, since it ignores
    # the gracious signal we are sending it. However, we expect it to be
    # killed immediately after the grace period of 2 seconds expires.
    #
    # We also check that the additional spawned process is also killed.
    minimal_job.time_limit = '1m'
    minimal_job.scheduler._cancel_grace_period = 2
    prepare_job(minimal_job,
                command='sleep 5 &',
                pre_run=['trap -- """" TERM'],
                post_run=['echo $!', 'wait'])
    minimal_job.submit()

    # Stall a bit here to let the the spawned process start and install its
    # signal handler for SIGTERM
    time.sleep(1)

    t_grace = datetime.now()
    minimal_job.cancel()
    t_grace = datetime.now() - t_grace

    minimal_job.wait()
    # Read pid of spawned sleep
    with open(minimal_job.stdout) as fp:
        sleep_pid = int(fp.read())

    assert t_grace.total_seconds() >= 2
    assert t_grace.total_seconds() < 5
    assert minimal_job.state == 'TIMEOUT'

    # Verify that the spawned sleep is killed, too
    assert_process_died(sleep_pid)


",True
1499,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_constraint,"def test_combined_access_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['-C c2&c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c2&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2&c3)$', script_content) is None


",True
1500,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_constraint,"def test_combined_access_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['-C c2&c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c2&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2&c3)$', script_content) is None


",True
1501,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_multiple_constraints,"def test_combined_access_multiple_constraints(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['--constraint=c2', '-C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2|c3)$', script_content) is None


",True
1502,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_multiple_constraints,"def test_combined_access_multiple_constraints(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['--constraint=c2', '-C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2|c3)$', script_content) is None


",False
1503,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_verbatim_constraint,"def test_combined_access_verbatim_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['#SBATCH --constraint=c2', '#SBATCH -C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1$', script_content)
    assert re.search(r'(?m)^#SBATCH --constraint=c2$', script_content)
    assert re.search(r'(?m)^#SBATCH -C c3$', script_content)


",True
1504,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_verbatim_constraint,"def test_combined_access_verbatim_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['#SBATCH --constraint=c2', '#SBATCH -C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1$', script_content)
    assert re.search(r'(?m)^#SBATCH --constraint=c2$', script_content)
    assert re.search(r'(?m)^#SBATCH -C c3$', script_content)


",False
1505,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_constraint_idle,"def test_flex_alloc_constraint_idle(make_flexible_job):
    job = make_flexible_job('idle')
    job.options = ['--constraint=f1']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1506,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_default_partition_all,"def test_flex_alloc_default_partition_all(make_flexible_job):
    job = make_flexible_job('all')
    prepare_job(job)
    assert job.num_tasks == 16


",True
1507,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_enough_nodes_constraint_partition,"def test_flex_alloc_enough_nodes_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    job.num_tasks = -4
    prepare_job(job)
    assert job.num_tasks == 4


",True
1508,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_exclude_nodes_cmd,"def test_flex_alloc_exclude_nodes_cmd(make_flexible_job):
    job = make_flexible_job('all',
                            sched_access=['--constraint=f1'],
                            sched_exclude_nodelist='nid00001')
    prepare_job(job)
    assert job.num_tasks == 8


",True
1509,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_exclude_nodes_opt,"def test_flex_alloc_exclude_nodes_opt(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--constraint=f1'])
    job.options = ['-x nid00001']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1510,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_constraint,"def test_flex_alloc_invalid_constraint(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--constraint=invalid']
    with pytest.raises(JobError):
        prepare_job(job)


",True
1511,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_partition_cmd,"def test_flex_alloc_invalid_partition_cmd(make_flexible_job):
    job = make_flexible_job('all', sched_partition='invalid')
    with pytest.raises(JobError):
        prepare_job(job)


",False
1512,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_partition_opt,"def test_flex_alloc_invalid_partition_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--partition=invalid']
    with pytest.raises(JobError):
        prepare_job(job)


",True
1513,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_maintenance_nodes,"def test_flex_alloc_maintenance_nodes(make_flexible_job):
    job = make_flexible_job('maint')
    job.options = ['--partition=p4']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1514,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_no_num_tasks_per_node,"def test_flex_alloc_no_num_tasks_per_node(make_flexible_job):
    job = make_flexible_job('all')
    job.num_tasks_per_node = None
    job.options = ['-C f1&f2', '--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 1


",True
1515,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_negative,"def test_flex_alloc_nodes_negative(make_flexible_job):
    job = make_flexible_job(-1, sched_access=['--constraint=f1'])
    with pytest.raises(JobError):
        prepare_job(job)


",True
1516,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_positive,"def test_flex_alloc_nodes_positive(make_flexible_job):
    job = make_flexible_job(12, sched_access=['--constraint=f1'])
    prepare_job(job)
    assert job.num_tasks == 48


",True
1517,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_zero,"def test_flex_alloc_nodes_zero(make_flexible_job):
    job = make_flexible_job(0, sched_access=['--constraint=f1'])
    with pytest.raises(JobError):
        prepare_job(job)


",False
1518,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_not_enough_idle_nodes,"def test_flex_alloc_not_enough_idle_nodes(make_flexible_job):
    job = make_flexible_job('idle')
    job.num_tasks = -12
    with pytest.raises(JobError):
        prepare_job(job)


",True
1519,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_not_enough_nodes_constraint_partition,"def test_flex_alloc_not_enough_nodes_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    job.num_tasks = -8
    with pytest.raises(JobError):
        prepare_job(job)


",True
1520,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_partition_idle,"def test_flex_alloc_partition_idle(make_flexible_job):
    job = make_flexible_job('idle', sched_partition='p2')
    with pytest.raises(JobError):
        prepare_job(job)


",True
1521,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_constraint_partition,"def test_flex_alloc_sched_access_constraint_partition(make_flexible_job):
    job = make_flexible_job(
        'all', sched_access=['--constraint=f1', '--partition=p2']
    )
    prepare_job(job)
    assert job.num_tasks == 4


",False
1522,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_idle,"def test_flex_alloc_sched_access_idle(make_flexible_job):
    job = make_flexible_job('idle', sched_access=['--constraint=f1'])
    prepare_job(job)
    assert job.num_tasks == 8


",True
1523,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_idle_sequence_view,"def test_flex_alloc_sched_access_idle_sequence_view(make_flexible_job):
    # Here we simulate passing a readonly 'sched_access' as returned
    # by a 'SystemPartition' instance.

    from reframe.utility import SequenceView

    job = make_flexible_job('idle',
                            sched_access=SequenceView(['--constraint=f3']),
                            sched_partition='p3')
    prepare_job(job)
    assert job.num_tasks == 4


",True
1524,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_partition,"def test_flex_alloc_sched_access_partition(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--partition=p1'])
    prepare_job(job)
    assert job.num_tasks == 16


",True
1525,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_constraint_opt,"def test_flex_alloc_valid_constraint_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1']
    prepare_job(job)
    assert job.num_tasks == 12


",True
1526,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_constraint_partition,"def test_flex_alloc_valid_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1527,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_multiple_constraints,"def test_flex_alloc_valid_multiple_constraints(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f3']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1528,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_multiple_partitions,"def test_flex_alloc_valid_multiple_partitions(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1529,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_partition_cmd,"def test_flex_alloc_valid_partition_cmd(make_flexible_job):
    job = make_flexible_job('all', sched_partition='p2')
    prepare_job(job)
    assert job.num_tasks == 8


",True
1530,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_partition_opt,"def test_flex_alloc_valid_partition_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-p p2']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1531,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_reservation_cmd,"def test_flex_alloc_valid_reservation_cmd(make_flexible_job):
    job = make_flexible_job('all',
                            sched_access=['--constraint=f2'],
                            sched_reservation='dummy')

    prepare_job(job)
    assert job.num_tasks == 4


",True
1532,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_reservation_option,"def test_flex_alloc_valid_reservation_option(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--constraint=f2'])
    job.options = ['--reservation=dummy']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1533,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",False
1534,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",False
1535,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1536,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1537,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1538,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1539,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1540,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1541,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1542,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll,"def test_poll(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job, 'sleep 2')
    minimal_job.submit()
    assert not minimal_job.finished()
    minimal_job.wait()


",False
1543,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1544,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1545,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1546,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1547,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1548,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1549,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1550,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1551,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1552,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1553,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_exclusive,"def test_prepare_no_exclusive(make_job, slurm_only):
    job = make_job(sched_exclusive_access=False)
    prepare_job(job)
    with open(job.script_filename) as fp:
        assert re.search(r'--exclusive', fp.read()) is None


",True
1554,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_exclusive,"def test_prepare_no_exclusive(make_job, slurm_only):
    job = make_job(sched_exclusive_access=False)
    prepare_job(job)
    with open(job.script_filename) as fp:
        assert re.search(r'--exclusive', fp.read()) is None


",True
1555,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_smt,"def test_prepare_no_smt(fake_job, slurm_only):
    fake_job.use_smt = None
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint', fp.read()) is None


",False
1556,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_smt,"def test_prepare_no_smt(fake_job, slurm_only):
    fake_job.use_smt = None
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint', fp.read()) is None


",True
1557,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_with_smt,"def test_prepare_with_smt(fake_job, slurm_only):
    fake_job.use_smt = True
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=multithread', fp.read()) is not None


",True
1558,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_with_smt,"def test_prepare_with_smt(fake_job, slurm_only):
    fake_job.use_smt = True
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=multithread', fp.read()) is not None


",True
1559,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_without_smt,"def test_prepare_without_smt(fake_job, slurm_only):
    fake_job.use_smt = False
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=nomultithread', fp.read()) is not None


",False
1560,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_without_smt,"def test_prepare_without_smt(fake_job, slurm_only):
    fake_job.use_smt = False
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=nomultithread', fp.read()) is not None


",True
1561,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit,"def test_submit(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job)
    assert minimal_job.nodelist is None
    minimal_job.submit()
    assert minimal_job.jobid is not None
    minimal_job.wait()

    # Additional scheduler-specific checks
    sched_name = minimal_job.scheduler.registered_name
    if sched_name == 'local':
        assert [socket.gethostname()] == minimal_job.nodelist
        assert 0 == minimal_job.exitcode
    elif sched_name == ('slurm', 'squeue', 'pbs', 'torque'):
        num_tasks_per_node = minimal_job.num_tasks_per_node or 1
        num_nodes = minimal_job.num_tasks // num_tasks_per_node
        assert num_nodes == len(minimal_job.nodelist)
        assert 0 == minimal_job.exitcode


",True
1562,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit_timelimit,"def test_submit_timelimit(minimal_job, local_only):
    minimal_job.time_limit = '2s'
    prepare_job(minimal_job, 'sleep 10')
    t_job = datetime.now()
    minimal_job.submit()
    assert minimal_job.jobid is not None
    minimal_job.wait()
    t_job = datetime.now() - t_job
    assert t_job.total_seconds() >= 2
    assert t_job.total_seconds() < 3
    with open(minimal_job.stdout) as fp:
        assert re.search('postrun', fp.read()) is None

    assert minimal_job.state == 'TIMEOUT'


",True
1563,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1564,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1565,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1566,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1567,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1896,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_invalid_pubkey_for_user_robey,"def test_app_auth_with_invalid_pubkey_for_user_robey(self):
        url = self.get_url('/')
        privatekey = 'h' * 1024
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }

        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid key', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    @tornado.testing.gen_test
    ",True
1897,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_pubkey_cannot_be_decoded_by_multipart_form,"def test_app_auth_with_pubkey_cannot_be_decoded_by_multipart_form(self):
        url = self.get_url('/')
        privatekey = 'h' * 1024
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        body = body.encode('utf-8')
        # added some gbk bytes to the privatekey, make it cannot be decoded
        body = body[:-100] + b'\xb4\xed\xce\xf3' + body[-100:]
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid unicode', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    ",True
1898,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_pubkey_exceeds_key_max_size,"def test_app_auth_with_pubkey_exceeds_key_max_size(self):
        url = self.get_url('/')
        privatekey = 'h' * (handler.PrivateKey.max_length + 1)
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid key', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    @tornado.testing.gen_test
    ",True
1899,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_valid_pubkey_by_multipart_form,"def test_app_auth_with_valid_pubkey_by_multipart_form(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        response = yield self.async_post(url, body, headers=headers)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1900,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_valid_pubkey_by_urlencoded_form,"def test_app_auth_with_valid_pubkey_by_urlencoded_form(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(privatekey=privatekey)
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1901,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_post_form_with_large_body_size_by_multipart_form,"def test_app_post_form_with_large_body_size_by_multipart_form(self):
        privatekey = 'h' * (2 * max_body_size)
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        response = self.sync_post('/', body, headers=headers)
        self.assertIn(response.code, [400, 599])

    ",True
1902,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_post_form_with_large_body_size_by_urlencoded_form,"def test_app_post_form_with_large_body_size_by_urlencoded_form(self):
        privatekey = 'h' * (2 * max_body_size)
        body = self.body + '&privatekey=' + privatekey
        response = self.sync_post('/', body)
        self.assertIn(response.code, [400, 599])

    @tornado.testing.gen_test
    ",True
1903,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials,"def test_app_with_correct_credentials(self):
        response = self.sync_post('/', self.body)
        self.assert_status_none(json.loads(to_str(response.body)))

    ",True
1904,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_empty_id,"def test_app_with_correct_credentials_but_empty_id(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id='
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Missing value id', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1905,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_ip_not_matched,"def test_app_with_correct_credentials_but_ip_not_matched(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        clients = handler.clients
        handler.clients = {}
        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertEqual(ws.close_reason, 'Websocket authentication failed.')
        handler.clients = clients

    @tornado.testing.gen_test
    ",True
1906,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_with_no_port,"def test_app_with_correct_credentials_but_with_no_port(self):
        default_port = handler.DEFAULT_PORT
        handler.DEFAULT_PORT = self.sshserver_port

        # with no port value
        body = self.body.replace(str(self.sshserver_port), '')
        response = self.sync_post('/', body)
        self.assert_status_none(json.loads(to_str(response.body)))

        # with no port argument
        body = body.replace('port=&', '')
        response = self.sync_post('/', body)
        self.assert_status_none(json.loads(to_str(response.body)))

        handler.DEFAULT_PORT = default_port

    @tornado.testing.gen_test
    ",True
1907,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_without_id_argument,"def test_app_with_correct_credentials_but_without_id_argument(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws'
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Missing argument id', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1908,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_wrong_id,"def test_app_with_correct_credentials_but_wrong_id(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=1' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Websocket authentication failed', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1909,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_timeout,"def test_app_with_correct_credentials_timeout(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        yield tornado.gen.sleep(handler.DELAY + 0.1)
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertEqual(ws.close_reason, 'Websocket authentication failed.')

    @tornado.testing.gen_test
    ",True
1910,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_user_bar,"def test_app_with_correct_credentials_user_bar(self):
        body = self.body.replace('robey', 'bar')
        url = self.get_url('/')
        response = yield self.async_post(url, body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)

        # messages below will be ignored silently
        yield ws.write_message('hello')
        yield ws.write_message('""hello""')
        yield ws.write_message('[hello]')
        yield ws.write_message(json.dumps({'resize': []}))
        yield ws.write_message(json.dumps({'resize': {}}))
        yield ws.write_message(json.dumps({'resize': 'ab'}))
        yield ws.write_message(json.dumps({'resize': ['a', 'b']}))
        yield ws.write_message(json.dumps({'resize': {'a': 1, 'b': 2}}))
        yield ws.write_message(json.dumps({'resize': [100]}))
        yield ws.write_message(json.dumps({'resize': [100]*10}))
        yield ws.write_message(json.dumps({'resize': [-1, -1]}))
        yield ws.write_message(json.dumps({'data': [1]}))
        yield ws.write_message(json.dumps({'data': (1,)}))
        yield ws.write_message(json.dumps({'data': {'a': 2}}))
        yield ws.write_message(json.dumps({'data': 1}))
        yield ws.write_message(json.dumps({'data': 2.1}))
        yield ws.write_message(json.dumps({'key-non-existed': 'hello'}))
        # end - those just for testing webssh websocket stablity

        yield ws.write_message(json.dumps({'resize': [79, 23]}))
        msg = yield ws.read_message()
        self.assertEqual(b'resized', msg)

        yield ws.write_message(json.dumps({'data': 'bye'}))
        msg = yield ws.read_message()
        self.assertEqual(b'bye', msg)
        ws.close()

    @tornado.testing.gen_test
    ",True
1911,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_user_robey,"def test_app_with_correct_credentials_user_robey(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1912,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_invalid_form_for_invalid_value,"def test_app_with_invalid_form_for_invalid_value(self):
        body = 'hostname=127.0.0&port=22&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid hostname', response)

        body = 'hostname=http://www.googe.com&port=22&username=&password&_xsrf=yummy'  # noqa
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid hostname', response)

        body = 'hostname=127.0.0.1&port=port&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid port', response)

        body = 'hostname=127.0.0.1&port=70000&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid port', response)

    ",True
1913,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_invalid_form_for_missing_argument,"def test_app_with_invalid_form_for_missing_argument(self):
        response = self.fetch('/')
        self.assertEqual(response.code, 200)

        body = 'port=7000&username=admin&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing argument hostname', response)

        body = 'hostname=127.0.0.1&port=7000&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing argument username', response)

        body = 'hostname=&port=&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing value hostname', response)

        body = 'hostname=127.0.0.1&port=7000&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing value username', response)

    ",True
1914,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_keyonly_for_bad_authentication_type,"def test_app_with_user_keyonly_for_bad_authentication_type(self):
        self.body_dict.update(username='keyonly', password='foo')
        response = yield self.async_post('/', self.body_dict)
        self.assertEqual(response.code, 200)
        self.assert_status_in('Bad authentication type', json.loads(to_str(response.body))) # noqa

    @tornado.testing.gen_test
    ",True
1915,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pass2fa_with_correct_passwords,"def test_app_with_user_pass2fa_with_correct_passwords(self):
        self.body_dict.update(username='pass2fa', password='password',
                              totp='passcode')
        response = yield self.async_post('/', self.body_dict)
        self.assertEqual(response.code, 200)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1916,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pass2fa_with_wrong_pkey_correct_passwords,"def test_app_with_user_pass2fa_with_wrong_pkey_correct_passwords(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pass2fa', password='password',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1917,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_correct_passwords,"def test_app_with_user_pkey2fa_with_correct_passwords(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1918,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_empty_passcode,"def test_app_with_user_pkey2fa_with_empty_passcode(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Need a verification code', data)


",True
1919,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_wrong_passcode,"def test_app_with_user_pkey2fa_with_wrong_passcode(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='wrongpasscode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Authentication failed', data)

    @tornado.testing.gen_test
    ",True
1920,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_wrong_password,"def test_app_with_user_pkey2fa_with_wrong_password(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='wrongpassword',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Authentication failed', data)

    @tornado.testing.gen_test
    ",True
1921,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_credentials,"def test_app_with_wrong_credentials(self):
        response = self.sync_post('/', self.body + 's')
        self.assert_status_in('Authentication failed.', json.loads(to_str(response.body))) # noqa

    ",True
1922,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_hostname_domain,"def test_app_with_wrong_hostname_domain(self):
        body = 'hostname=xxxxxxxxxxxx&port=2200&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
1923,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_hostname_ip,"def test_app_with_wrong_hostname_ip(self):
        body = 'hostname=127.0.0.2&port=2200&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
1924,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_port,"def test_app_with_wrong_port(self):
        body = 'hostname=127.0.0.1&port=7000&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
