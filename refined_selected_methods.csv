Row,Project_Name,URL,New URL,Class,Test,Content,Detected
14,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
15,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
16,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
17,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
18,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
19,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testGetMotorRegisterRange,"def testGetMotorRegisterRange(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegisterRange('base', 'goal_position'))

    ",True
20,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
21,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
22,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
23,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
24,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
25,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
26,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
27,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
28,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
29,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
30,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
31,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestHttpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.stopAudio())",True
32,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
33,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
34,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
35,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
36,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
37,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testGetMotorRegisterRange,"def testGetMotorRegisterRange(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegisterRange('base', 'goal_position'))

    ",True
38,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
39,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
40,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
41,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
42,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
43,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
44,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
45,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
46,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
47,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
48,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
49,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_tcp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestTcpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.client = TcpClient('localhost')
        self.assertIsNotNone(self.client.stopAudio())",True
50,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableAnimations,"def testGetAvailableAnimations(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableAnimations())

    ",True
51,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableHandlers,"def testGetAvailableHandlers(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableHandlers())

    ",True
52,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableMotorRegisters,"def testGetAvailableMotorRegisters(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableMotorRegisters('base'))

    ",True
53,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetAvailableSounds,"def testGetAvailableSounds(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.getAvailableSounds())

    ",True
54,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetMotorRegister,"def testGetMotorRegister(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegister('base', 'goal_position'))

    ",True
55,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorInDirection,"def testMoveMotorInDirection(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', 'left', '2'))

    # ",True
56,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorInTime,"def testMoveMotorInTime(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorInTime('base', '2048', '12'))

    ",True
57,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testMoveMotorToPosition,"def testMoveMotorToPosition(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.moveMotorToPosition('base', '2048', '2'))

    ",True
58,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPauseAnimation,"def testPauseAnimation(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.pauseAnimation())

    ",True
59,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPauseAudio,"def testPauseAudio(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.pauseAudio())

    ",True
60,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPlayAnimation,"def testPlayAnimation(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.playAnimation('welcome'))

    ",True
61,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testPlayAudio,"def testPlayAudio(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.playAudio('hello'))

    ",True
62,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testResumeAnimation,"def testResumeAnimation(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.resumeAnimation())

    ",True
63,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testResumeAudio,"def testResumeAudio(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.resumeAudio())

    ",True
64,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testSetMotorRegister,"def testSetMotorRegister(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.setMotorRegister('base', 'goal_position', '2048'))

    ",True
65,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testStopAnimation,"def testStopAnimation(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.stopAnimation())

    ",True
66,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_udp_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testStopAudio,"def testStopAudio(self):
        self.client = UdpClient('localhost')
        self.assertIsNotNone(self.client.stopAudio())",True
-1,Butter.MAS.PythonAPI,https://github.com/bennymeg/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_http_test.py,https://raw.githubusercontent.com/bennymeg/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/clients/client_test.py,TestUdpClientApiMethods,testGetMotorRegisterRange,"def testGetMotorRegisterRange(self):
        self.client = HttpClient('localhost')
        self.assertIsNotNone(self.client.getMotorRegisterRange('base', 'goal_position'))

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddCommand,"def testAddCommand(self):
        self.builder.addCommand('get')
        self.assertEqual(self.builder.cmd, 'get')

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddArgument,"def testAddArgument(self):
        self.builder.addArgument('base')
        self.assertEqual(self.builder.args, ['base'])

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddArguments,"def testAddArguments(self):
        self.builder.addArguments('base', 'top')
        self.assertEqual(self.builder.args, ['base', 'top'])

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddParameter,"def testAddParameter(self):
        self.builder.addParameter('play')
        self.builder.addParameter('-pause')
        self.builder.addParameter('--stop')
        self.assertEqual(self.builder.params, ['--play', '--pause', '--stop'])

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddParameters,"def testAddParameters(self):
        self.builder.addParameters('play', '-pause', '--stop')
        self.assertEqual(self.builder.params, ['--play', '--pause', '--stop'])

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testAddKeyValuePair,"def testAddKeyValuePair(self):
        self.builder.addKeyValuePair('speed', '5')
        self.assertDictEqual(self.builder.keys, {'speed': '5'})

    ",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_builder_test.py,,testBuild,"def testBuild(self):
        packet = self.builder.addCommand('get').addParameter('help').build()
        packetFactory = PacketFactory()
        self.assertEqual(packet, packetFactory.getPacket('localhost', 5555, 'cmd/json/get?--help'))


",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_http_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_http_test.py,,testSend,"def testSend(self):
        packetFactory = PacketFactory()
        packet = packetFactory.getPacket('localhost', 5555, 'cmd/json/help')
        self.assertIsNotNone(packet.send())


",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_tcp_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_tcp_test.py,,testSend,"def testSend(self):
        packetFactory = PacketFactory()
        packet = packetFactory.getPacket('localhost', 5050, 'cmd/json/help', protocol='tcp')
        self.assertIsNotNone(packet.send())


",False
-1,Butter.MAS.PythonAPI,https://github.com/butter-robotics/Butter.MAS.PythonAPI/blob/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_udp_test.py,https://raw.githubusercontent.com/butter-robotics/Butter.MAS.PythonAPI/f86ebe75df3826f62a268645cdbe4400b43fab07/butter/mas/tests/packets/packet_udp_test.py,,testSend,"def testSend(self):
        packetFactory = PacketFactory()
        packet = packetFactory.getPacket('localhost', 5000, 'cmd/json/help', protocol='udp')
        self.assertIsNotNone(packet.send())


",False
87,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_delitem_method,"def test_aggregated_delitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __delitem__ method.""""""

    del(mocked_aggregated['name'])
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert not hasattr(node, 'name')
    mocked_aggregated._aggregator._redis_nodes = []
    del(mocked_aggregated['name'])
",True
88,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_getitem_method,"def test_aggregated_getitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __getitem__ method.""""""

    assert mocked_aggregated['pattern'] == 'node2'
    mocked_aggregated._aggregator._redis_nodes = []
    assert mocked_aggregated['pattern'] is None


",True
89,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregated_setitem_method,"def test_aggregated_setitem_method(mocked_aggregated):
    """"""Test FlaskMultiRedis aggregated __setitem__ method.""""""

    mocked_aggregated['name'] = 'node0'
    nodes = mocked_aggregated._aggregator._redis_nodes
    assert [x.name for x in nodes] == ['node0', 'node0', 'node0']
    mocked_aggregated._aggregator._redis_nodes = []
    mocked_aggregated['name'] = 'node0'


",True
90,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_delete_method,"def test_aggregator_delete_method(mocked_aggregated):
    """"""Test aggregator delete method.""""""

    res = mocked_aggregated.delete('pattern')
    assert type(res) is int
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert not hasattr(node, 'name')


",True
91,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_get_method,"def test_aggregator_get_method(mocked_aggregated):
    """"""Test aggregator get method.""""""

    assert mocked_aggregated.get('pattern') == 'node2'


",True
92,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_keys_method,"def test_aggregator_keys_method(mocked_aggregated):
    """"""Test aggregator keys method.""""""

    assert mocked_aggregated.keys('pattern') == ['node3', 'pattern']


",True
93,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_keys_method_with_empty_nodes,"def test_aggregator_keys_method_with_empty_nodes(mocked_aggregated):
    """"""Test aggregator keys method with empty nodes.""""""

    assert mocked_aggregated.keys('empty') == []


",True
94,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_scan_iter_method,"def test_aggregator_scan_iter_method(mocked_aggregated):
    """"""Test aggregator scan_iter method.""""""

    for node in mocked_aggregated._aggregator._redis_nodes:
        node.set('value', 'pattern')
    results = [x for x in mocked_aggregated.scan_iter('value')]
    assert results == ['pattern', 'pattern', 'pattern']


",True
95,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_set_method,"def test_aggregator_set_method(mocked_aggregated):
    """"""Test aggregator set method.""""""

    res = mocked_aggregated.set('value', 'pattern')
    assert res is True
    for node in mocked_aggregated._aggregator._redis_nodes:
        assert node.value == 'pattern'


",True
96,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_aggregator_strategy,"def test_aggregator_strategy(aggregated):
    """"""Test that a constructor with aggregate strategy will initialize
    the connection.""""""
    assert aggregated._redis_client is not None
    assert hasattr(aggregated._redis_client, 'connection_pool')
    assert hasattr(aggregated._app, 'extensions')
    assert 'redis' in aggregated._app.extensions
    assert aggregated._app.extensions['redis'] == aggregated


",True
97,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_from_aggregated_node,"def test_attributes_transmission_from_aggregated_node(aggregated):
    """"""Test that attributes from aggregated nodes are
    available directly from FlaskMultiRedis object.""""""

    node = aggregated._aggregator._redis_nodes[0]
    assert aggregated.connection_pool is node.connection_pool


",True
98,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_from_loadbalanced_node,"def test_attributes_transmission_from_loadbalanced_node(loadbalanced):
    """"""Test that attributes from loadbalanced nodes are
    available directly from FlaskMultiRedis object.""""""

    node = loadbalanced._redis_nodes[0]
    assert loadbalanced.connection_pool is node.connection_pool


",True
99,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_attributes_transmission_if_aggregated_has_no_host,"def test_attributes_transmission_if_aggregated_has_no_host(aggregated):
    """"""Test that attributes transmission return None if Aggregator
    has an empty node list.""""""
    aggregated._aggregator._redis_nodes = []
    assert aggregated._redis_client is None


",True
100,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_constructor,"def test_constructor(loadbalanced):
    """"""Test that a constructor with app instance will initialize the
    connection.""""""
    assert loadbalanced._redis_client is not None
    assert hasattr(loadbalanced._redis_client, 'connection_pool')
    assert hasattr(loadbalanced._app, 'extensions')
    assert 'redis' in loadbalanced._app.extensions
    assert loadbalanced._app.extensions['redis'] is loadbalanced


",True
101,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_default_config,"def test_custom_default_config(app_custom_default):
    """"""Test that we can pass a custom default configuration.""""""

    redis = FlaskMultiRedis(app_custom_default)
    assert redis.connection_pool.connection_kwargs['port'] == 16379
    assert redis.connection_pool.connection_kwargs['db'] == 9
    assert redis.connection_pool.connection_kwargs['password'] == 'password'
    assert redis.connection_pool.connection_kwargs['socket_timeout'] == 2


",True
102,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_default_ssl,"def test_custom_default_ssl(app_custom_default_ssl):
    """"""Test that we can pass a custom default ssl configuration.""""""

    redis = FlaskMultiRedis(app_custom_default_ssl)
    kwargs = redis.connection_pool.connection_kwargs
    assert kwargs['ssl_keyfile'] == 'ssl/rediskey.pem'
    assert kwargs['ssl_certfile'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_ca_certs'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_cert_reqs'] == 'required'


",True
103,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_node,"def test_custom_node(app_custom_node):
    """"""Test that we can pass a custom node configuration.""""""

    redis = FlaskMultiRedis(app_custom_node)
    kwargs = redis.connection_pool.connection_kwargs
    assert kwargs['port'] == 16379
    assert kwargs['db'] == 9
    assert kwargs['password'] == 'password'
    assert kwargs['socket_timeout'] == 2
    assert kwargs['ssl_keyfile'] == 'ssl/rediskey.pem'
    assert kwargs['ssl_certfile'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_ca_certs'] == 'ssl/rediscert.pem'
    assert kwargs['ssl_cert_reqs'] == 'required'


",True
104,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_prefix,"def test_custom_prefix(app):
    """"""Test that config prefixes enable distinct connections.""""""
    app.config['DBA_NODES'] = [{'host': 'localhost', 'db': 1}]
    app.config['DBB_NODES'] = [{'host': 'localhost', 'db': 2}]
    redis_a = FlaskMultiRedis(app, config_prefix='DBA')
    redis_b = FlaskMultiRedis(app, config_prefix='DBB')
    assert redis_a.connection_pool.connection_kwargs['db'] == 1
    assert redis_b.connection_pool.connection_kwargs['db'] == 2


",True
105,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_extension_registration_if_app_has_no_extensions,"def test_extension_registration_if_app_has_no_extensions(app):
    """"""Test that the constructor is able to register FlaskMultiRedis
    as an extension even if app has no extensions attribute.""""""
    delattr(app, 'extensions')
    redis = FlaskMultiRedis(app)
    assert hasattr(app, 'extensions')
    assert 'redis' in app.extensions
    assert app.extensions['redis'] == redis


",True
106,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_init_app,"def test_init_app(app):
    """"""Test that a constructor without app instance will not initialize the
    connection.

    After FlaskMultiRedis.init_app(app) is called, the connection will be
    initialized.""""""
    redis = FlaskMultiRedis()
    assert redis._app is None
    assert len(redis._redis_nodes) == 0
    redis.init_app(app)
    assert redis._app is app
    assert len(redis._redis_nodes) == 1
    assert hasattr(redis._redis_client, 'connection_pool')


",True
107,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_delitem_method,"def test_loadbalanced_delitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __delitem__ method.""""""

    del(mocked_loadbalanced['name'])
    for node in mocked_loadbalanced._redis_nodes:
        assert not hasattr(node, 'name')
    mocked_loadbalanced._redis_nodes = []
    del(mocked_loadbalanced['name'])


",True
108,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_getitem_method,"def test_loadbalanced_getitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __getitem__ method.""""""

    assert mocked_loadbalanced['pattern'] in ['node1', 'node2', 'node3']
    mocked_loadbalanced._redis_nodes = []
    assert mocked_loadbalanced['pattern'] is None


",True
109,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_loadbalanced_setitem_method,"def test_loadbalanced_setitem_method(mocked_loadbalanced):
    """"""Test FlaskMultiRedis loadbalanced __setitem__ method.""""""

    mocked_loadbalanced['name'] = 'node0'
    assert 'node0' in [x.name for x in mocked_loadbalanced._redis_nodes]
    mocked_loadbalanced._redis_nodes = []
    mocked_loadbalanced['name'] = 'node0'


",True
110,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_methods_transmission_from_aggregator,"def test_methods_transmission_from_aggregator(aggregated):
    """"""Test that methods from aggregator are available
    directly from FlaskMultiRedis object (aggregate).""""""

    assert isinstance(aggregated.keys.__self__, Aggregator)


",True
111,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_methods_transmission_from_redis,"def test_methods_transmission_from_redis(loadbalanced):
    """"""Test that methods from redis are available
    direcly from FlaskMultiRedis object (loadbalancing).""""""

    assert isinstance(loadbalanced.keys.__self__, StrictRedis)


",True
112,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_task_runner,"def test_task_runner(mocked_aggregated):
    """"""Test task runner in nominal operations.""""""

    ",True
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_strict_parameter,"def test_strict_parameter(app):
    """"""Test that initializing with the strict parameter set to True will use
    StrictRedis, and that False will keep using the old Redis class.""""""

    redis = FlaskMultiRedis(app, strict=True)
    assert redis._redis_client is not None
    assert type(redis._redis_client).__name__ == 'StrictRedis'

    redis = FlaskMultiRedis(app, strict=False)
    assert redis._redis_client is not None
    assert type(redis._redis_client).__name__ == 'Redis'


",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_provider,"def test_custom_provider(app):
    """"""Test that FlaskMultiRedis can be instructed to use a different Redis client,
    like StrictRedis.""""""
    ",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_provider_with_app,"def test_custom_provider_with_app(app):
    """"""Test that FlaskMultiRedis can be instructed to use a different Redis client,
    using an already existing Flask app.""""""
    ",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_custom_provider_is_none,"def test_custom_provider_is_none(app):
    """"""Test that FlaskMultiRedis cannot be instructed to use a Redis Client
    wich is None.""""""
    with pytest.raises(AssertionError) as excinfo:
        FlaskMultiRedis.from_custom_provider(None)
        assert excinfo.value == 'your custom provider is None, come on'


",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/integration/test_flask_multi_redis.py,,test_transmission_of_not_implemented_method,"def test_transmission_of_not_implemented_method(aggregated):
    """"""Test that trying to access a not implemented method
    will properly raise an exception.""""""

    with pytest.raises(NotImplementedError) as e:
        aggregated.mget

    message = 'NotImplementedError: mget is not implemented yet.'
    message += ' Feel free to contribute.'
    assert ' '.join(str(e).split(' ')[1:]) == message


",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/unit/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/unit/test_flask_multi_redis.py,,test_redis_import_error,"def test_redis_import_error():
    """"""Test that we can load FlaskMultiRedis even if redis module
    is not available.""""""

    from flask_multi_redis import main
    modules['redis'] = None
    main = reload(main)
    FlaskMultiRedis = main.FlaskMultiRedis

    f = FlaskMultiRedis()
    assert f.provider_",False
-1,flask-multi-redis,https://github.com/max-k/flask-multi-redis/blob/fa781d3598448a6429309a686de9a8adb53f9f34/test/unit/test_flask_multi_redis.py,https://raw.githubusercontent.com/max-k/flask-multi-redis/fa781d3598448a6429309a686de9a8adb53f9f34/test/unit/test_flask_multi_redis.py,,test_constructor_app,"def test_constructor_app(mocker):
    """"""Test that the constructor passes the app to FlaskMultiRedis.init_app.""""""

    from flask_multi_redis import main
    del(modules['redis'])
    main = reload(main)
    FlaskMultiRedis = main.FlaskMultiRedis

    mocker.patch.object(FlaskMultiRedis, 'init_app', autospec=True)
    app_stub = mocker.stub(name='app_stub')

    FlaskMultiRedis(app_stub)

    FlaskMultiRedis.init_app.assert_called_once_with(mocker.ANY, app_stub)
",False
313,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_add,"def test_command_add(self, centreon_con):
        values = [
            'command_test',
            'check',
            '/my/plugins my command'
        ]
        data = {}
        data['action'] = 'add'
        data['object'] = 'CMD'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.commands.add(""command_test"",
                                          ""check"",
                                          ""/my/plugins my command"",
                                          post_refresh=False
                                          )
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    ",True
314,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_delete,"def test_command_delete(self, centreon_con):
        data = {}
        data['action'] = 'del'
        data['object'] = 'CMD'
        data['values'] = 'command_test'

        with patch('requests.post') as patched_post:
            centreon_con.commands.delete('command_test', post_refresh=False)
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    @responses.activate
    ",True
315,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_list,"def test_command_list(self, centreon_con):
        with open(resource_dir / 'test_commands_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.commands.get('OS-Linux-SNMP-Memory')
        assert res.id == ""111""

    @responses.activate
    ",True
316,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_not_exist,"def test_command_not_exist(self, centreon_con):
        with open(resource_dir / 'test_commands_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')
        state, cmd = centreon_con.commands.get(""empty"")
        assert state == False

    ",True
317,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_command.py,TestCommands,test_command_setparam,"def test_command_setparam(self):
        with open(resource_dir / 'test_commands_1.json') as data:
            cmd = Command(json.load(data))
        values = [
            cmd.name,
            'type',
            'notif',
        ]
        data = {}
        data['action'] = 'setparam'
        data['object'] = 'CMD'
        data['values'] = values

        with patch('requests.post') as patched_post:
            cmd.setparam('type', 'notif')
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)



",True
318,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addcontact,"def test_host_addcontactgroupt(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'addcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.addcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
319,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addcontactgroupt,"def test_host_addcontactgroupt(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'addcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.addcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
320,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addparent,"def test_host_addparent(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parent.json') as parent:
            parents = Host(json.load(parent))

        data = dict()
        data['action'] = 'addparent'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""mail-neptune-frontend""]

        with patch('requests.post') as patched_post:
            host.addparent(parents)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
321,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_addtemplate,"def test_host_addtemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                print(tlp)
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'addtemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.addtemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
322,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_applytemplate,"def test_host_applytemplate(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'applytpl'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.applytemplate()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
323,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletecontact,"def test_host_deletecontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'delcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.deletecontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
324,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletecontactgroup,"def test_host_deletecontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'delcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.deletecontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
325,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deletehostgroup,"def test_host_deletehostgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_hostgroup.json') as hg:
            hgs = HostGroup(json.load(hg))

        data = dict()
        data['action'] = 'delhostgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""centreon-prod""]

        with patch('requests.post') as patched_post:
            host.deletehostgroup(hgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
326,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_delmacro,"def test_host_delmacro(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_macro.json') as m:
            macro = HostMacro(json.load(m))
        data = dict()
        data['action'] = 'delmacro'
        data['object'] = 'HOST'
        data['values'] = [host.name, 'NRPEPORT']

        with patch('requests.post') as patched_post:
            host.deletemacro(macro)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
327,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_deteletemplate,"def test_host_deteletemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'deltemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.deletetemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
328,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_disable,"def test_host_disable(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'disable'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.disable()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
329,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_enable,"def test_host_enable(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'enable'
        data['object'] = 'HOST'
        data['values'] = ""mail-uranus-frontend""

        with patch('requests.post') as patched_post:
            host.enable()
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
330,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getcontact,"def test_host_getcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_contactgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = host.getcontactgroup()
        assert res['astreinte'].id == ""9""

    ",True
331,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getcontactgroup,"def test_host_getcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_contactgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = host.getcontactgroup()
        assert res['astreinte'].id == ""9""

    ",True
332,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_gethostgroup,"def test_host_gethostgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / ""test_host_hostgroups.json"") as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                          self.clapi_url,
                          json=wsresponses, status=200, content_type='application/json')
        _, res = host.gethostgroup()
        assert res['centreon-prj'].id == ""115""

    ",True
333,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getmacro,"def test_host_getmacro(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_macros.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.getmacro()
        assert res[""$_HOSTMATTERMOST_CHAN$""].name == ""MATTERMOST_CHAN""

    ",True
334,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_getparents,"def test_host_getparents(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parents.json') as data:
                wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.getparent()
        assert res['mail-neptune-frontend'].id == ""13""

    ",True
335,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_gettemplate,"def test_host_gettemplate(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_templates.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      self.clapi_url,
                      json=wsresponses, status=200, content_type='application/json')
        _, res = host.gettemplate()
        print(res)
        assert res[""OS-Linux-SNMP-custom""].id == ""6""


    ",True
336,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setcontact,"def test_host_setcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'setcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.setcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
337,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setcontactgroup,"def test_host_setcontactgroup(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_contactgroup.json') as cg:
            cgs = ContactGroup(json.load(cg))

        data = dict()
        data['action'] = 'setcontactgroup'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""astreinte""]

        with patch('requests.post') as patched_post:
            host.setcontactgroup(cgs)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
338,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setinstance,"def test_host_setinstance(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_poller.json') as instances:
            instance = Poller(json.load(instances))

        data = dict()
        data['action'] = 'setinstance'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""Central""]

        with patch('requests.post') as patched_post:
            host.setinstance(instance)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    @responses.activate
    ",True
339,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setmacro,"def test_host_setmacro(self, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'setmacro'
        data['object'] = 'HOST'
        data['values'] = [host.name, 'MACRO_TEST', 'VALUE_TEST', '0', 'DESC']

        with patch('requests.post') as patched_post:
            host.setmacro('MACRO_TEST', 'VALUE_TEST', '0', 'DESC')
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
340,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setparam,"def test_host_setparam(self, host_load_data):
        host = host_load_data

        data = dict()
        data['action'] = 'setparam'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""notes"", ""tested""]

        with patch('requests.post') as patched_post:
            host.setparam(""notes"", ""tested"")
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )",True
341,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_setparent,"def test_host_setparent(self, host_load_data):
        host = host_load_data
        with open(resource_dir / 'test_host_parent.json') as parent:
            parents = Host(json.load(parent))

        data = dict()
        data['action'] = 'setparent'
        data['object'] = 'HOST'
        data['values'] = [""mail-uranus-frontend"", ""mail-neptune-frontend""]

        with patch('requests.post') as patched_post:
            host.setparent(parents)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
342,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHost,test_host_settemplate,"def test_host_settemplate(self, host_load_data):
        host = host_load_data
        templates = list()
        with open(resource_dir / 'test_host_template.json') as htlp:
            tmp = json.load(htlp)
            for tlp in tmp:
                print(tlp)
                templates.append(HostTemplate(tlp))

        data = dict()
        data['action'] = 'settemplate'
        data['object'] = 'HOST'
        data['values'] = [
            ""mail-uranus-frontend"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-Disk-/""]

        with patch('requests.post') as patched_post:
            host.settemplate(templates)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
343,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_add,"def test_hosts_add(self, centreon_con):
        values = [
            ""new_host.tld"",
            ""new_host"",
            ""127.0.0.7"",
            ""OS-Linux-SNMP-custom|OS-Linux-SNMP-disk"",
            ""Central"",
            ""hg""
        ]
        data = dict()
        data['action'] = 'add'
        data['object'] = 'HOST'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.hosts.add(
                ""new_host.tld"",
                ""new_host"",
                ""127.0.0.7"",
                ""Central"",
                [""OS-Linux-SNMP-custom"", ""OS-Linux-SNMP-disk""],
                [""hg""],
                post_refresh=False
            )
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
344,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_delete,"def test_hosts_delete(self, centreon_con):
        data = dict()
        data['action'] = 'del'
        data['object'] = 'HOST'
        data['values'] = 'my_deleted_host'

        with patch('requests.post') as patched_post:
            centreon_con.hosts.delete('my_deleted_host', post_refresh=False)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )

    ",True
345,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_delete_with_obj,"def test_hosts_delete_with_obj(self, centreon_con, host_load_data):
        host = host_load_data
        data = dict()
        data['action'] = 'del'
        data['object'] = 'HOST'
        data['values'] = 'mail-uranus-frontend'

        with patch('requests.post') as patched_post:
            centreon_con.hosts.delete(host, post_refresh=False)
            patched_post.assert_called_with(
                self.clapi_url,
                headers=self.headers,
                data=json.dumps(data),
                verify=True
            )


",True
346,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_list,"def test_hosts_list(self, centreon_con):
        with open(resource_dir / 'test_hosts_list.json') as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        _, res = centreon_con.hosts.get('mail-uranus-frontend')
        assert res.id == ""12""

    @responses.activate
    ",True
347,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_hosts.py,TestHosts,test_hosts_not_exist,"def test_hosts_not_exist(self, centreon_con):
        with open(resource_dir / 'test_hosts_list.json') as data:
            wsresponses = json.load(data)
        responses.add(
            responses.POST,
            self.clapi_url,
            json=wsresponses, status=200, content_type='application/json')
        state, res = centreon_con.hosts.get('empty')
        assert state == False
        assert res == None

    ",True
348,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_add,"def test_resourcecfg_add(self, centreon_con):
        values = [
            'resource_test',
            'ressource_value',
            'Central',
            'comment'
        ]
        data = {}
        data['action'] = 'add'
        data['object'] = 'RESOURCECFG'
        data['values'] = values

        with patch('requests.post') as patched_post:
            centreon_con.resourcecfgs.add(""resource_test"",
                                          ""ressource_value"",
                                          ""Central"",
                                          ""comment"",
                                          post_refresh=False
                                          )
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    ",True
349,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_building_line,"def test_resourcecfg_building_line(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.resourcecfgs.get('_HOSTSNMPVERSION')
        assert res.name == ""$_HOSTSNMPVERSION$""

    @responses.activate
    ",True
350,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_delete,"def test_resourcecfg_delete(self, centreon_con):
        data = {}
        data['action'] = 'del'
        data['object'] = 'RESOURCECFG'
        data['values'] = '42'

        with patch('requests.post') as patched_post:
            centreon_con.resourcecfgs.delete('42', post_refresh=False)
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)

    @responses.activate
    ",True
351,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_get_one,"def test_resourcecfg_get_one(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')

        _, res = centreon_con.resourcecfgs.get('$_HOSTSNMPVERSION$')
        assert res.name == ""$_HOSTSNMPVERSION$""

    @responses.activate
    ",True
352,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_not_exist,"def test_resourcecfg_not_exist(self, centreon_con):
        with open(resource_dir / 'test_resourcecfg_list.json') as data:
            wsresponses = json.load(data)
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi',
                      json=wsresponses, status=200, content_type='application/json')
        state, res = centreon_con.resourcecfgs.get('empty')
        assert state == False
        assert res == None


    clapi_url = 'http://api.domain.tld/centreon/api/index.php?action=action&object=centreon_clapi'
    headers = {
        'Content-Type': 'application/json',
        'centreon-auth-token': 'NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc='
        }

    ",True
353,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestResourceCFG,test_resourcecfg_setparam,"def test_resourcecfg_setparam(self):
        with open(resource_dir / 'test_resourcecfg_1.json') as data:
            res = ResourceCFG(json.load(data))
        values = [
            res.id,
            'instance',
            'Central',
        ]
        data = {}
        data['action'] = 'setparam'
        data['object'] = 'RESOURCECFG'
        data['values'] = values

        with patch('requests.post') as patched_post:
            res.setparam('instance', 'Central')
            patched_post.assert_called_with(self.clapi_url, headers=self.headers, data=json.dumps(data), verify=True)


",True
-1,centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python/blob/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,https://raw.githubusercontent.com/guillaumewatteeux/centreon-sdk-python/9f207d5458afc3304e24f16988069467b19eab81/tests/test_resourcecfg.py,TestConnect,test_connection,"def test_connection(self):
        url = ""http://api.domain.tld/centreon""
        username = ""mytest""
        password = ""mypass""
        mytoken = ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""
        wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
        responses.add(responses.POST,
                      'http://api.domain.tld/centreon/api/index.php?action=authenticate',
                      body=wsresponses, status=200, content_type='application/json')

        myconn = Webservice.getInstance(url, username, password)
        myconn.auth()
        assert mytoken == myconn.auth_token


",False
382,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,TestFindRain,test_1,"def test_1(self):
        result = np.zeros(len(self.time))
        assert_array_equal(classify._find_rain(self.z, self.time), result)

    ",True
383,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,TestFindRain,test_3,"def test_3(self):
        self.z[5, 3] = 0.1
        result = np.ones(len(self.time))
        result[3:7] = 1
        assert_array_equal(classify._find_rain(self.z, self.time,
                                               time_buffer=1), result)

    ",True
384,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
385,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
386,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
387,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
388,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
389,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
390,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
391,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
392,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
393,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
394,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
395,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
396,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
397,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
398,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
399,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
400,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
401,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
402,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
403,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
404,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_append_data,"@pytest.mark.parametrize(""key"", [
    ""Do"", ""mu"", ""S"", ""beta_corr"", ""drizzle_N"", ""drizzle_lwc"", ""drizzle_lwf"", ""v_drizzle"",
    ""v_air"", ""Do_error"", ""drizzle_lwc_error"", ""drizzle_lwf_error"", ""S_error"",
    ""Do_bias"", ""drizzle_lwc_bias"", ""drizzle_lwf_bias"", ""drizzle_N_error"",
    ""v_drizzle_error"", ""mu_error"", ""drizzle_N_bias"", ""v_drizzle_bias""])
def test_append_data(class_objects, result, key):
    from cloudnetpy.products.drizzle import _append_data
    d_source, d_class, s_width = class_objects
    _append_data(d_source, result)
    assert key in d_source.data.keys()


",True
405,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_beta_z_ratio,"def test_calc_beta_z_ratio(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    obj.data.beta = np.array([[1, 1, 2], [1, 1, 3]])
    obj.data.z = np.array([[2, 2, 1], [1, 1, 1]])
    compare = 2 / np.pi * obj.data.beta / obj.data.z
    testing.assert_array_almost_equal(obj._calc_beta_z_ratio(), compare)


",True
406,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_density,"def test_calc_density(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    obj.data.z = np.array([1, 2, 3])
    compare = obj.data.z * 3.67 ** 6 / obj.parameters['Do'] ** 6
    testing.assert_array_almost_equal(obj._calc_density(), compare)


",True
407,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
408,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
409,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
410,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
411,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_derived_products,"@pytest.mark.parametrize('key', [
    'drizzle_N', 'drizzle_lwc', 'drizzle_lwf', 'v_drizzle', 'v_air'])
def test_calc_derived_products(class_objects, params_objects, key):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dictio = obj._calc_derived_products()
    assert key in dictio.keys()


",True
412,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_dia,"def test_calc_dia(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    beta_z = np.array([1, 2, 3])
    compare = (gamma(3) / gamma(7) * 3.67 ** 4 / beta_z) ** (1 / 4)
    testing.assert_array_almost_equal(obj._calc_dia(beta_z), compare)


# Create params object with class_objects
",True
413,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_fall_velocity,"def test_calc_fall_velocity(class_objects, params_objects):
    # TODO: fix this
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    compare = np.array([[0, -7.11002091, -7.11002091],
                        [-7.11002091, -7.11002091, 0]])
    testing.assert_array_almost_equal(obj._calc_fall_velocity(), compare)


",True
414,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_lwc,"def test_calc_lwc(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    dia, mu, s = [obj.parameters.get(key) for key in ('Do', 'mu', 'S')]
    gamma_ratio = gamma(4 + mu) / gamma(3 + mu) / (3.67 + mu)
    compare = 1000 / 3 * obj.data.beta * s * dia * gamma_ratio
    testing.assert_array_almost_equal(obj._calc_lwc(), compare)


",True
415,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_lwf,"def test_calc_lwf(class_objects, params_objects):
    # TODO: fix this
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    lwc_in = np.array([[0.001, 0.001, 0.002],
                       [0.003, 0.002, 0.001]])
    compare = np.array([[0.001, 0.005508, 0.011016],
                        [0.016524, 0.011016, 0.001]])
    testing.assert_array_almost_equal(obj._calc_lwf(lwc_in), compare)


",True
416,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_v_air,"def test_calc_v_air(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    d_v = np.array([[2.0, 2.0, 4.0], [1.0, 3.0, 5.0]])
    obj.ind_drizzle = (np.array([0, 1]), np.array([1, 2]))
    compare = np.array([[-2.0, 0.0, -4.0],
                        [-1.0, -3.0, -2.0]])
    testing.assert_array_almost_equal(obj._calc_v_air(d_v), compare)


",True
417,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_indices,"def test_find_indices(class_objects, params_objects):
    d_source, d_class, s_width = class_objects
    obj = CalculateProducts(d_source, params_objects)
    obj.parameters['Do'] = np.array([[0.0, 1.0, 1.0],
                                     [1.0, 1.0, 0.0]])
    x, y = obj._find_indices()
    compare = (np.array([0, 0, 1, 1]),
               np.array([1, 2, 0, 1]))
    testing.assert_array_almost_equal(x, compare)


",True
418,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_lut_indices,"def test_find_lut_indices(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (1, 2)
    dia_init = np.array([[1, 3, 2], [3, 1, 2]])
    n_dia = 1
    n_width = 2
    ind_d = bisect_left(obj.data.mie['Do'], dia_init[ind], hi=n_dia - 1)
    ind_w = bisect_left(obj.width_lut[:, ind_d], -obj.width_ht[ind], hi=n_width - 1)
    compare = (ind_w, ind_d)
    testing.assert_almost_equal(obj._find_lut_indices
                                (ind, dia_init, n_dia, n_width), compare)


",True
419,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
420,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
421,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
422,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_init_variables,"@pytest.mark.parametrize('key', ['Do', 'mu', 'S', 'beta_corr'])
def test_init_variables(class_objects, key):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    result, x = obj._init_variables()
    assert key in result.keys()


",True
423,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_is_converged,"def test_is_converged(class_objects):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (1, 2)
    dia_init = np.array([[1, 3, 2], [3, 1, 2]])
    dia = 1
    compare = False
    assert obj._is_converged(ind, dia, dia_init) == compare


",True
424,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_screen_rain,"def test_screen_rain(class_objects, result):
    from cloudnetpy.products.drizzle import _screen_rain
    d_source, d_class, s_width = class_objects
    result = _screen_rain(result, d_class)
    compare = True
    for key in result.keys():
        if not utils.isscalar(result[key]):
            if not np.any(result[key][-1]) == np.any(np.array([0, 0, 0])):
                compare = False
    assert compare is True


",True
425,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
426,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
427,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_update_result_tables,"@pytest.mark.parametrize('key, value', [
    ('Do', 10),
    ('mu', -1),
    ('S', 93.7247943)])
def test_update_result_tables(class_objects, key, value):
    d_source, d_class, s_width = class_objects
    obj = DrizzleSolving(d_source, d_class, s_width)
    ind = (0, 1)
    dia = 10
    lut = (0, 1)
    obj._update_result_tables(ind, dia, lut)
    testing.assert_almost_equal(obj.params[key][ind], value)


",True
428,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_init_status,"@pytest.mark.parametrize(""value"", [0, 1])
def test_init_status(value):
    assert value in STATUS_OBJ._init_status()


",True
429,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_remove_good_profiles,"def test_remove_good_profiles():
    top_c = np.asarray([[1, 1, 0], [1, 0, 1]], dtype=bool)
    compare = np.asarray([[1, 1, 0], [0, 0, 0]], dtype=bool)
    assert_array_equal(STATUS_OBJ._remove_good_profiles(top_c), compare)


",True
430,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_update_status,"@pytest.mark.parametrize(""value"", [0, 1, 2])
def test_update_status(value):
    time = np.array([0])
    STATUS_OBJ._update_status(time)
    assert value in STATUS_OBJ.status


",True
431,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_update_status,"@pytest.mark.parametrize(""value"", [0, 1, 2])
def test_update_status(value):
    time = np.array([0])
    STATUS_OBJ._update_status(time)
    assert value in STATUS_OBJ.status


",True
432,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,TestReduceHeader,test_1,"def test_1(self):
        assert_array_equal(rpg._reduce_header(self.header),
                           {'a': 1, 'b': 2, 'c': 3})

    ",True
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_calc_lwc_change_rate,"@pytest.mark.parametrize(""t, p, res"", [
    (270, 85513, 0.001415)
])
def test_calc_lwc_change_rate(t, p, res):
    myres = atmos.calc_lwc_change_rate(t, p)
    assert_array_almost_equal(res, myres, decimal=4)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_saturation_vapor_pressure,"@pytest.mark.parametrize(""t, res"", [
    (300, 3533),
    (280, 991),
])
def test_saturation_vapor_pressure(t, res):
    """""" Unit tests for atmos.saturation_vapor_pressure(). """"""
    cnet = atmos.calc_saturation_vapor_pressure(t)
    assert_array_almost_equal(cnet, res, decimal=0)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_dew_point_temperature,"@pytest.mark.parametrize(""vapor_pressure, res"", [
    (500, 270.37),
    (300, 263.68),
    (200, 258.63),
    (100, 250.48),
])
def test_dew_point_temperature(vapor_pressure, res):
    """""" Unit tests for atmos.dew_point(). """"""
    assert_array_almost_equal(atmos.calc_dew_point_temperature(vapor_pressure), res, decimal=1)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_wet_bulb,"@pytest.mark.parametrize(""t, p, rh, res"", [
    (280, 101330, 0.2, 273.05),
    (250, 90000, 0.01, 248.73),
])
def test_wet_bulb(t, p, rh, res):
    """""" Unit tests for atmos.wet_bulb(). """"""
    model = {'temperature': np.array(t),
             'pressure': np.array(p),
             'rh': np.array(rh)}
    cnet = atmos.calc_wet_bulb_temperature(model)
    assert_array_almost_equal(cnet/10, res/10, decimal=1)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_find_cloud_bases,"def test_find_cloud_bases():
    x = np.array([[0, 1, 1, 1],
                  [0, 0, 1, 0],
                  [1, 0, 1, 0],
                  [1, 1, 0, 0],
                  [0, 0, 0, 1]])
    b = np.array([[0, 1, 0, 0],
                  [0, 0, 1, 0],
                  [1, 0, 1, 0],
                  [1, 0, 0, 0],
                  [0, 0, 0, 1]])
    assert_array_almost_equal(atmos.find_cloud_bases(x), b)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_find_cloud_tops,"def test_find_cloud_tops():
    x = np.array([[0, 1, 1, 1],
                  [0, 0, 1, 0],
                  [1, 0, 1, 0],
                  [1, 1, 0, 0],
                  [1, 1, 0, 1]])
    b = np.array([[0, 0, 0, 1],
                  [0, 0, 1, 0],
                  [1, 0, 1, 0],
                  [0, 1, 0, 0],
                  [0, 1, 0, 1]])
    assert_array_almost_equal(atmos.find_cloud_tops(x), b)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_atmos.py,,test_distribute_lwp_to_liquid_clouds,"def test_distribute_lwp_to_liquid_clouds():
    lwc = np.array([[1, 1, 1],
                    [2, 2, 2]])
    lwp = np.array([2, 8])
    result = atmos.distribute_lwp_to_liquid_clouds(lwc, lwp)
    correct = [[2/3, 2/3, 2/3], [16/6, 16/6, 16/6]]
    assert_array_equal(result, correct)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilo.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilo.py,,test_find_ceilo_model_jenoptik,"def test_find_ceilo_model_jenoptik():
    assert ceilo._find_ceilo_model('ceilo.nc') == 'chm15k'


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilo.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilo.py,,test_find_ceilo_model_vaisala,"@pytest.mark.parametrize(""fix, result"", [
    ('CL01', 'cl51'),
    ('CL02', 'cl31'),
    ('CT02', 'ct25k'),
])
def test_find_ceilo_model_vaisala(fix, result, tmpdir):
    file_name = '/'.join((str(tmpdir), 'ceilo.txt'))
    f = open(file_name, 'w')
    f.write('row\n')
    f.write('\n')
    f.write('row\n')
    f.write(f""-{fix}\n"")
    f.close()
    assert ceilo._find_ceilo_model(str(file_name)) == result
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_remove_noise,"def test_remove_noise():
    noise = 2
    beta = ma.array([[1, 2, 3],
                     [1, 2, 3]], mask=False)
    result = ma.array([[1, 2, 3],
                       [1, 2, 3]],
                      mask=[[1, 0, 0],
                            [1, 0, 0]])
    assert_array_equal(ceilometer._remove_noise(beta.mask, noise), result.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_calc_sigma_units,"def test_calc_sigma_units():
    time = np.linspace(0, 24, 721)  # 2 min resolution
    range_instru = np.arange(0, 1000, 5)  # 5 m resolution
    std_time, std_range = ceilometer._calc_sigma_units(time, range_instru)
    assert_array_almost_equal(std_time, 1)
    assert_array_almost_equal(std_range, 1)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_get_range_squared,"def test_get_range_squared():
    range_instru = np.array([1000, 2000, 3000])
    result = np.array([1, 4, 9])
    assert_array_equal(ceilometer._get_range_squared(range_instru), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_calc_range_uncorrected_beta,"def test_calc_range_uncorrected_beta():
    beta = np.array([[1, 2, 3],
                     [1, 2, 3]])
    range_squared = np.array([1, 2, 3])
    result = np.ones((2, 3))
    assert_array_equal(ceilometer._calc_range_uncorrected_beta(beta, range_squared),
                       result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_calc_range_corrected_beta,"def test_calc_range_corrected_beta():
    result = np.array([[1, 2, 3],
                       [1, 2, 3]])
    range_squared = np.array([1, 2, 3])
    beta = np.ones((2, 3))
    assert_array_equal(ceilometer._calc_range_corrected_beta(beta, range_squared),
                       result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_estimate_clouds_from_beta,"def test_estimate_clouds_from_beta():
    beta = ma.array([[0, 0, 1e-5, 0],
                     [0, 10, 1e-7, 0],
                     [0, 1e-4, 1e-3, 0]],
                    mask=[[0, 0, 0, 0],
                          [1, 1, 0, 0],
                          [0, 0, 0, 0]])

    cloud_ind = ([0, 1, 2, 2], [2, 1, 1, 2])
    cloud_beta = ([1e-5, 10, 1e-4, 1e-3])
    a, b, c = ceilometer._estimate_clouds_from_beta(beta)
    assert_array_equal(a, cloud_ind)
    assert_array_equal(b, cloud_beta)
    assert_array_equal(c, 1e-6)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_estimate_noise_from_top_gates,"def test_estimate_noise_from_top_gates():
    beta = ma.array([[0, 0.4, 0.1, 0.2],
                     [0, 0, 0, 0.1],
                     [0, 0.6, 1.2, 5.3]],
                    mask=[[0, 0, 0, 0],
                          [0, 0, 0, 0],
                          [1, 1, 1, 1]])
    noise_min = 0.001
    result = np.array([np.std([0.4, 0.1, 0.2]), np.std([0, 0, 0.1]), noise_min])
    assert_array_equal(ceilometer._estimate_noise_from_top_gates(beta, 3, noise_min),
                       result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_reset_low_values_above_saturation,"def test_reset_low_values_above_saturation():
    beta = ma.array([[0, 10, 1e-6, 3],
                     [0, 0, 0, 0.1],
                     [0, 0.6, 1.2, 1e-8]])
    noise = 1e-3
    saturated = [1, 0, 1]
    result = ma.array([[0, 10, 1e-6, 3],
                       [0, 0, 0, 0.1],
                       [0, 0.6, 1.2, 1e-8]],
                      mask=[[0, 0, 1, 0],
                            [0, 0, 0, 0],
                            [0, 0, 0, 1]])
    call = ceilometer._reset_low_values_above_saturation(beta, saturated, noise)
    assert_array_equal(call.data, result.data)
    assert_array_equal(call.mask, result.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_ceilometer.py,,test_find_saturated_profiles,"def test_find_saturated_profiles():
    obj = ceilometer.Ceilometer('ceilo.txt')
    obj.noise_params = (2, 0.25, 1, (1, 1))
    obj.backscatter = np.array([[0, 10, 1, 1.99],
                                [0, 10, 2.1, 1],
                                [0, 10, 1, 1]])
    result = [1, 0, 1]
    assert_array_equal(obj._find_saturated_profiles(), result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_find_aerosols,"def test_find_aerosols():
    obs = Obs()
    is_falling = np.array([[1, 0], [1, 0], [1, 0], [1, 0]])
    is_liquid = np.array([[1, 0], [0, 1], [1, 0], [0, 1]])
    result = np.array([[0, 1], [0, 0], [0, 0], [0, 0]])
    assert_array_equal(classify._find_aerosols(obs, is_falling, is_liquid), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_bits_to_integer,"def test_bits_to_integer():
    b0 = [[1, 0, 0, 0, 1, 1, 1, 1, 0, 1],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    b1 = [[0, 1, 0, 0, 1, 1, 1, 0, 1, 0],
          [1, 0, 1, 0, 0, 0, 0, 0, 0, 0]]
    b2 = [[0, 0, 1, 0, 0, 1, 1, 1, 0, 0],
          [1, 1, 1, 0, 0, 0, 0, 0, 0, 0]]
    b3 = [[0, 0, 0, 1, 0, 0, 1, 0, 1, 1],
          [0, 1, 1, 0, 0, 0, 0, 0, 0, 0]]
    bits = [b0, b1, b2, b3]
    re = [[1, 2, 4, 8, 3, 7, 15, 5, 10, 9],
          [6, 12, 14, 0, 0, 0, 0, 0, 0, 0]]
    assert_array_equal(classify._bits_to_integer(bits), re)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_2,"def test_2(self):
        self.z[:, 3] = 0.1
        result = np.ones(len(self.time))
        assert_array_equal(classify._find_rain(self.z, self.time), result)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_4,"def test_4(self):
        self.z[1440, 3] = 0.1
        result = np.ones(len(self.time))
        assert_array_equal(classify._find_rain(self.z, self.time,
                                               time_buffer=1500), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_find_clutter,"def test_find_clutter():
    is_rain = np.array([0, 0, 0, 1, 1], dtype=bool)
    v = np.ones((5, 12)) * 0.1
    v = ma.array(v)
    v[:, 5] = 0.04
    result = np.zeros(v.shape)
    result[:3, 5] = 1
    assert_array_equal(classify._find_clutter(v, is_rain), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_find_drizzle_and_falling,"def test_find_drizzle_and_falling():
    is_liquid = np.array([[0, 0, 1, 1, 0, 0],
                          [0, 0, 1, 0, 0, 0]])

    is_falling = np.array([[0, 1, 1, 1, 1, 0],
                           [0, 0, 1, 1, 1, 1]])

    is_freezing = np.array([[0, 0, 0, 1, 1, 1],
                            [0, 0, 0, 0, 1, 1]])

    result = ma.array([[0, 2, 0, 0, 1, 0],
                       [0, 0, 0, 2, 1, 1]],
                      mask=[[1, 0, 1, 1, 0, 1],
                            [1, 1, 1, 0, 0, 0]])

    assert_array_equal(classify._find_drizzle_and_falling(is_liquid, is_falling,
                                                          is_freezing), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_classify.py,,test_find_profiles_with_undetected_melting,"def test_find_profiles_with_undetected_melting():
    is_liquid = np.array([[0, 0, 1, 1, 0, 0],
                          [0, 0, 1, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0, 0]])

    is_falling = np.array([[0, 1, 1, 1, 1, 0],
                           [0, 0, 1, 1, 1, 1],
                           [1, 1, 1, 1, 1, 1],
                           [1, 1, 1, 1, 1, 1]])

    is_freezing = np.array([[0, 0, 0, 1, 1, 1],
                            [0, 0, 0, 0, 1, 1],
                            [0, 0, 0, 1, 1, 1],
                            [0, 0, 0, 0, 0, 0]])

    is_melting = np.array([[0, 0, 0, 1, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0]])

    result = np.array([0, 1, 1, 0])
    bits = [is_liquid, is_falling, is_freezing, is_melting]
    undetected = classify._find_profiles_with_undetected_melting(bits)
    assert_array_equal(undetected.data, result)

",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_get_data,"def test_get_data(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    name, units = 'test_name', 'm s-1'
    obj = CloudnetArray(test_var, name, units)
    assert_array_equal(obj.data, test_var[:])
    assert obj.name == name
    assert obj.units == units
    assert obj.data_type == 'f4'


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_lin2db,"def test_lin2db(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    name, units = 'test_name', 'm s-1'
    obj = CloudnetArray(test_var, name, units)
    obj.lin2db()
    assert obj.units == 'dB'
    assert_array_equal(obj.data, utils.lin2db(test_var[:]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_db2lin,"def test_db2lin(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    name, units = 'test_name', 'dB'
    obj = CloudnetArray(test_var, name, units)
    obj.db2lin()
    assert obj.units == ''
    assert_array_equal(obj.data, utils.db2lin(test_var[:]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_mask_indices,"def test_mask_indices(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    obj = CloudnetArray(test_var, 'test_name')
    obj.mask_indices([0, 1])
    result = ma.array([0, 1, 2, 3, 4], mask=[1, 1, 0, 0, 0])
    assert_array_equal(obj.data.data, result.data)
    assert_array_equal(obj.data.mask, result.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_fetch_attributes,"def test_fetch_attributes(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    obj = CloudnetArray(test_var, 'test_name')
    obj.attr1 = 'a'
    obj.attr2 = 'b'
    obj.attr3 = 'c'
    result = ['units', 'attr1', 'attr2', 'attr3']
    for attr in obj.fetch_attributes():
        assert attr in result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_set_attributes,"def test_set_attributes(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['time']
    obj = CloudnetArray(test_var, 'test_name')
    meta = MetaData(long_name='the long name', units='g m-3')
    obj.set_attributes(meta)
    for key, value in zip(['long_name', 'units'], ['the long name', 'g m-3']):
        assert hasattr(obj, key)
        assert getattr(obj, key) == value


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_rebin_data,"def test_rebin_data(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['2d_array']
    obj = CloudnetArray(test_var, 'test_name')
    time = np.array([1, 2, 3, 4, 5])
    time_new = np.array([2.1, 4.1])
    obj.rebin_data(time, time_new)
    result = np.array([[2.5, 2.5, 2.5, 1],
                       [4.5, 4.5, 4.5, 1]])
    assert_array_equal(obj.data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_cloudnetarray.py,,test_rebin_data_2d,"def test_rebin_data_2d(fake_nc_file):
    nc = netCDF4.Dataset(fake_nc_file)
    test_var = nc.variables['2d_array']
    obj = CloudnetArray(test_var, 'test_name')
    time = np.array([1, 2, 3, 4, 5])
    time_new = np.array([2.1, 4.1])
    height = np.array([1, 2, 3, 4])
    height_new = np.array([2.1, 4.1])
    obj.rebin_data(time, time_new, height, height_new)
    result = np.array([[2.5, 1],
                       [4.5, 1]])
    assert_array_equal(obj.data, result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_init_altitude,"def test_init_altitude(nc_file, file_metadata):
    obj = datasource.DataSource(nc_file)
    assert obj.altitude == file_metadata['altitude_km'] * 1000


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_getvar,"def test_getvar(nc_file, test_array):
    obj = datasource.DataSource(nc_file)
    assert_array_equal(obj.getvar('model_height'), test_array)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_getvar_missing,"def test_getvar_missing(nc_file):
    obj = datasource.DataSource(nc_file)
    with pytest.raises(RuntimeError):
        obj.getvar('not_existing_variable')


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_init_time,"def test_init_time(nc_file, test_array):
    obj = datasource.DataSource(nc_file)
    assert_array_equal(obj.time, test_array)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_close,"def test_close(nc_file):
    obj = datasource.DataSource(nc_file)
    assert obj.dataset.isopen() is True
    obj.close()
    assert obj.dataset.isopen() is False


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_km2m,"def test_km2m(nc_file, test_array):
    obj = datasource.DataSource(nc_file)
    assert_array_equal(obj.km2m(obj.dataset.variables['range']), test_array * 1000)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_m2km,"def test_m2km(nc_file, test_array):
    obj = datasource.DataSource(nc_file)
    assert_array_equal(obj.m2km(obj.dataset.variables['height']), test_array / 1000)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_datasource.py,,test_get_height_m,"def test_get_height_m(nc_file, test_array):
    obj = datasource.ProfileDataSource(nc_file)
    assert_array_equal(obj.height, test_array)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_convert_z_units,"def test_convert_z_units(drizzle_source_file):
    from cloudnetpy.utils import db2lin
    obj = DrizzleSource(drizzle_source_file)
    z = obj.getvar('Z') - 180
    compare = db2lin(z)
    testing.assert_array_almost_equal(obj._convert_z_units(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_read_mie_lut,"@pytest.mark.parametrize('key', [
    'Do', 'mu', 'S', 'lwf', 'termv', 'width', 'ray', 'v'])
def test_read_mie_lut(drizzle_source_file, key):
    obj = DrizzleSource(drizzle_source_file)
    assert key in obj.mie.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_get_mie_file,"def test_get_mie_file(drizzle_source_file):
    obj = DrizzleSource(drizzle_source_file)
    obj.module_path = ''.join((str(Path(__file__).parents[2]), '/cloudnetpy/products'))
    obj._get_mie_file()
    compare = '/'.join((obj.module_path, 'mie_lu_tables.nc'))
    testing.assert_equal(obj._get_mie_file(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_get_wl_band,"def test_get_wl_band(drizzle_source_file):
    obj = DrizzleSource(drizzle_source_file)
    compare = '35'
    testing.assert_equal(obj._get_wl_band(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_v_sigma,"def test_find_v_sigma(drizzle_cat_file):
    obj = DrizzleClassification(drizzle_cat_file)
    compare = np.array([[1, 0, 1], [1, 1, 1]], dtype=bool)
    testing.assert_array_almost_equal(obj._find_v_sigma(drizzle_cat_file), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_warm_liquid,"def test_find_warm_liquid(drizzle_cat_file):
    obj = DrizzleClassification(drizzle_cat_file)
    obj.category_bits['droplet'] = np.array([0, 0, 0, 1, 1, 1, 0], dtype=bool)
    obj.category_bits['cold'] = np.array([1, 1, 0, 0, 1, 0, 1], dtype=bool)
    compare = np.array([0, 0, 0, 1, 0, 1, 0], dtype=bool)
    testing.assert_array_almost_equal(obj._find_warm_liquid(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_drizzle,"@pytest.mark.parametrize(""is_rain, falling, droplet, cold, melting, insect, ""
                         ""radar, lidar, clutter, molecular, attenuated, v_sigma"", [
                             (np.array([0, 0, 0, 0]), np.array([1, 1, 1, 1]),
                              np.array([0, 0, 0, 1]), np.array([0, 0, 0, 1]),
                              np.array([0, 0, 0, 1]), np.array([0, 0, 0, 0]),
                              np.array([1, 1, 1, 1]), np.array([1, 1, 1, 1]),
                              np.array([0, 0, 0, 1]), np.array([0, 0, 0, 1]),
                              np.array([0, 0, 0, 1]), np.array([1, 1, 0, 1]))])
def test_find_drizzle(drizzle_cat_file, is_rain, falling, droplet, cold, melting,
                      insect, radar, lidar, clutter, molecular, attenuated, v_sigma):
    obj = DrizzleClassification(drizzle_cat_file)
    obj.is_rain = is_rain
    obj.category_bits['falling'] = falling
    obj.category_bits['droplet'] = droplet
    obj.category_bits['cold'] = cold
    obj.category_bits['melting'] = melting
    obj.category_bits['insect'] = insect
    obj.quality_bits['radar'] = radar
    obj.quality_bits['lidar'] = lidar
    obj.quality_bits['clutter'] = clutter
    obj.quality_bits['molecular'] = molecular
    obj.quality_bits['attenuated'] = attenuated
    obj.is_v_sigma = v_sigma
    compare = np.array([[1, 1, 0, 0],
                        [1, 1, 0, 0],
                        [1, 1, 0, 0],
                        [1, 1, 0, 0]])
    testing.assert_array_almost_equal(obj._find_drizzle(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_would_be_drizzle,"@pytest.mark.parametrize(""is_rain, warm, falling, melting, insect, ""
                         ""radar, clutter, molecular"", [
                             (np.array([0, 0, 0, 0]), np.array([1, 1, 1, 1]),
                              np.array([1, 1, 1, 0]), np.array([0, 0, 0, 1]),
                              np.array([0, 0, 0, 1]), np.array([0, 1, 1, 0]),
                              np.array([0, 0, 0, 1]), np.array([0, 0, 0, 1]))])
def test_find_would_be_drizzle(drizzle_cat_file, is_rain, warm, falling, melting,
                               insect, radar, clutter, molecular):
    obj = DrizzleClassification(drizzle_cat_file)
    obj.is_rain = is_rain
    obj.warm_liquid = warm
    obj.category_bits['falling'] = falling
    obj.category_bits['melting'] = melting
    obj.category_bits['insect'] = insect
    obj.quality_bits['radar'] = radar
    obj.quality_bits['clutter'] = clutter
    obj.quality_bits['molecular'] = molecular
    compare = np.array([[0, 1, 1, 0],
                        [0, 1, 1, 0],
                        [0, 1, 1, 0],
                        [0, 1, 1, 0]])
    testing.assert_array_almost_equal(obj._find_would_be_drizzle(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_cold_rain,"def test_find_cold_rain(drizzle_cat_file):
    obj = DrizzleClassification(drizzle_cat_file)
    compare = np.array([0, 1])
    testing.assert_array_almost_equal(obj._find_cold_rain(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calculate_spectral_width,"def test_calculate_spectral_width(drizzle_cat_file):
    obj = CorrectSpectralWidth(drizzle_cat_file)
    width = netCDF4.Dataset(drizzle_cat_file).variables['width'][:]
    v_sigma = netCDF4.Dataset(drizzle_cat_file).variables['v_sigma'][:]
    factor = obj._calc_v_sigma_factor()
    compare = width - factor * v_sigma
    testing.assert_almost_equal(obj._calculate_spectral_width(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_beam_divergence,"def test_calc_beam_divergence(drizzle_cat_file):
    obj = CorrectSpectralWidth(drizzle_cat_file)
    height = netCDF4.Dataset(drizzle_cat_file).variables['height'][:]
    compare = height * np.deg2rad(0.5)
    testing.assert_almost_equal(obj._calc_beam_divergence(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_v_sigma_factor,"def test_calc_v_sigma_factor(drizzle_cat_file):
    from cloudnetpy.utils import l2norm
    obj = CorrectSpectralWidth(drizzle_cat_file)
    height = netCDF4.Dataset(drizzle_cat_file).variables['height'][:]
    uwind = netCDF4.Dataset(drizzle_cat_file).variables['uwind'][:]
    vwind = netCDF4.Dataset(drizzle_cat_file).variables['vwind'][:]
    beam = height * np.deg2rad(0.5)
    wind = l2norm(uwind, vwind)
    a_wind = (wind + beam) ** (2 / 3)
    s_wind = (30 * wind + beam) ** (2 / 3)
    compare = a_wind / (s_wind - a_wind)
    testing.assert_array_almost_equal(obj._calc_v_sigma_factor(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_calc_horizontal_wind,"def test_calc_horizontal_wind(drizzle_cat_file):
    from cloudnetpy.utils import l2norm
    obj = CorrectSpectralWidth(drizzle_cat_file)
    uwind = netCDF4.Dataset(drizzle_cat_file).variables['uwind'][:]
    vwind = netCDF4.Dataset(drizzle_cat_file).variables['vwind'][:]
    compare = l2norm(uwind, vwind)
    testing.assert_array_almost_equal(obj._calc_horizontal_wind(), compare)


# Create objects for all coming tests witch uses these classes
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_retrieval_below_melting,"@pytest.mark.parametrize(""value"", [
    0, 1, 2])
def test_find_retrieval_below_melting(ret_status, value):
    obj = ret_status
    obj.retrieval_status = np.array([[0, 0, 1],
                                     [1, 1, 0],
                                     [0, 1, 1]])
    obj.classification.cold_rain = np.array([0, 1, 1])
    obj.classification.drizzle = np.array([[1, 1, 0],
                                           [0, 1, 1],
                                           [1, 0, 0]])
    obj._find_retrieval_below_melting()
    assert value in obj.retrieval_status


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_find_retrieval_in_warm_liquid,"@pytest.mark.parametrize(""value"", [
    0, 1, 2, 3, 4])
def test_find_retrieval_in_warm_liquid(ret_status, value):
    obj = ret_status
    obj.retrieval_status = np.array([[0, 0, 1],
                                     [1, 2, 3],
                                     [2, 1, 1]])
    obj.classification.warm_liquid = np.array([[1, 0, 0],
                                               [0, 0, 1],
                                               [1, 0, 1]])
    obj._find_retrieval_in_warm_liquid()
    assert value in obj.retrieval_status


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_get_retrieval_status,"@pytest.mark.parametrize(""value"", [
    0, 1, 2, 3, 4, 5])
def test_get_retrieval_status(ret_status, value):
    obj = ret_status
    obj.retrieval_status = np.array([[0, 0, 1],
                                     [1, 1, 0],
                                     [0, 1, 1]])
    obj.classification.cold_rain = np.array([0, 1, 0])
    obj.classification.drizzle = np.array([[1, 1, 0],
                                           [0, 1, 1],
                                           [1, 0, 0]])
    obj.classification.warm_liquid = np.array([[1, 1, 0],
                                               [0, 0, 1],
                                               [1, 0, 1]])
    obj.classification.would_be_drizzle = np.array([[0, 1, 0],
                                                    [0, 0, 1],
                                                    [0, 0, 0]])
    obj.classification.is_rain = np.array([1, 0, 0])
    obj._get_retrieval_status()
    assert value in obj.retrieval_status


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_db2lin,"@pytest.mark.parametrize(""x, result"", [
    (-1000, -1),
    (-100, -0.99999),
    (-10, -0.9),
    (-1, np.exp(-1 / 10 * np.log(10)) - 1),
])
def test_db2lin(x, result):
    testing.assert_array_almost_equal(drizzle.db2lin(x), result, decimal=5)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle.py,,test_db2lin_raise,"def test_db2lin_raise():
    with pytest.raises(ValueError):
        drizzle.db2lin(150)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_get_drizzle_indices,"@pytest.mark.parametrize('key, value', [
    ('drizzle', [False, True, True, True]),
    ('small', [False, True, False, False]),
    ('tiny', [False, False, False, True])])
def test_get_drizzle_indices(key, value):
    dia = np.array([-1, 2 * 1e-5, 1, 1e-6])
    d = de._get_drizzle_indices(dia)
    testing.assert_array_equal(d[key], value)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_calc_parameter_errors,"@pytest.mark.parametrize('key', [
    'Do_error', 'drizzle_lwc_error', 'drizzle_lwf_error', 'S_error'])
def test_calc_parameter_errors(key):
    x = de._calc_parameter_errors(DRIZZLE_INDICES, ERROR_INPUT)
    assert key in x.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_calc_parameter_biases,"@pytest.mark.parametrize('key', [
    'Do_bias', 'drizzle_lwc_bias', 'drizzle_lwf_bias'])
def test_calc_parameter_biases(key):
    x = de._calc_parameter_biases(BIAS_INPUT)
    assert key in x.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_add_supplementary_errors,"@pytest.mark.parametrize('key', [
    'drizzle_N_error', 'v_drizzle_error', 'mu_error'])
def test_add_supplementary_errors(results, key):
    x = de._add_supplementary_errors(results, DRIZZLE_INDICES, ERROR_INPUT)
    assert key in x.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_calc_v_error,"def test_calc_v_error(results):
    results['Do_error'] = np.array([[2, 2, 2], [2, 2, 2]])
    x = de._add_supplementary_errors(results, DRIZZLE_INDICES, ERROR_INPUT)
    testing.assert_almost_equal(x['v_drizzle_error'][DRIZZLE_INDICES['tiny']], 4)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_add_supplementary_biases,"@pytest.mark.parametrize('key', [
    'drizzle_N_bias', 'v_drizzle_bias'])
def test_add_supplementary_biases(results, key):
    x = de._add_supplementary_biases(results, BIAS_INPUT)
    assert key in x.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_calc_error,"def test_calc_error():
    from cloudnetpy.utils import l2norm_weighted
    compare = l2norm_weighted(ERROR_INPUT, 1, 1)
    testing.assert_almost_equal(de._calc_error(1, 1, ERROR_INPUT), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_stack_errors,"def test_stack_errors():
    DRIZZLE_INDICES['drizzle'] = np.array([[0, 1, 1], [1, 1, 0]], dtype=bool)
    compare = np.ma.array(ERROR_INPUT[0], mask=[[1, 0, 0], [0, 0, 1]])
    x = de._stack_errors(ERROR_INPUT[0], DRIZZLE_INDICES)
    testing.assert_array_almost_equal(x, compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_db2lin,"@pytest.mark.parametrize(""x, result"", [
    (-1000, -1),
    (-100, -0.99999),
    (-10, -0.9),
    (-1, np.exp(-1 / 10 * np.log(10)) - 1)])
def test_db2lin(x, result):
    testing.assert_array_almost_equal(de.db2lin(x), result, decimal=5)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_db2lin_raise,"def test_db2lin_raise():
    with pytest.raises(ValueError):
        de.db2lin(150)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_lin2db,"@pytest.mark.parametrize(""x, result"", [
    (1e6, 60),
    (1e5, 50),
    (1e4, 40)])
def test_lin2db(x, result):
    testing.assert_array_almost_equal(de.lin2db(x), result, decimal=3)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_drizzle_error.py,,test_lin2db_raise,"def test_lin2db_raise():
    with pytest.raises(ValueError):
        de.lin2db(-1)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_base_0,"def test_ind_base_0(self):
        assert droplet.ind_base(self.dx, self.peak_position, self.search_range,
                                self.threshold) == 4

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_base_1,"def test_ind_base_1(self):
        search_range = 100
        assert droplet.ind_base(self.dx, self.peak_position, search_range,
                                self.threshold) == 4

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_base_2,"def test_ind_base_2(self):
        huge_threshold = 5000
        assert droplet.ind_base(self.dx, self.peak_position, self.search_range,
                                huge_threshold) == 1

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_base_3,"def test_ind_base_3(self):
        small_threshold = 1.01
        assert droplet.ind_base(self.dx, self.peak_position, self.search_range,
                                small_threshold) == 4

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_base_4,"def test_ind_base_4(self):
        mx = ma.masked_array(self.x, mask=[1, 0, 1, 1, 1, 0, 0])
        dx = ma.diff(mx).filled(0)
        with pytest.raises(IndexError):
            droplet.ind_base(dx, self.peak_position, self.search_range,
                             self.threshold)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_top_0,"def test_ind_top_0(self):
        assert droplet.ind_top(self.dx, self.peak_position, self.n_prof,
                               self.search_range, self.threshold) == 3

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_top_1,"def test_ind_top_1(self):
        search_range = 100
        assert droplet.ind_top(self.dx, self.peak_position, self.n_prof,
                               search_range, self.threshold) == 3

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_top_2,"def test_ind_top_2(self):
        huge_threshold = 5000
        assert droplet.ind_top(self.dx, self.peak_position, self.n_prof,
                               self.search_range, huge_threshold) == 7

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_top_3,"def test_ind_top_3(self):
        small_threshold = 1.01
        assert droplet.ind_top(self.dx, self.peak_position, self.n_prof,
                               self.search_range, small_threshold) == 3

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_ind_top_4,"def test_ind_top_4(self):
        mx = ma.masked_array(self.x, mask=[1, 0, 1, 0, 1, 0, 1, 0])
        dx = ma.diff(mx).filled(0)
        with pytest.raises(IndexError):
            droplet.ind_top(dx, self.peak_position, self.n_prof,
                            self.search_range, self.threshold)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_find_strong_peaks,"def test_find_strong_peaks():
    data = np.array([[0, 0, 100, 1e6, 100, 0, 0],
                     [0, 100, 1e6, 100, 0, 0, 0]])
    threshold = 1e3
    peaks = droplet._find_strong_peaks(data, threshold)
    assert_array_equal(peaks, ([0, 1], [3, 2]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_intepolate_lwp,"def test_intepolate_lwp():
    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_find_ind_above_top,"@pytest.mark.parametrize(""is_freezing, top_above, result"", [
    ([0, 0, 1, 1, 1, 1], 2, 4),
    ([1, 1, 1, 1, 1, 1], 2, 2),
    ([1, 1, 1, 1, 1, 1], 10, 5),
])
def test_find_ind_above_top(is_freezing, top_above, result):
    assert droplet._find_ind_above_top(is_freezing, top_above) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_correct_liquid_top,"def test_correct_liquid_top():
    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_droplet.py,,test_find_liquid,"def test_find_liquid():
    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_find_falling_from_radar,"def test_find_falling_from_radar():
    obs = Obs()
    is_insects = np.array([[0, 1, 0, 1, 0, 0],
                           [0, 0, 1, 1, 0, 0]])
    result = np.array([[0, 0, 1, 0, 1, 1],
                       [0, 0, 0, 0, 1, 1]])
    assert_array_equal(falling._find_falling_from_radar(obs, is_insects), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_find_falling_from_lidar,"def test_find_falling_from_lidar():
    obs = Obs()
    result = np.array([[0, 0, 1, 0, 0, 1],
                       [0, 0, 0, 0, 0, 0]])
    is_liquid = np.array([[0, 0, 0, 0, 0, 0],
                          [0, 0, 0, 1, 0, 0]])
    assert_array_equal(falling._find_falling_from_lidar(obs, is_liquid), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_find_cold_aerosols,"def test_find_cold_aerosols():
    obs = Obs()
    result = np.array([[0, 0, 0, 0, 1, 1],
                       [0, 0, 0, 0, 1, 0]])
    is_liquid = np.array([[0, 1, 1, 0, 0, 0],
                          [0, 1, 0, 1, 0, 0]])
    assert_array_equal(falling._find_cold_aerosols(obs, is_liquid), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_is_z_missing_above_liquid,"@pytest.mark.parametrize(""z, ind_top, result"", [
    (ma.masked_array([1, 1, 1, 1], mask=[0, 0, 0, 0]), 2, False),
    (ma.masked_array([1, 1, 1, 1], mask=[0, 0, 0, 0]), 2, False),
    (ma.masked_array([1, 1, 1, 1], mask=[0, 0, 0, 0]), 3, False),
    (ma.masked_array([1, 1, 1, 1], mask=[1, 1, 1, 1]), 3, False),
    (ma.masked_array([1, 1, 1, 1], mask=[0, 0, 0, 1]), 2, True),
])
def test_is_z_missing_above_liquid(z, ind_top, result):
    assert falling._is_z_missing_above_liquid(z, ind_top) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_is_z_increasing,"@pytest.mark.parametrize(""z, ind_base, ind_top, result"", [
    (ma.masked_array([1, 1, 1, 1], mask=[0, 0, 0, 0]), 1, 2, False),
    (ma.masked_array([1, 1, 2, 1], mask=[0, 0, 0, 0]), 1, 2, True),
    (ma.masked_array([1, 2, 1, 1], mask=[0, 0, 0, 0]), 1, 2, False),
    (ma.masked_array([1, 1, 2, 3], mask=[0, 0, 1, 0]), 1, 3, True),
    (ma.masked_array([1, 2, 3, 4], mask=[0, 1, 1, 1]), 1, 3, False),
])
def test_is_z_increasing(z, ind_top, ind_base, result):
    assert falling._is_z_increasing(z, ind_base, ind_top) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_falling.py,,test_fix_liquid_dominated_radar,"def test_fix_liquid_dominated_radar():
    obs = Obs()

    is_liquid = np.array([[1, 1, 1, 0, 0, 0],
                          [0, 0, 0, 1, 1, 0]])

    falling_from_radar = np.array([[0, 1, 0, 0, 1, 1],
                                   [0, 0, 0, 0, 1, 1]])

    result = np.array([[0, 0, 0, 0, 1, 1],
                       [0, 0, 0, 0, 1, 1]])

    fixed = falling._fix_liquid_dominated_radar(obs, falling_from_radar, is_liquid)

    assert_array_equal(fixed, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,,test_find_t0_alt,"def test_find_t0_alt():
    temperature = np.array([[290, 280, T0, 260],
                           [320, T0+10, T0-10, 220],
                           [240, 230, 220, 210]])
    height = np.array([10, 20, 30, 40])
    res = [30, 25, 10]
    cnet = freezing._find_t0_alt(temperature, height)
    assert_array_equal(cnet, res)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,,test_find_mean_melting_alt,"def test_find_mean_melting_alt():
    obs = Obs()
    obs.time = np.arange(2)
    is_melting = np.array([[0, 0, 1, 1, 0, 0],
                           [0, 0, 1, 1, 1, 0]], dtype=bool)
    result = np.array([2.5, 3])
    assert_array_equal(freezing._find_mean_melting_alt(obs, is_melting), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_freezing.py,,test_find_freezing_region,"def test_find_freezing_region():
    obs = Obs()
    is_melting = np.array([[0, 0, 1, 0, 0, 0],
                           [0, 0, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 0],
                           [1, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0]], dtype=bool)

    result = np.array([[0, 0, 0, 1, 1, 1],
                       [0, 0, 0, 1, 1, 1],
                       [0, 0, 0, 0, 1, 1],
                       [0, 0, 0, 0, 0, 1],
                       [0, 1, 1, 1, 1, 1],
                       [0, 1, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 1, 1, 1, 1],
                       [0, 0, 0, 1, 1, 1]], dtype=bool)

    assert_array_equal(freezing.find_freezing_region(obs, is_melting), result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_calc_prob_from_ldr,"def test_calc_prob_from_ldr():
    prob = {'z': 0.5, 'temp_loose': 0.5, 'ldr': 0.5}
    assert insects._calc_prob_from_ldr(prob) == 0.5**3


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_calc_prob_from_all,"def test_calc_prob_from_all():
    prob = {'z': 0.5, 'temp_strict': 0.5, 'v': 0.5, 'width': 0.5}
    assert insects._calc_prob_from_all(prob) == 0.5**4


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_adjust_for_radar,"def test_adjust_for_radar():
    prob = {'lwp': np.array([0.5, 0.5, 0.5, 0.5])}
    prob_from_others = np.array([1., 1., 1., 1.])
    obs = Obs()
    assert_array_equal(insects._adjust_for_radar(obs, prob, prob_from_others),
                       np.array([0.5, 0.5, 0.5, 0.5]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_fill_missing_pixels,"def test_fill_missing_pixels():
    prob_from_ldr = np.array([[0., 0., 0., 1., 1., 0., 0.],
                              [0., 0., 0., 1., 1., 0., 0.]])
    prob_from_others = np.array([[.5, .5, .5, .5, .5, .5, .5],
                                 [.5, .5, .5, .5, .5, .5, .5]])
    result = np.array([[0.5, 0.5, 0.5, 1., 1., 0.5, 0.5],
                      [0.5, 0.5, 0.5, 1., 1., 0.5, 0.5]])
    assert_array_equal(insects._fill_missing_pixels(prob_from_ldr, prob_from_others),
                       result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_get_smoothed_v,"def test_get_smoothed_v():
    obs = Obs()
    result = ma.array([[0, 1, 1, 0], [0, 1, -99, 0]],
                      mask=[[0, 0, 0, 0], [1, 0, 1, 0]])
    assert_array_equal(insects._get_smoothed_v(obs, sigma=(0, 0)), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_insects.py,,test_screen_insets,"def test_screen_insets():
    obs = Obs()
    insect_prob = np.ones((3, 4))
    insect_prob_no_ldr = np.ones((3, 4)) * 0.5
    melting_layer = np.array([[0, 0, 1, 0],
                              [0, 0, 0, 0],
                              [0, 0, 0, 0]])
    liquid_layers = np.array([[0, 0, 1, 0],
                              [0, 1, 1, 0],
                              [0, 0, 0, 0]])
    result = np.array([[1, 1, 0, 0],
                       [1, 0, 0, 0],
                       [0, 0, 0, 0]])
    screened_prob = insects._screen_insects(insect_prob, insect_prob_no_ldr,
                                            melting_layer, liquid_layers, obs)
    assert_array_equal(screened_prob, result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_wl_band,"def test_iwc_wl_band(iwc_source_file):
    obj = IwcSource(iwc_source_file)
    compare = 0
    assert compare == obj.wl_band


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_spec_liq_atten,"def test_iwc_spec_liq_atten(iwc_source_file):
    obj = IwcSource(iwc_source_file)
    compare = 1
    assert compare == obj.spec_liq_atten


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_z_factor,"def test_iwc_z_factor(iwc_source_file):
    obj = IwcSource(iwc_source_file)
    Coefficients = namedtuple('Coefficients', 'K2liquid0')
    obj.coeffs = Coefficients(10)
    compare = -0.25
    assert compare == round(obj.z_factor, 3)


# TODO: Might not be the best test for this
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_coeffs,"@pytest.mark.parametrize(""result"", [
    'K2liquid0', 'ZT', 'T', 'Z', 'c'])
def test_iwc_coeffs(result, iwc_source_file):
    obj = IwcSource(iwc_source_file)
    assert result in obj.coeffs._fields


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_temperature,"def test_iwc_temperature(iwc_source_file):
    # TODO: test with different model grid
    obj = IwcSource(iwc_source_file)
    compare = np.array([[8.85, 6.85, 4.85],
                       [12.85, 10.85, 8.85],
                      [10.85, 8.85, 6.85]])
    testing.assert_almost_equal(compare, obj.temperature)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_iwc_mean_temperature,"def test_iwc_mean_temperature(iwc_source_file):
    # TODO: test with different model grid
    obj = IwcSource(iwc_source_file)
    compare = np.array([10.85, 8.85, 6.85])
    testing.assert_almost_equal(compare, obj.mean_temperature)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_ice,"@pytest.mark.parametrize(""falling, cold, melting, insect, result"", [
    (np.array([1, 1, 1, 1, 1, 1, 1]), np.array([0, 1, 0, 1, 0, 1, 0]),
     np.array([1, 1, 1, 0, 0, 0, 0]), np.array([0, 0, 0, 0, 0, 0, 0]),
     np.array([0, 0, 0, 1, 0, 1, 0]))])
def test_find_ice(falling, cold, melting,  insect, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.category_bits['falling'] = falling
    obj.category_bits['cold'] = cold
    obj.category_bits['melting'] = melting
    obj.category_bits['insect'] = insect
    testing.assert_array_equal(obj._find_ice().data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_would_be_ice,"@pytest.mark.parametrize(""falling, cold, melting, insect, result"", [
    (np.array([1, 1, 1, 1, 1, 1, 1]), np.array([0, 1, 0, 1, 0, 1, 0]),
     np.array([1, 1, 1, 0, 0, 0, 0]), np.array([0, 0, 0, 0, 0, 0, 0]),
     np.array([1, 1, 1, 0, 1, 0, 1]))])
def test_find_would_be_ice(falling, cold, melting,  insect, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.category_bits['falling'] = falling
    obj.category_bits['cold'] = cold
    obj.category_bits['melting'] = melting
    obj.category_bits['insect'] = insect
    testing.assert_array_equal(obj._find_would_be_ice().data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_corrected_ice,"@pytest.mark.parametrize(""is_ice, attenuated, corrected, result"", [
    (np.array([0, 0, 0, 1, 0, 1, 0]), np.array([1, 1, 0, 1, 0, 0, 1]),
     np.array([0, 0, 1, 1, 0, 1, 1]), np.array([0, 0, 0, 1, 0, 0, 0]))])
def test_find_corrected_ice(is_ice, attenuated, corrected, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.quality_bits['attenuated'] = attenuated
    obj.quality_bits['corrected'] = corrected
    obj.is_ice = is_ice
    testing.assert_array_equal(obj._find_corrected_ice().data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_uncorrected_ice,"@pytest.mark.parametrize(""is_ice, attenuated, corrected, result"", [
    (np.array([0, 0, 0, 1, 0, 1, 0]), np.array([1, 1, 0, 1, 0, 1, 1]),
     np.array([0, 0, 1, 0, 0, 0, 1]), np.array([0, 0, 0, 1, 0, 1, 0]))])
def test_find_uncorrected_ice(is_ice, attenuated, corrected, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.quality_bits['attenuated'] = attenuated
    obj.quality_bits['corrected'] = corrected
    obj.is_ice = is_ice
    testing.assert_array_equal(obj._find_uncorrected_ice().data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_ice_above_rain,"@pytest.mark.parametrize(""is_ice, is_rain, result"", [
    (np.array([1, 0, 1]), np.array([0, 0, 1]),
     np.array([[0, 0, 0], [0, 0, 0], [1, 0, 1]]))])
def test_find_ice_above_rain(is_ice, is_rain, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.is_ice = is_ice
    obj.is_rain = is_rain
    testing.assert_array_equal(obj._find_ice_above_rain().data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_find_cold_above_rain,"@pytest.mark.parametrize(""cold, is_rain, melting, result"", [
    (np.array([1, 0, 1]), np.array([0, 0, 1]), np.array([1, 1, 0]),
     np.array([[0, 0, 0], [0, 0, 0], [0, 0, 1]]))])
def test_find_cold_above_rain(cold, is_rain, melting, result, iwc_cat_file):
    obj = _IceClassification(iwc_cat_file)
    obj.category_bits['cold'] = cold
    obj.category_bits['melting'] = melting
    obj.is_rain = is_rain
    testing.assert_array_equal(obj._find_cold_above_rain().data, result)


# TODO: Think also values as some point for tests below

""""""
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_z_to_iwc,"def test_z_to_iwc(iwc_source_file):
    from cloudnetpy.products.iwc import _z_to_iwc
    data = IwcSource(iwc_source_file)
    data.temperature = np.array([1, 2, 2])
    data.mean_temperature = np.array([1.5])
    data.z_factor = np.array([1, 2, 3])
    Coefficients = namedtuple('Coefficients', 'K2liquid0 ZT T Z c')
    data.coeffs = Coefficients(0.1, 0.1, 0.2, 0.05, 0)
    obj = _z_to_iwc(data, 'Z')
    # TODO: Also a bit complicated, continue later
    assert True
""""""


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_append_iwc_including_rain,"def test_append_iwc_including_rain(iwc_source_file, iwc_cat_file):
    from cloudnetpy.products.iwc import _append_iwc_including_rain
    ice_",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_append_iwc,"def test_append_iwc(iwc_source_file, iwc_cat_file):
    from cloudnetpy.products.iwc import _append_iwc
    ice_",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_append_sensitivity,"def test_append_sensitivity(iwc_source_file):
    from cloudnetpy.products.iwc import _append_iwc_sensitivity
    ice_data = IwcSource(iwc_source_file)
    ice_data.mean_temperature = np.array([1.5])
    _append_iwc_sensitivity(ice_data)
    assert 'iwc_sensitivity' in ice_data.data.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_append_bias,"def test_append_bias(iwc_source_file):
    from cloudnetpy.products.iwc import _append_iwc_bias
    ice_data = IwcSource(iwc_source_file)
    _append_iwc_bias(ice_data)
    assert 'iwc_bias' in ice_data.data.keys()


""""""
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_iwc.py,,test_append_iwc_status,"def test_append_iwc_status(iwc_source_file, iwc_cat_file):
    from cloudnetpy.products.iwc import _append_iwc_status
    ice_",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_calc_range,"def test_calc_range(fake_jenoptik_file):
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    assert_array_equal(obj._calc_range(), [1500, 2500, 3500, 4500])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_convert_time,"def test_convert_time(fake_jenoptik_file):
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    assert_array_equal(obj._convert_time(), [1, 2, 3])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_convert_time_error,"def test_convert_time_error(fake_jenoptik_file):
    root_grp = netCDF4.Dataset(fake_jenoptik_file, ""a"")
    root_grp.variables['time'][:] = np.array([1, 0, 3])
    root_grp.close()
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    with pytest.raises(RuntimeError):
        obj._convert_time()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_read_date,"def test_read_date(fake_jenoptik_file):
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    assert_array_equal(obj._read_date(), ('2019', '5', '23'))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_read_metadata,"def test_read_metadata(fake_jenoptik_file):
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    assert obj._read_metadata()['tilt_angle'] == 2


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_jenoptik.py,,test_get_nn,"def test_get_nn(fake_jenoptik_file):
    obj = jenoptik.JenoptikCeilo(fake_jenoptik_file, site_name)
    nn1 = obj._get_nn()
    assert np.all(nn1.data < 1.1)
    assert np.all(nn1.data > 0.9)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lidar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lidar.py,,test_init,"def test_init(fake_lidar_file):
    obj = Lidar(fake_lidar_file)
    assert obj.data['lidar_wavelength'].data == WAVELENGTH
    assert obj.data['beta_bias'].data == 3
    assert obj.data['beta_error'].data == 0.5


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lidar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lidar.py,,test_rebin,"def test_rebin(fake_lidar_file):
    obj = Lidar(fake_lidar_file)
    time_new = np.array([1.1, 2.1])
    height_new = np.array([500, 1500])
    obj.rebin_to_grid(time_new, height_new)
    result = np.array([[1.5, 2.5],
                       [1.5, 2.5]])
    assert_array_equal(obj.data['beta'].data, result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_get_atmosphere_t,"def test_get_atmosphere_t(lwc_source_file):
    obj = LwcSource(lwc_source_file)
    compare = np.array([[282, 280, 278],
                        [286, 284, 282],
                        [284, 282, 280]])
    assert_array_equal(compare, obj.atmosphere[0])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_get_atmosphere_p,"def test_get_atmosphere_p(lwc_source_file):
    obj = LwcSource(lwc_source_file)
    compare = np.array([[1010, 1000, 990],
                        [1020, 1010, 1000],
                        [1030, 1020, 1010]])
    assert_array_equal(compare, obj.atmosphere[-1])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_get_liquid,"@pytest.mark.parametrize(""value"", [0, 1])
def test_get_liquid(value):
    assert value in LWC_OBJ.is_liquid


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_init_lwc_adiabatic,"def test_init_lwc_adiabatic(lwc_source_file):
    lwc_source = LwcSourceObj()
    compare = atmos.fill_clouds_with_lwc_dz(lwc_source.atmosphere,
                                            LWC_OBJ.is_liquid)
    compare[0, 0] *= 10
    compare[0, 2] *= 10
    compare[1, 1] *= 10
    compare[1, 2] *= 20
    assert_array_almost_equal(LWC_OBJ._init_lwc_adiabatic(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_screen_rain_lwc,"def test_screen_rain_lwc():
    compare = np.ma.array([[5, 1, 2],
                           [3, 6, 0]],
                          mask=[[0, 0, 0],
                                [1, 1, 1]])
    assert_array_equal(compare.mask, LWC_OBJ.lwc.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_get_echo,"@pytest.mark.parametrize(""key"", ['radar', 'lidar'])
def test_get_echo(key):
    assert key in STATUS_OBJ.echo.keys()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_adjust_lwc,"@pytest.mark.parametrize(""value"", [0, 1, 2, 3])
def test_adjust_lwc(value):
    time = 0
    base = 0
    STATUS_OBJ.status = np.array([[1, 0, 2], [0, 0, 2]])
    STATUS_OBJ._adjust_lwc(time, base)
    assert value in STATUS_OBJ.status


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_has_converged,"def test_has_converged():
    ind = 1
    assert STATUS_OBJ._has_converged(ind) is True


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_out_of_bound,"def test_out_of_bound():
    ind = 2
    assert STATUS_OBJ._out_of_bound(ind) is True


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_find_adjustable_clouds,"def test_find_adjustable_clouds():
    assert 1 not in STATUS_OBJ._find_adjustable_clouds()


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_find_topmost_clouds,"def test_find_topmost_clouds():
    compare = np.asarray([[0, 0, 1], [0, 1, 1]], dtype=bool)
    assert_array_equal(STATUS_OBJ._find_topmost_clouds(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_find_echo_combinations_in_liquid,"def test_find_echo_combinations_in_liquid():
    STATUS_OBJ.echo['lidar'] = np.array([[0, 1, 0], [1, 1, 0]])
    STATUS_OBJ.echo['radar'] = np.array([[0, 0, 0], [0, 1, 1]])
    STATUS_OBJ.is_liquid = np.array([[1, 1, 1], [0, 1, 1]])
    compare = np.array([[0, 1, 0], [0, 3, 2]])
    assert_array_equal(STATUS_OBJ._find_echo_combinations_in_liquid(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_find_lidar_only_clouds,"def test_find_lidar_only_clouds():
    inds = np.array([[1, 0, 0], [0, 1, 3]])
    compare = np.array([True, False])
    assert_array_equal(STATUS_OBJ._find_lidar_only_clouds(inds), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_find_lwp_difference,"def test_find_lwp_difference():
    STATUS_OBJ.lwc_adiabatic = np.array([[1, 8, 2], [2, 3, 7]])
    STATUS_OBJ.lwc_source.lwp = np.array([50, 30])
    compare = np.array([60, 90])
    assert_array_equal(STATUS_OBJ._find_lwp_difference(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_screen_rain_status,"@pytest.mark.parametrize(""value"", [0, 1, 2, 3, 4])
def test_screen_rain_status(value):
    STATUS_OBJ.lwc_source.is_rain = np.array([0, 1])
    STATUS_OBJ.status = np.array([[0, 2, 2, 3, 1], [1, 3, 0, 2, 2]])
    STATUS_OBJ.screen_rain()
    assert value in STATUS_OBJ.status


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_limit_error,"def test_limit_error():
    error = np.array([[0, 0, 1], [0.2, 0.4, 0.3]])
    max_v = 0.5
    compare = np.array([[0, 0, 0.5], [0.2, 0.4, 0.3]])
    assert_array_equal(ERROR_OBJ._limit_error(error, max_v), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_calc_lwc_gradient,"def test_calc_lwc_gradient():
    from cloudnetpy.utils import l2norm
    ERROR_OBJ.lwc = np.ma.array([[0.1, 0.2, 0.3],
                                 [0.1, 0.3, 0.6]])
    compare = l2norm(*np.gradient(ERROR_OBJ.lwc))
    assert_array_almost_equal(ERROR_OBJ._calc_lwc_gradient(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_calc_lwc_relative_error,"def test_calc_lwc_relative_error():
    from cloudnetpy.utils import l2norm
    ERROR_OBJ.lwc = np.ma.array([[0.1, 0.2, 0.3],
                                 [0.1, 0.3, 0.6]])
    x = l2norm(*np.gradient(ERROR_OBJ.lwc))
    compare = x / ERROR_OBJ.lwc / 2
    compare[compare > 5] = 5
    assert_array_almost_equal(ERROR_OBJ._calc_lwc_relative_error(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_calc_lwp_relative_error,"def test_calc_lwp_relative_error():
    ERROR_OBJ.lwc_source.lwp = np.array([0.1, 0.5])
    ERROR_OBJ.lwc_source.lwp_error = np.array([0.2, 5.5])
    compare = ERROR_OBJ.lwc_source.lwp_error / ERROR_OBJ.lwc_source.lwp
    compare[compare > 10] = 10
    assert_array_equal(ERROR_OBJ._calc_lwp_relative_error(), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_calc_combined_error,"def test_calc_combined_error():
    from cloudnetpy.utils import transpose, l2norm
    err_2d = np.array([[0, 0.1, 0.1], [0.2, 0.4, 0.15]])
    err_1d = np.array([0.3, 0.2])
    compare = l2norm(err_2d, transpose(err_1d))
    assert_array_equal(ERROR_OBJ._calc_combined_error(err_2d, err_1d), compare)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_fill_error_array,"def test_fill_error_array():
    error_in = np.array([[0, 0.1, 0.1], [0.2, 0.4, 0.15]])
    ERROR_OBJ.lwc = np.ma.array([[0.1, 0.2, 0.1],
                               [0.1, 0.2, 0.2]],
                              mask=[[0, 1, 0],
                                    [1, 0, 0]])
    compare = np.ma.array([[0, 0, 0],
                           [0, 0, 0]],
                          mask=[[0, 1, 0],
                                [1, 0, 0]])
    ERROR_OBJ._fill_error_array(error_in)
    error = ERROR_OBJ._fill_error_array(error_in)
    assert_array_almost_equal(error.mask, compare.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_screen_rain_error,"def test_screen_rain_error():
    compare = np.ma.array([[0.709, 0, 0.709],
                           [0, 0, 0]],
                          mask=[[0, 1, 0],
                                [1, 1, 1]])
    assert_array_equal(ERROR_OBJ.lwc_error.mask, compare.mask)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_lwc.py,,test_append_data,"@pytest.mark.parametrize(""key"", [""lwc"", ""lwc_retrieval_status"", ""lwc_error""])
def test_append_data(lwc_source_file, key):
    from cloudnetpy.products.lwc import _append_data
    lwc_source = LwcSource(lwc_source_file)
    _append_data(lwc_source, LWC_OBJ, STATUS_OBJ, ERROR_OBJ)
    assert key in lwc_source.data.keys()
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,,test_find_model_temperature_range,"@pytest.mark.parametrize(""model, result"", [
    ('some_ecmwf_model', (-4, 3)),
    ('some_other_model', (-8, 6)),
])
def test_find_model_temperature_range(model, result):
    assert melting._find_model_temperature_range(model) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,,test_get_temp_indices,"@pytest.mark.parametrize(""t_prof, t_range, result"", [
    (np.array([300, 290, 280, 270, 260, 250, 240]), (-10, 10), [2, 3]),
    (np.array([300, 290, 280, 270, 260, 250, 240]), (-5, 5), [3]),
    (np.array([290, 280, 270, 275, 260, 250, 240]), (-10, 10), [1, 2, 3]),
    (np.array([270, 275, 260, 250, 240]), (-10, 10), [0, 1]),
    (np.array([220, 210, 200]), (-10, 10), [0]),
    (np.array([280, 270, 260]), (-5, 2), [1]),
    (np.linspace(275, 270, 10), (-4, -3), range(10))
])
def test_get_temp_indices(t_prof, t_range, result):
    indices = melting._get_temp_indices(t_prof, t_range)
    assert_array_equal(indices, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,,test__is_good_ldr_peak,"@pytest.mark.parametrize(""ldr, v, indices, result"", [
    ([0, 1, 20, 100, 30, 2, 1], [-1, -2, -4, -1, 0, 0, 0], (1, 3, 6), True)
])
def test__is_good_ldr_peak(ldr, v, indices, result):
    assert melting._is_good_ldr_peak(ldr, v, indices) is result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,,test__is_good_ldr_peak,"@pytest.mark.parametrize(""v, indices, result"", [
    ([-1, -2.1, -1, 0], (1, 2), True),
    ([-1, -1.9, -1, 0], (1, 2), False),
])
def test__is_good_ldr_peak(v, indices, result):
    assert melting._is_good_v_peak(v, indices) is result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_melting.py,,test_find_melting_layer,"def test_find_melting_layer():
    obs = Obs()
    layer = melting.find_melting_layer(obs, smooth=False)
    result = np.array([[0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                       [0, 0, 0, 1, 1, 1, 0, 0, 0, 0]])
    assert_array_equal(layer, result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_meta_for_old_files.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_meta_for_old_files.py,,test_fix_old_data,"def test_fix_old_data():
    data, name = meta_for_old_files.fix_old_data(data_orig, 'specific_humidity')
    assert_array_equal(data_orig, data)
    assert_array_equal(name, 'q')


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_meta_for_old_files.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_meta_for_old_files.py,,test_fix_old_data_2,"def test_fix_old_data_2():
    data, name = meta_for_old_files.fix_old_data(data_orig, 'detection_status')
    assert_array_equal(data_orig, data)
    assert ma.count(data) == 7

",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mira.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mira.py,,test_find_measurement_date,"def test_find_measurement_date():
    radar = _Object('190517_000002.pds.off')
    date = mira._find_measurement_date(radar)
    assert date == ('2019', '05', '17')
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_find_model_type,"@pytest.mark.parametrize(""input, result"", [
    ('this_is_a_ecmwf_model_file.nc', 'ecmwf'),
    ('a_gdasXYZ_model_file.nc', 'gdas'),
    ('an_unknown.nc', '')

])
def test_find_model_type(input, result):
    assert model._find_model_type(input) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_calc_mean_height,"def test_calc_mean_height():
    height = np.array([[0, 1, 2, 3, 4],
                       [0.2, 1.2, 2.2, 3.2, 4.2],
                       [-0.2, 0.8, 1.8, 2.8, 3.8]])
    result = np.array([0, 1, 2, 3, 4])
    assert_array_equal(model._calc_mean_height(height), result)


BIG_ARRAY = np.ones((2, 3, 4))

EMPTY_ARRAY = ma.array([[0, 0, 0, 0],
                        [0, 0, 0, 0],
                        [0, 0, 0, 0]],
                       mask=[[0, 0, 0, 0],
                             [0, 0, 0, 0],
                             [0, 0, 0, 0]], dtype=float)
MASKED_ONE = ma.copy(EMPTY_ARRAY)
MASKED_ONE[0, 0] = ma.masked

ALT_SITE = 123


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_get_model_heights,"def test_get_model_heights(fake_model_file):
    obj = model.Model(str(fake_model_file), ALT_SITE)
    assert_array_equal(obj.model_heights, ALT_SITE + np.array([[1000, 2000, 3000, 4000],
                                                               [1000, 2000, 3000, 4000],
                                                               [1000, 2000, 3000, 4000]]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_mean_height,"def test_mean_height(fake_model_file):
    obj = model.Model(str(fake_model_file), ALT_SITE)
    assert_array_equal(obj.mean_height, ALT_SITE + np.array([1000, 2000, 3000, 4000]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_interpolate_to_common_height,"def test_interpolate_to_common_height(fake_model_file):
    obj = model.Model(str(fake_model_file), ALT_SITE)
    radar_wl_band = 0
    obj.interpolate_to_common_height(radar_wl_band)
    for key in ('uwind', 'vwind', 'q', 'temperature', 'pressure', 'rh',
                'gas_atten', 'specific_gas_atten', 'specific_saturated_gas_atten',
                'specific_liquid_atten'):
        assert key in obj.data_sparse


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_model.py,,test_interpolate_to_grid,"def test_interpolate_to_grid(fake_model_file):
    obj = model.Model(str(fake_model_file), ALT_SITE)
    radar_wl_band = 0
    obj.interpolate_to_common_height(radar_wl_band)
    time_grid = np.array([1,3])
    height_grid = np.array([1, 3])
    obj.interpolate_to_grid(time_grid, height_grid)
    assert_array_equal(obj.height, height_grid)
    assert hasattr(obj, 'data_dense')
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,,test_init_lwp_data,"def test_init_lwp_data(fake_mwr_file):
    obj = Mwr(fake_mwr_file)
    result = np.array([0.1, 2.5, 0.0, 0.2, 0.0])
    assert_array_equal(obj.data['lwp'][:], result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,,test_init_lwp_error,"def test_init_lwp_error(fake_mwr_file):
    obj = Mwr(fake_mwr_file)
    lwp = obj.data['lwp'][:]
    lwp_error = obj.data['lwp_error'][:]
    assert_array_equal(lwp_error, np.sqrt((0.25*lwp)**2 + 50**2))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_mwr.py,,test_rebin_to_grid,"def test_rebin_to_grid(fake_mwr_file):
    obj = Mwr(fake_mwr_file)
    time_new = np.array([1.6, 2.6])
    obj.rebin_to_grid(time_new)
    result = np.array([2.5, 0.2])
    assert_array_equal(obj.data['lwp'][:], result)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_get_identifier,"@pytest.mark.parametrize(""short_id, result"", [
    ('lwc','liquid water content'),
    ('iwc', 'ice water content'),
    ('drizzle', 'drizzle'),
    ('classification', 'classification'),
])
def test_get_identifier(short_id, result):
    assert output._get_identifier(short_id) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_get_identifier_raise,"def test_get_identifier_raise():
    with pytest.raises(ValueError):
        output._get_identifier('dummy')


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_add_file_type,"def test_add_file_type():
    root_group = RootGrp()
    output.add_file_type(root_group, 'drizzle')
    assert root_group.cloudnet_file_type == 'drizzle'


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_copy_global,"def test_copy_global(tmpdir_factory, fake_nc_file):
    file = tmpdir_factory.mktemp(""data"").join(""nc_file.nc"")
    root_grp = netCDF4.Dataset(file, ""w"", format=""NETCDF4_CLASSIC"")
    attr_list = ('a', 'b', 'c')
    source = netCDF4.Dataset(fake_nc_file)
    output.copy_global(source, root_grp, attr_list)
    for attr in attr_list:
        assert getattr(root_grp, attr) == getattr(source, attr)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_copy_variables,"def test_copy_variables(tmpdir_factory, fake_nc_file):
    file = tmpdir_factory.mktemp(""data"").join(""nc_file.nc"")
    root_grp = netCDF4.Dataset(file, ""w"", format=""NETCDF4_CLASSIC"")
    var_list = ('a', 'b', 'c')
    source = netCDF4.Dataset(fake_nc_file)
    output.copy_variables(source, root_grp, var_list)
    for var in var_list:
        assert source.variables[var][:] == root_grp.variables[var][:]


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_output.py,,test_merge_history,"def test_merge_history():
    root = RootGrp()
    file_type = 'dummy'
    source1 = RootGrp()
    source1.dataset.history = 'some history x'
    source2 = RootGrp()
    source2.dataset.history = 'some history y'
    output.merge_history(root, file_type, source1, source2)
    assert utils.is_timestamp(f""-{root.history[:19]}"") is True
    assert root.history[19:] == ' - dummy file created\nsome history x\nsome history y'
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_lin2log,"@pytest.mark.parametrize(""numbers, result"", [
    ((1e-6, 1e-5), [-6, -5]),
    ((1e-1,), [-1]),
])
def test_lin2log(numbers, result):
    assert plotting._lin2log(*numbers) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_get_standard_time_ticks,"@pytest.mark.parametrize(""reso, result"", [
    (4, ['', '04:00', '08:00', '12:00', '16:00', '20:00', '']),
    (2, ['', '02:00', '04:00', '06:00', '08:00', '10:00', '12:00',
         '14:00', '16:00', '18:00', '20:00', '22:00', '']),
    ])
def test_get_standard_time_ticks(reso, result):
    assert plotting._get_standard_time_ticks(reso) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test__generate_log_cbar_ticklabel_list,"@pytest.mark.parametrize(""vmin, vmax, result"", [
    (-7, -5, ['10$^{-7}$', '10$^{-6}$', '10$^{-5}$']),
    ])
def test__generate_log_cbar_ticklabel_list(vmin, vmax, result):
    assert plotting._generate_log_cbar_ticklabel_list(vmin, vmax) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_get_subtitle_text,"def test_get_subtitle_text():
    case_date = date(2019, 5, 7)
    site_name = 'Mace-Head'
    assert plotting._get_subtitle_text(case_date, site_name) == 'Mace Head, 7 May 2019'


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_read_location,"def test_read_location(nc_file):
    assert plotting._read_location(nc_file) == 'Kumpula'


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_read_data,"def test_read_data(nc_file):
    assert plotting._read_date(nc_file) == date(2019, 5, 23)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_create_save_name,"def test_create_save_name(file_metadata):
    path = '/foo/bar/'
    case_date = file_metadata['case_date']
    datestr = file_metadata['year'] + file_metadata['month'] + file_metadata['day']
    fields = ['ldr', 'z']
    assert plotting._create_save_name(path, case_date, fields) == f""/foo/bar/{datestr}_ldr_z.png""


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_1,"def test_1(self, nc_file, test_array):
        assert_array_equal(plotting._read_ax_values(nc_file)[0], test_array)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_2,"def test_2(self, nc_file, test_array):
        assert_array_equal(plotting._read_ax_values(nc_file)[1], test_array/1000)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_3,"def test_3(self, nc_file, test_array):
        assert_array_equal(plotting._read_ax_values(nc_file, 'model')[0], test_array)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_plotting.py,,test_4,"def test_4(self, nc_file, test_array):
        assert_array_equal(plotting._read_ax_values(nc_file, 'model')[1], test_array/1000)
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,,test_category_bits,"def test_category_bits(fake_categorize_file):
    obj = product_tools.CategorizeBits(fake_categorize_file)
    for key in obj.category_keys:
        assert sum(obj.category_bits[key]) == 1


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,,test_quality_bits,"def test_quality_bits(fake_categorize_file):
    obj = product_tools.CategorizeBits(fake_categorize_file)
    for key in obj.quality_keys:
        assert sum(obj.quality_bits[key]) == 1


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_product_tools.py,,test_read_nc_fields,"def test_read_nc_fields(fake_categorize_file):
    assert_array_equal(product_tools.read_nc_fields(fake_categorize_file, 'time'), np.arange(7))
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_sequence_indices,"def test_sequence_indices(fake_radar_file):
    obj = Radar(fake_radar_file)
    assert_array_equal(obj.sequence_indices, [[0, 1, 2, 3]])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_wl_band,"def test_wl_band(fake_radar_file):
    obj = Radar(fake_radar_file)
    assert obj.wl_band == 0


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_folding_velocity,"def test_folding_velocity(fake_radar_file):
    obj = Radar(fake_radar_file)
    assert obj.folding_velocity == FOLDING_VELOCITY


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_source,"def test_source(fake_radar_file):
    obj = Radar(fake_radar_file)
    assert obj.source == ''


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_correct_atten,"def test_correct_atten(fake_radar_file):
    obj = Radar(fake_radar_file)
    atten = {'radar_gas_atten': np.ones((3, 4)),
             'radar_liquid_atten': np.array([[0, 1, 1, 1],
                                             [0, 1, 1, 1],
                                             [0, 0, 0, 0]])}
    obj.correct_atten(atten)
    z = obj.data['Z'][:]
    result = np.array([[1, 2, 2, 2],
                       [1, 2, 2, 2],
                       [1, 1, 1, 1]])
    assert_array_equal(z.data, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_init_sigma,"def test_init_sigma(fake_radar_file):
    obj = Radar(fake_radar_file)
    assert_array_equal(obj.data['v'][:], obj.data['v_sigma'][:])


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_add_meta,"def test_add_meta(fake_radar_file):
    obj = Radar(fake_radar_file)
    obj.add_meta()
    for key in ('time', 'height', 'altitude', 'latitude', 'longitude', 'radar_frequency'):
        assert key in obj.data


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_prf_to_folding_velocity,"def test_prf_to_folding_velocity():
    prf = 1
    radar_frequency = 10
    assert radar._prf_to_folding_velocity(prf, radar_frequency) == constants.c / 40e9


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_radar.py,,test_remove_incomplete_pixels,"def test_remove_incomplete_pixels(fake_radar_file):
    obj = Radar(fake_radar_file)
    obj.remove_incomplete_pixels()
    for key in ('Z', 'v', 'width', 'ldr', 'v_sigma'):
        assert_array_equal(obj.data[key][:].mask, MASKED_ONE.mask)

",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,,test_get_rpg_files,"def test_get_rpg_files(example_files):
    dir_name = example_files.dirname + '/data/'
    result = [f""{dir_name}{x}"" for x in ('f.LV1', 'g.LV1')]
    assert rpg.get_rpg_files(dir_name) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_rpg.py,,test_2,"def test_2(self):
        self.header['a'][50] = 10
        with pytest.raises(AssertionError):
            assert_array_equal(rpg._reduce_header(self.header),
                               {'a': 1, 'b': 2, 'c': 3})
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_binvec,"@pytest.mark.parametrize(""input, output"", [
    ([1, 2, 3], [0.5, 1.5, 2.5, 3.5]),
    ([0.1, 0.3, 0.5], [0.0, 0.2, 0.4, 0.6]),
    ([0.02, 0.04, 0.06], [0.01, 0.03, 0.05, 0.07]),
])
def test_binvec(input, output):
    assert_array_almost_equal(utils.binvec(input), output)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_isbit,"@pytest.mark.parametrize(""number, nth_bit, result"", [
    (0, 0, False),
    (1, 0, True),
    (2, 0, False),
    (2, 1, True),
    (3, 0, True),
])
def test_isbit(number, nth_bit, result):
    assert utils.isbit(number, nth_bit) is result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_setbit,"@pytest.mark.parametrize(""n, k, res"", [
    (0, 0, 1),
    (3, 0, 3),
    (4, 0, 5),
    (4, 1, 6),
])
def test_setbit(n, k, res):
    assert utils.setbit(n, k) == res


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_seconds2hours,"@pytest.mark.parametrize(""input, output"", [
    ([24*60*60], 24),
    ([12*60*60], 12),
])
def test_seconds2hours(input, output):
    assert utils.seconds2hours(input) == output


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_mdiff,"@pytest.mark.parametrize(""input, output"", [
    (np.array([1, 2, 3]), 1),
    (ma.array([1, 2, 3, 4, 5, 6], mask=[0, 1, 0, 1, 0, 0]), 1),
    (np.array([1, 2, 10, 11, 12, 13, 14, 16]), 1)
])
def test_mdiff(input, output):
    assert utils.mdiff(input) == output


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_l2_norm,"@pytest.mark.parametrize(""a, b, result"", [
    (np.array([2, 3]), np.array([3, 4]), np.sqrt([13, 25])),
    (np.array([2, 3]), ma.array([3, 4], mask=True), [2, 3]),
    (np.array([2, 3]), ma.array([3, 4], mask=[0, 1]), [np.sqrt(13), 3]),
])
def test_l2_norm(a, b, result):
    assert_array_almost_equal(utils.l2norm(a, b), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_2d,"def test_rebin_2d(self):
        data_i = utils.rebin_2d(self.x, self.data, self.xnew)
        result = np.array([[2, 4.5, 6.5], [2, 4.5, 6.5]]).T
        assert_array_almost_equal(data_i, result)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_2d_n_min,"def test_rebin_2d_n_min(self):
        data_i = utils.rebin_2d(self.x, self.data, self.xnew, n_min=2)
        result = np.array([2, 4.5, 6.5])
        result = np.array([result, result]).T
        assert_array_almost_equal(data_i, result)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_2d_n_min_2,"def test_rebin_2d_n_min_2(self):
        data_i = utils.rebin_2d(self.x, self.data, self.xnew, n_min=3)
        result = np.array([False, True, True])
        result = np.array([result, result]).T
        assert_array_almost_equal(data_i.mask, result)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_2d_std,"def test_rebin_2d_std(self):
        data_i = utils.rebin_2d(self.x, self.data, self.xnew, 'std')
        result = np.array([np.std([1, 2, 3]), np.std([4, 5]), np.std([6, 7])])
        result = np.array([result, result]).T
        assert_array_almost_equal(data_i, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_filter_isolated_pixels,"def test_filter_isolated_pixels():
    x = np.array([[0, 0, 1, 1, 1],
                  [0, 0, 0, 0, 0],
                  [1, 0, 1, 0, 0],
                  [0, 0, 0, 0, 1]])
    x2 = np.array([[0, 0, 1, 1, 1],
                   [0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0]])
    assert_array_almost_equal(utils.filter_isolated_pixels(x), x2)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_filter_x_pixels,"@pytest.mark.parametrize(""input, result"", [
    ([[0, 1, 1, 1, 1],
      [0, 0, 0, 1, 0],
      [1, 1, 1, 0, 0],
      [0, 1, 0, 1, 1]],
     [[0, 0, 0, 1, 0],
      [0, 0, 0, 1, 0],
      [0, 1, 0, 0, 0],
      [0, 1, 0, 0, 0]]),
])
def test_filter_x_pixels(input, result):
    assert_array_almost_equal(utils.filter_x_pixels(input), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_ffill,"@pytest.mark.parametrize(""input, result"", [
    (np.array([0, 5, 0, 0, 2, 0]),
     np.array([0, 5, 5, 5, 2, 2])),
    (np.array([[1, 0, 2, 0],
               [0, 5, 0, 0]]),
     np.array([[1, 1, 2, 2],
               [0, 5, 5, 5]])),
])
def test_ffill(input, result):
    assert_array_almost_equal(utils.ffill(input), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_ffill_2,"def test_ffill_2():
    x = np.array([[5, 1, 1, 6],
                  [3, 0, 1, 0]])
    result = np.array([[5, 5, 5, 6],
                       [3, 0, 0, 0]])
    assert_array_almost_equal(utils.ffill(x, value=1), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_cumsumr_1,"def test_cumsumr_1():
    x = np.array([0, 1, 2, 0, 1, 1])
    res = np.array([0, 1, 3, 0, 1, 2])
    assert_array_almost_equal(utils.cumsumr(x), res)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_cumsumr_2,"def test_cumsumr_2():
    x = np.array([[0, 1, 1, 0],
                  [0, 5, 0, 0]])
    res = np.array([[0, 1, 2, 0],
                    [0, 5, 0, 0]])
    assert_array_almost_equal(utils.cumsumr(x, axis=1), res)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_cumsumr_3,"def test_cumsumr_3():
    x = np.array([[0, 1, 1, 0],
                  [0, 5, 0, 0]])
    res = np.array([[0, 1, 1, 0],
                    [0, 6, 0, 0]])
    assert_array_almost_equal(utils.cumsumr(x, axis=0), res)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_cumsumr_4,"def test_cumsumr_4():
    x = np.array([[0, 1, 1, 0],
                  [0, 5, 0, 0]])
    res = np.array([[0, 1, 1, 0],
                    [0, 6, 0, 0]])
    assert_array_almost_equal(utils.cumsumr(x), res)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_isscalar,"@pytest.mark.parametrize(""input, output"", [
    (np.array([1, 2, 3]), False),
    (ma.array([1, 2, 3]), False),
    (2, True),
    ((2.5,), True),
    ((2.5, 3.5), False),
    ([3], True),
    ([3, 4], False),
    (np.array(5), True),
    (ma.array(5.2), True),
    (ma.array([1, 2, 3], mask=True), False),
    (ma.array([1, 2, 3], mask=False), False),
    ([], False),
])
def test_isscalar(input, output):
    assert output == utils.isscalar(input)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_n_elements,"@pytest.mark.parametrize(""x, a, result"", [
    (np.arange(1, 10), 5, 5),
    (np.arange(1, 10), 5.4, 5),
    (np.arange(1, 10), 5.5, 6),
    (np.arange(1, 10), 5, 5),
    (np.linspace(0, 10, 21), 3.5, 7),
])
def test_n_elements(x, a, result):
    assert utils.n_elements(x, a) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_n_elements_2,"@pytest.mark.parametrize(""x, a, result"", [
    (np.linspace(0, 1, 61), 30, 30),
    (np.linspace(0, 6, (6*60+1)*2), 10, 20),
])
def test_n_elements_2(x, a, result):
    assert utils.n_elements(x, a, 'time') == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_l2_norm_weighted,"def test_l2_norm_weighted():
    x = (2, 3)
    weights = (1, 2)
    scale = 10
    assert_array_almost_equal(utils.l2norm_weighted(x, scale, weights), 10*np.sqrt([40]))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_interp_2d,"@pytest.mark.parametrize(""x_new, y_new, result"", [
    (np.array([1, 2]),
     np.array([5, 5]),
     np.array([[1, 1], [1, 1]])),
    (np.array([1, 2]),
     np.array([5, 10]),
     np.array([[1, 2], [1, 2]])),
    (np.array([1.5, 2.5]),
     np.array([5, 10]),
     np.array([[1, 2], [1, 2]])),
    (np.array([1, 2]),
     np.array([7.5, 12.5]),
     np.array([[1.5, 2.5], [1.5, 2.5]])),
])
def test_interp_2d(x_new, y_new, result):
    x = np.array([1, 2, 3, 4, 5])
    y = np.array([5, 10, 15])
    z = np.array([5*[1], 5*[2], 5*[3]]).T
    assert_array_almost_equal(utils.interpolate_2d(x, y, z, x_new, y_new),
                              result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_min,"def test_min(self):
        assert_array_almost_equal(self.prob[0], 0)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_max,"def test_max(self):
        assert_array_almost_equal(self.prob[-1], 1)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_min_inv,"def test_min_inv(self):
        assert_array_almost_equal(self.prob_inv[-1], 0)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_max_inv,"def test_max_inv(self):
        assert_array_almost_equal(self.prob_inv[0], 1)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_get_wl_band,"@pytest.mark.parametrize(""frequency, band"", [
    (35.5, 0),
    (94, 1),
])
def test_get_wl_band(frequency, band):
    assert utils.get_wl_band(frequency) == band


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_calc_relative_error,"@pytest.mark.parametrize(""reference, array, error"", [
    (100, 110, 10),
    (1, -2, -300),
])
def test_calc_relative_error(reference, array, error):
    assert utils.calc_relative_error(reference, array) == error


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_transpose,"def test_transpose():
    x = np.arange(10)
    x_transposed = utils.transpose(x)
    assert x.shape == (10, )
    assert x_transposed.shape == (10, 1)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_transpose_2,"@pytest.mark.parametrize(""index, result"", [
    ((0, 0), 0),
    ((4, 0), 4),
])
def test_transpose_2(index, result):
    x = np.arange(5)
    assert utils.transpose(x)[index] == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_get_uuid,"def test_get_uuid():
    x = utils.get_uuid()
    assert isinstance(x, str)
    assert len(x) == 32


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_get_time,"def test_get_time():
    x = utils.get_time()
    r = re.compile('.{4}-.{2}-.{2} .{2}:.{2}:.{2}')
    assert r.match(x)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_get_site_information,"@pytest.mark.parametrize(""site, args, result"", [
    ('lindenberg', ['latitude'], 52.2081),
    ('lindenberg', ['latitude', 'longitude', 'altitude'], [52.2081, 14.1175, 104]),
    ('dummmysite', ['latitude'], [0]),
])
def test_get_site_information(site, args, result):
    assert utils.get_site_information(site, *args) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_range_to_height,"@pytest.mark.parametrize(""los_range, tilt_angle, result"", [
    (np.array([1, 2, 3]), 0, [1, 2, 3]),
    (np.array([1, 2, 3]), 90, [0, 0, 0]),
])
def test_range_to_height(los_range, tilt_angle, result):
    height = utils.range_to_height(los_range, tilt_angle)
    assert_array_almost_equal(height, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_lin2db,"@pytest.mark.parametrize(""input, result"", [
    ((1e-10,), -100),
    ((1e-10, 1), -10),
])
def test_lin2db(input, result):
    assert utils.lin2db(*input) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_db2lin,"@pytest.mark.parametrize(""input, result"", [
    ((-100,), 1e-10),
    ((-10, 1), 1e-10),
])
def test_db2lin(input, result):
    assert utils.db2lin(*input) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_time_grid,"def test_time_grid():
    assert_array_equal(utils.time_grid(3600), np.linspace(0.5, 23.5, 24))


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_1d,"def test_rebin_1d(self):
        data_i = utils.rebin_1d(self.x, self.data, self.xnew)
        result = np.array([2, 4.5, 6.5])
        assert_array_almost_equal(data_i, result)

    ",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_rebin_1d_std,"def test_rebin_1d_std(self):
        data_i = utils.rebin_1d(self.x, self.data, self.xnew, 'std')
        result = np.array([np.std([1, 2, 3]), np.std([4, 5]), np.std([6, 7])])
        assert_array_almost_equal(data_i, result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_init,"@pytest.mark.parametrize(""dtype"", [
    float, int, bool,
])
def test_init(dtype):
    shape = (2, 3)
    arrays = utils.init(3, shape, dtype=dtype)
    for array in arrays:
        assert array.shape == shape
        assert array.dtype == dtype


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_date_range,"def test_date_range():
    start_date = datetime.date(2019, 2, 27)
    end_date = datetime.date(2019, 3, 3)
    result = ['2019-02-27', '2019-02-28', '2019-03-01', '2019-03-02']
    date_range = utils.date_range(start_date, end_date)
    for d, res in zip(date_range, result):
        assert str(d) == res


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_is_empty_line,"@pytest.mark.parametrize(""input, result"", [
    ('A line', False),
    ('', False),
    ('\n', True),
    ('\r\n', True),
])
def test_is_empty_line(input, result):
    assert utils.is_empty_line(input) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_find_first_empty_line,"def test_find_first_empty_line(tmpdir):
    file_name = '/'.join((str(tmpdir), 'file.txt'))
    f = open(file_name, 'w')
    f.write('row\n')
    f.write('row\n')
    f.write('row\n')
    f.write('\n')
    f.write('row\n')
    f.close()
    assert utils.find_first_empty_line(file_name) == 4


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_utils.py,,test_is_timestamp,"@pytest.mark.parametrize(""input, result"", [
    ('-2019-02-13 23:04:50', True),
    ('2019-02-13 23:04:50', False),
    ('2019-02-13', False),
])
def test_is_timestamp(input, result):
    assert utils.is_timestamp(input) == result
",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,,test_time_to_fraction_hour,"@pytest.mark.parametrize(""input, result"", [
    ('01:30:00', 1.5),
    ('02:00:00', 2),
    ('13:15:00', 13.25),
])
def test_time_to_fraction_hour(input, result):
    assert vaisala.time_to_fraction_hour(input) == result


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,,test_values_to_dict,"@pytest.mark.parametrize(""keys, values, result"", [
    (('a', 'b'), [[1, 2], [1, 2], [1, 2]],
     {'a': np.array([1, 1, 1]), 'b': np.array([2, 2, 2])}),
])
def test_values_to_dict(keys, values, result):
    assert_equal(vaisala.values_to_dict(keys, values), result)


",False
-1,cloudnetpy,https://github.com/tukiains/cloudnetpy/blob/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,https://raw.githubusercontent.com/tukiains/cloudnetpy/26f2607b890630146469cfa410fce99438ceee3f/tests/unit/test_vaisala.py,,test_split_string,"@pytest.mark.parametrize(""string, indices, result"", [
    ('abcd', [3, 4], ['d']),
    ('abcd', [0, 4], ['abcd']),
    ('abcdedfg', [1, 2, 4, 5], ['b', 'cd', 'e']),
])
def test_split_string(string, indices, result):
    assert_equal(vaisala.split_string(string, indices), result)
",False
477,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_add_classification.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_add_classification.py,TestAddClassification,test_add_classification,"def test_add_classification(self):
		amnt = model.MonetaryAmount(ident='')
		amnt.value = 7.0
		self.assertNotIn('Asking Price', factory.toString(amnt))
		vocab.add_classification(amnt, vocab.AskingPrice)
		self.assertIn('Asking Price', factory.toString(amnt))

",True
478,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_est,"def test_extract_est(self):
		e = extract_monetary_amount({
			'est_price': '12.0',
			'currency': 'pounds'
		})
		self.assertEqual(e.value, 12)
		c = e.currency
		self.assertEqual(e.classified_as[0]._label, 'Estimated Price')
		self.assertEqual(e.currency._label, 'British Pounds')

	",True
479,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_price_with_citation,"def test_extract_price_with_citation(self):
		d = {
			'price': '7',
			'currency': 'pounds',
			'citation': 'crom test suite'
		}
		e = extract_monetary_amount(d, add_citations=True)
		self.assertEqual(e.value, 7)
		self.assertEqual(e.currency._label, 'British Pounds')
		self.assertEqual(e.referred_to_by[0].content, 'crom test suite')


",True
480,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,TestCurrencyExtraction,test_extract_start,"def test_extract_start(self):
		e = extract_monetary_amount({
			'start_price': '8.5',
			'currency': 'pounds'
		})
		self.assertEqual(e.value, 8.5)
		c = e.currency
		self.assertEqual(e.classified_as[0]._label, 'Starting Price')
		self.assertEqual(e.currency._label, 'British Pounds')

	",True
481,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestAutoIdentifiers,test_no_ident,"def test_no_ident(self):

		model.factory.auto_assign_id = True
		p1 = model.Person()	# auto assigned	 
		p2 = model.Person(ident=None) # auto assigned
		p3 = model.Person(ident="""") # bnode explicitly

		self.assertTrue(p1.id.startswith('http'))
		self.assertTrue(p2.id.startswith('http'))
		self.assertEqual(p3.id, '')

		model.factory.auto_assign_id = False
		p4 = model.Person() # bnode is default
		p5 = model.Person(ident=None) # bnode is default
		p6 = model.Person(ident="""") # bnode explicitly

		self.assertEqual(p4.id, '')
		self.assertEqual(p5.id, '')
		self.assertEqual(p6.id, '')

		
",True
482,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_allows_multiple,"def test_allows_multiple(self):
		p = model.Person()
		self.assertTrue(p.allows_multiple('classified_as'))
		self.assertFalse(p.allows_multiple('born'))
		self.assertRaises(model.DataError, p.allows_multiple, 'fish')

	",True
483,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_check_prop,"def test_check_prop(self):
		desc = self.artist._check_prop('_label', 'Jane Doe\'s Bio')
		self.assertEqual(desc, 1)
		parent = self.artist._check_prop('parent_of', self.son)
		self.assertEqual(parent, 2)

	",True
484,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_check_reference,"def test_check_reference(self):
		self.assertTrue(self.artist._check_reference('http'))
		self.assertFalse(self.artist._check_reference('xxx'))
		self.assertTrue(self.artist._check_reference({'id': 'xxx'}))
		self.assertFalse(self.artist._check_reference({'xxx': 'yyy'}))
		self.assertTrue(self.artist._check_reference(self.son))
		self.assertTrue(self.artist._check_reference(['http']))
		self.assertFalse(self.artist._check_reference(['xxx', 'yyy']))
		self.assertTrue(self.artist._check_reference(model.Person))

	",True
485,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_init_params,"def test_init_params(self):
		p1 = model.Person(ident=""urn:uuid:1234"")
		self.assertEqual(p1.id, ""urn:uuid:1234"")
		p2 = model.Person(ident=""http://schema.org/Foo"")
		self.assertEqual(p2.id, ""schema:Foo"")
		p3 = model.Name(content=""Test"")
		self.assertEqual(p3.content, ""Test"")
		c = model.MonetaryAmount(value=10)
		self.assertEqual(c.value, 10)
		n = model.Name(value=""Rob"")
		self.assertEqual(n.content, ""Rob"")
		i = model.Identifier(content=""xyz123"")
		self.assertEqual(i.content, ""xyz123"")
		i2 = model.Identifier(value=""abc"")
		self.assertEqual(i2.content, ""abc"")

	",True
486,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_list_my_props,"def test_list_my_props(self):
		p1 = model.Person()
		p1.classified_as = model.Type()
		props = p1.list_my_props()
		self.assertEqual(set(props), set(['classified_as', 'id']))
		props = p1.list_my_props(filter=model.Type)
		self.assertEqual(props, ['classified_as'])

	",True
487,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestBaseResource,test_multiplicity,"def test_multiplicity(self):
		model.factory.process_multiplicity = True
		who = model.Actor()
		mmo = model.HumanMadeObject()
		prod = model.Production()
		mmo.produced_by = prod
		who.current_owner_of = mmo
		mmo.current_owner = who
		self.assertEqual(mmo.current_owner, [who])
		self.assertEqual(who.current_owner_of, [mmo])		
		self.assertEqual(mmo.produced_by, prod)

	",True
488,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_breadth,"def test_breadth(self):
		x = model.TransferOfCustody()
		e = model.Activity()
		fr = model.Group()
		to = model.Group()
		w = model.HumanMadeObject()
		fr._label = ""From""
		to._label = ""To""
		x.transferred_custody_of = w
		x.transferred_custody_from = fr
		x.transferred_custody_to = to
		e.used_specific_object = w
		e.carried_out_by = to
		w.current_owner = fr
		x.specific_purpose = e
		js = model.factory.toJSON(x)
		# Okay ... if we're breadth first, then custody_from is a resource
		# And now it's the first in the list
		self.assertTrue(isinstance(js['transferred_custody_from'][0], OrderedDict))

	",True
489,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_collapse_json,"def test_collapse_json(self):
		model.factory.auto_id_type = ""uuid""
		model.factory.base_url = ""http://lod.example.org/museum/""
		model.factory.context_uri = ""https://linked.art/ns/v1/linked-art.json""
		p = model.Person()
		p.classified_as = model.Type(ident=""http://example.org/Type"", label=""Test"")
		res1 = model.factory.toString(p, compact=False, collapse=60) # all new lines
		res2 = model.factory.toString(p, compact=False, collapse=120) # compact list of type
		self.assertEqual(len(res1.splitlines()), 12)
		self.assertEqual(len(res2.splitlines()), 6)

	",True
490,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_ordering,"def test_ordering(self):
		p = model.Person(label=""Person"")
		p.classified_as = model.Type(ident=""type-uri"")
		p.referred_to_by = model.LinguisticObject(content=""text"")
		p.dimension = model.Dimension(value=1)

		outstr = model.factory.toString(p)
		lbl = outstr.index(""_label"")
		clsf = outstr.index(""classified_as"")
		r2b = outstr.index(""referred_to_by"")
		dim = outstr.index(""dimension"")
		self.assertTrue(lbl < clsf)
		self.assertTrue(clsf < r2b)
		self.assertTrue(r2b < dim)


",True
491,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_pipe_scoped,"def test_pipe_scoped(self):
		x = model.Activity()
		y = model.Activity()
		x.part = y
		model.factory.pipe_scoped_contexts = True
		js = model.factory.toJSON(x)
		self.assertTrue('part|crm:P9_consists_of' in js)
		model.factory.pipe_scoped_contexts = False
		js = model.factory.toJSON(x)		
		self.assertTrue('part|crm:P9_consists_of' not in js)		
		self.assertTrue('part' in js)

	",True
492,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_production_mode,"def test_production_mode(self):

		# model.factory.production_mode()
		# Can't unset the cached hierarchy
		# and it causes the test for the hierarchy to fail
		model.factory.validate_profile = False
		model.factory.validate_properties = False
		model.factory.validate_range = False
		model.factory.validate_multiplicity = False

		p = model.Person()
		p.identified_by = model.Name(value=""abc"")
		p.part = model.HumanMadeObject()
		js = model.factory.toJSON(p)

		model.factory.production_mode(state=False)


	",True
493,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_recursion,"def test_recursion(self):
		x = model.Activity()
		x.part = x
		js = model.factory.toJSON(x)
		# If our recursion checks have regressed, this will barf right here
		self.assertTrue(1)

	",True
494,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_string_list,"def test_string_list(self):
		x = model.Activity()
		x._label = [""Label 1"", ""Label 2""]
		js = model.factory.toJSON(x)
		self.assertTrue(js['_label'] == x._label)

	",True
495,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toFile,"def test_toFile(self):
		self.assertRaises(model.ConfigurationError, model.factory.toFile, self.collection)
		# Test auto filename determination
		model.factory.base_dir = 'tests'
		model.factory.toFile(self.collection)
		self.assertTrue(os.path.isfile('tests/InformationObject/collection.json'))
		# Test explicit filename setting
		model.factory.toFile(self.collection, filename='tests/fishbat.bar')
		self.assertTrue(os.path.isfile('tests/fishbat.bar'))
		# Tidy up
		shutil.rmtree('tests/InformationObject')

	",True
496,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON,"def test_toJSON(self):
		# model.factory.context_uri = 'http://lod.getty.edu/context.json'
		expect = OrderedDict([
			('@context', model.factory.context_uri),
			('id', u'http://lod.example.org/museum/InformationObject/collection'), 
			('type', 'InformationObject'), ('_label', 'Test Object')])
		outj = model.factory.toJSON(self.collection)
		self.assertEqual(expect, outj)

	",True
497,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON_fast,"def test_toJSON_fast(self):
		model.factory.json_serializer = ""fast""
		expect = {'@context': model.factory.context_uri, 
			'id': 'http://lod.example.org/museum/InformationObject/collection', 
			'type': 'InformationObject', 
			'_label': 'Test Object'}
		outj = model.factory.toJSON(self.collection)
		self.assertEqual(expect, outj)
		model.factory.json_serializer = ""normal""

	",True
498,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toJSON_normal,"def test_toJSON_normal(self):
		expect = OrderedDict([(u'@context', model.factory.context_uri), 
			(u'@id', u'http://lod.example.org/museum/Person/1'), (u'@type', u'crm:E21_Person'),
			('rdfs:label', 'Test Person')])
		model.factory.full_names = True
		p = model.Person(""1"")
		p._label = ""Test Person""
		outj = model.factory.toJSON(p)
		self.assertEqual(expect, outj)
		# reset
		model.factory.full_names = False

	",True
499,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toString,"def test_toString(self):
		expect = u'{""@context"":""'+model.factory.context_uri+'"",""id"":""http://lod.example.org/museum/InformationObject/collection"",""type"":""InformationObject"",""_label"":""Test Object""}'
		outs = model.factory.toString(self.collection)
		self.assertEqual(expect, outs)

	",True
500,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestFactorySerialization,test_toString_fast,"def test_toString_fast(self):
		# Should only be trusted in python 3
		if sys.version_info.major >= 3 and sys.version_info.minor >= 6:
			expect = u'{""@context"":""'+model.factory.context_uri+'"",""id"":""http://lod.example.org/museum/InformationObject/collection"",""type"":""InformationObject"",""_label"":""Test Object""}'
			model.factory.json_serializer = ""fast""		
			outs = model.factory.toString(self.collection)
			model.factory.json_serializer = ""normal""
			self.assertEqual(expect, outs)
		else:
			print(""Skipping toString_fast test in Python 2.x"")

	",True
501,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_not_multiple_instance,"def test_not_multiple_instance(self):
		who = model.Person()
		n = model.Name(content=""Test"")
		who.identified_by = n

		model.factory.multiple_instances_per_property = ""error""
		self.assertRaises(model.DataError, who.__setattr__, 'identified_by', n)
		self.assertEqual(who.identified_by, [n])

		model.factory.multiple_instances_per_property = ""drop""
		who.identified_by = n
		self.assertEqual(who.identified_by, [n,n])		
		# and check that only serialized once
		js = model.factory.toJSON(who)
		self.assertEqual(len(js['identified_by']), 1)

		model.factory.multiple_instances_per_property = ""allow""
		js = model.factory.toJSON(who)
		self.assertEqual(len(js['identified_by']), 2)


",True
502,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validate_multiplicity,"def test_validate_multiplicity(self):
		model.factory.validate_multiplicity = True
		who = model.Person()
		b1 = model.Birth()
		who.born = b1
		b2 = model.Birth()
		self.assertRaises(model.ProfileError, who.__setattr__, 'born', b2)
		model.factory.validate_multiplicity = False
		who.born = b2
		self.assertEqual(who.born, [b1, b2])

	",True
503,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validate_profile_off,"def test_validate_profile_off(self):
		model.factory.validate_profile = False
		ia = model.IdentifierAssignment()
		# If it's not turned off this should raise
		model.factory.validate_profile = True
		self.assertRaises(model.ProfileError, model.IdentifierAssignment)		
		p1 = model.Person()
		self.assertRaises(model.ProfileError, p1.__setattr__, 'documented_in', ""foo"")

	",True
504,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestMagicMethods,test_validation_wrong_type,"def test_validation_wrong_type(self):
		model.factory.validate_properties = True
		artist = model.Person('00001', 'Jane Doe')	
		self.assertRaises(model.DataError, artist.__setattr__, 'parent_of', 'Bad Value')

	",True
505,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,TestPropertyCache,test_cache_hierarchy,"def test_cache_hierarchy(self):
		o = model.HumanMadeObject()
		self.assertEqual(o._all_properties, {})
		model.factory.cache_hierarchy()
		self.assertTrue(len(o._all_properties) > 50)
		

",True
506,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,TestReader,test_read,"def test_read(self):
		self.assertRaises(DataError, self.reader.read, """")
		self.assertRaises(DataError, self.reader.read, ""This is not JSON"")
		self.assertRaises(DataError, self.reader.read, ""{}"")

		whostr = '{""type"": ""Person"", ""_label"": ""me""}'
		self.assertTrue(isinstance(self.reader.read(whostr), Person))

		whostr = '{""@context"": ""fishbat"", ""type"": ""Person"", ""_label"": ""me""}'
		self.assertTrue(isinstance(self.reader.read(whostr), Person))

		levelstr = '{""type"": ""Person"", ""parent_of"": {""type"": ""Person"", ""_label"": ""child""}}'
		self.assertTrue(isinstance(self.reader.read(levelstr).parent_of[0], Person))

		basestr = '{""_label"": ""base""}'
		self.assertTrue(isinstance(self.reader.read(basestr), BaseResource))

		unknown = '{""type"":""FishBat""}'
		self.assertRaises(DataError, self.reader.read, unknown)

		unknown2 = '{""type"":""Person"", ""fishbat"": ""bob""}'
		self.assertRaises(DataError, self.reader.read, unknown)

	",True
507,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,TestReader,test_vocab_collision,"def test_vocab_collision(self):
		# Test that the algorithm picks the right vocab instance
		# if multiple have the same AAT term but different base class

		data = """"""
        {
          ""type"": ""LinguisticObject"",
          ""_label"": ""Sale recorded in catalog: B-267 0003 (1817) (record number 22947)"",
	      ""part_of"": [
            {
              ""type"": ""LinguisticObject"",
              ""_label"": ""Sale Catalog B-267"",
              ""classified_as"": [
                {
                  ""id"": ""http://vocab.getty.edu/aat/300026068"",
                  ""type"": ""Type"",
                  ""_label"": ""Auction Catalog""
                }
              ]
            }
          ]
        }
        """"""
		d = self.reader.read(data)
		self.assertTrue(isinstance(d.part_of[0], vocab.AuctionCatalogText))

",True
508,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_aa_check,"def test_aa_check(self):

		# Make sure that some other test hasn't set it
		try:
			del model.AttributeAssignment.set_assigned_property
		except:
			pass

		t = model.Type()
		aa = model.AttributeAssignment()
		# First check that aa accepts a type
		aa.assigned_property = t
		# And will not accept a string
		self.assertRaises(model.DataError, aa.__setattr__, ""assigned_property"", ""classified_as"")

		# Check we can set anything to assigned / assigned_to
		aa.assigned_property = None
		aa.assigned = aa
		aa.assigned_to = aa
		self.assertEqual(aa.assigned, aa)
		self.assertEqual(aa.assigned_to, aa)

		vocab.add_attribute_assignment_check()

		# This should fail right now as can't classify as an AA
		self.assertRaises(model.DataError, aa.__setattr__, ""assigned_property"", ""classified_as"")
		aa.assigned = None
		aa.assigned_to = None
		aa.assigned = t
		aa.assigned_to = t
		aa.assigned_property = ""classified_as""
		self.assertEqual(aa.assigned_property, 'classified_as')


	",True
509,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_boundary_setter,"def test_boundary_setter(self):
		vocab.add_linked_art_boundary_check()
		p = model.Person()
		p2 = model.Person()
		n = model.Name()
		n.content = ""Test""
		p2.identified_by = n
		p.exact_match = p2
		# Now, Test should not appear in the resulting JSON of p
		factory.linked_art_boundaries = True
		js = factory.toJSON(p)
		self.assertTrue(not 'identified_by' in js['exact_match'][0])
		factory.linked_art_boundaries = False
		js = factory.toJSON(p)
		self.assertTrue('identified_by' in js['exact_match'][0])		

	",True
510,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_conceptual_parts,"def test_conceptual_parts(self):
		r = model.Right()
		r2 = model.Right()
		self.assertRaises(model.DataError, r.__setattr__, 'part', r2)
		r.c_part = r2
		self.assertTrue(r2 in r.c_part)

		vocab.conceptual_only_parts()
		r3 = model.Right()
		r4 = model.Right()
		r3.part = r4
		self.assertTrue(r4 in r3.c_part)
		self.assertTrue(""part"" in model.factory.toJSON(r3))
		self.assertTrue(r4 in r3.part)


	",True
511,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_linguistic_object_boundary,"def test_linguistic_object_boundary(self):
		vocab.add_linked_art_boundary_check()
		jrnl = vocab.JournalText(label=""journal"")
		issue = vocab.IssueText(label=""issue"")
		issue.part_of = jrnl
		issue.referred_to_by = vocab.MaterialStatement(content=""Statement"")

		js = factory.toJSON(issue)
		# Have not embedded journal in issue
		self.assertTrue(not 'classified_as' in js['part_of'][0])
		# Have embedded statement in issue
		self.assertTrue('content' in js['referred_to_by'][0])
		self.assertTrue('type' in js['referred_to_by'][0]['classified_as'][0]['classified_as'][0])

",True
512,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_metatype,"def test_metatype(self):
		vocab.register_instance(""example"", {""parent"": model.Type, ""id"": ""3"", ""label"": ""example type""}) 
		vocab.register_aat_class(""TestObject2"", 
			{""parent"": model.HumanMadeObject, ""id"": ""4"", ""label"": ""example typed object"", ""metatype"": ""example""})
		from cromulent.vocab import TestObject2
		self.assertEqual(TestObject2._classification[0].classified_as[0].id, 'http://vocab.getty.edu/aat/3')

	",True
513,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_multitype,"def test_multitype(self):
		from cromulent.vocab import make_multitype_obj, Painting, Drawing
		inst = make_multitype_obj(Painting, Drawing)
		self.assertTrue(isinstance(inst, Painting))
		self.assertTrue(len(inst.classified_as) == 2)
		self.assertTrue(inst.classified_as[1].id == ""http://vocab.getty.edu/aat/300033973"")

		from cromulent.model import HumanMadeObject

		inst = make_multitype_obj(HumanMadeObject, Painting)
		self.assertTrue(len(inst.classified_as) == 1)
		self.assertTrue(inst.classified_as[0].id == ""http://vocab.getty.edu/aat/300033618"")

	",True
514,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,TestClassBuilder,test_procurement_boundary,"def test_procurement_boundary(self):
		vocab.add_linked_art_boundary_check()
		a = model.Activity()
		p = vocab.ProvenanceEntry()
		a.caused = p
		js = factory.toJSON(a)
		self.assertTrue(not 'classified_as' in js['caused'][0])		

	",True
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,,test_extract_simple,"def test_extract_simple(self):
		e = extract_monetary_amount({
			'price': '10.0',
			'currency': 'pounds'
		})
		self.assertEqual(e.type, 'MonetaryAmount')
		self.assertEqual(e._label, '10.0 pounds')
		self.assertEqual(e.value, 10)
		c = e.currency
		self.assertEqual(c.type, 'Currency')
		self.assertEqual(c._label, 'British Pounds')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,,test_extract_comma_separated,"def test_extract_comma_separated(self):
		e = extract_monetary_amount({
			'price': '1,280.5',
			'currency': 'pounds'
		})
		self.assertEqual(e.type, 'MonetaryAmount')
		self.assertEqual(e._label, '1,280.5 pounds')
		self.assertEqual(e.value, 1280.50)
		c = e.currency
		self.assertEqual(c.type, 'Currency')
		self.assertEqual(c._label, 'British Pounds')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,,test_extract_multiple_comma_separated,"def test_extract_multiple_comma_separated(self):
		e = extract_monetary_amount({
			'price': '1,310,720.5',
			'currency': 'pounds'
		})
		self.assertEqual(e.type, 'MonetaryAmount')
		self.assertEqual(e._label, '1,310,720.5 pounds')
		self.assertEqual(e.value, 1310720.5)
		c = e.currency
		self.assertEqual(c.type, 'Currency')
		self.assertEqual(c._label, 'British Pounds')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,,test_extract_custom_currency_key,"def test_extract_custom_currency_key(self):
		d = {
			'price': '7',
			'currency': 'zzz'
		}
		with self.assertRaises(AttributeError):
			e = extract_monetary_amount(d)
			self.assertEqual(e.currency._label, 'Custom Currency')
		
		e = extract_monetary_amount(d, currency_mapping=CUSTOM_MAPPING)
		self.assertEqual(e.value, 7)
		self.assertEqual(e.currency._label, 'US Dollars')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_currency.py,,test_extract_custom_currency_instance,"def test_extract_custom_currency_instance(self):
		d = {
			'price': '7',
			'currency': 'xxx'
		}
		with self.assertRaises(AttributeError):
			e = extract_monetary_amount(d)
			self.assertEqual(e.currency._label, 'Custom Currency')
		
		e = extract_monetary_amount(d, currency_mapping=CUSTOM_MAPPING)
		self.assertEqual(e.value, 7)
		self.assertEqual(e.currency._label, 'My Dollars')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,,test_parse_simple_dimensions,"def test_parse_simple_dimensions(self):
		'''
		Test the documented formats that `cromulent.extract.parse_simple_dimensions` can parse
		and ensure that it returns the expected data.
		'''
		tests = {
			""3'"": [Dimension(3, 'feet', None)],
			'3 feet': [Dimension(3, 'feet', None)],
			'3 foot': [Dimension(3, 'feet', None)],
			'3 ft': [Dimension(3, 'feet', None)],
			'3 ft.': [Dimension(3, 'feet', None)],
			'2""': [Dimension(2, 'inches', None)],
			'2 in': [Dimension(2, 'inches', None)],
			'2 in.': [Dimension(2, 'inches', None)],
			'2 inch': [Dimension(2, 'inches', None)],
			'2 inches': [Dimension(2, 'inches', None)],
			'2 duymen': [Dimension(2, 'inches', None)],
			'2 d.': [Dimension(2, 'inches', None)],
			'2 d': [Dimension(2, 'inches', None)],
			'''2'8""''': [Dimension(2, 'feet', None), Dimension(8, 'inches', None)],
			'4cm': [Dimension(4, 'cm', None)],
			'2 pieds 3 pouces': [Dimension(2, 'fr_feet', None), Dimension(3, 'fr_inches', None)],
			'1 pied 7 pouces': [Dimension(1, 'fr_feet', None), Dimension(7, 'fr_inches', None)],
			'8 pouce': [Dimension(8, 'fr_inches', None)],
			'8 pouces': [Dimension(8, 'fr_inches', None)],
			'8 1/2 pouces': [Dimension(8.5, 'fr_inches', None)],
			'8 1/4 pouces': [Dimension(8.25, 'fr_inches', None)],
			'8 1/8 pouces': [Dimension(8.125, 'fr_inches', None)],
			'1': [Dimension(1, None, None)],
			
			# values without a unit that follow values with a unit stay in the same system but using the next-finer unit
			'2 pieds 3': [Dimension(2, 'fr_feet', None), Dimension(3, 'fr_inches', None)],
			""1' 3"": [Dimension(1, 'feet', None), Dimension(3, 'inches', None)],
		}

		for value, expected in tests.items():
			dims = cromulent.extract.parse_simple_dimensions(value)
			if expected is not None:
				self.assertIsInstance(dims, list)
				self.assertEqual(dims, expected, msg='dimensions: %r' % (value,))
			else:
				self.assertIsNone(dims)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,,test_dimension_cleaner,"def test_dimension_cleaner(self):
		'''
		Test the documented formats that `cromulent.extract.dimensions_cleaner` can parse
		and ensure that it returns the expected data.
		'''
		tests = {
			'''2 in by 1 in''': ([Dimension(2, 'inches', None)], [Dimension(1, 'inches', None)]),
			'''2'2""h x 2'8""w''': ([Dimension(2, 'feet', 'height'), Dimension(2, 'inches', 'height')], [Dimension(2, 'feet', 'width'), Dimension(8, 'inches', 'width')]),
			'''1'3""x4cm h''': ([Dimension(1, 'feet', None), Dimension(3, 'inches', None)], [Dimension(4, 'cm', 'height')]),
			'''1'3"" by 4""''': ([Dimension(1, 'feet', None), Dimension(3, 'inches', None)], [Dimension(4, 'inches', None)]),
			'Haut 14 pouces, large 10 pouces': ([Dimension(14, 'fr_inches', 'height')], [Dimension(10, 'fr_inches', 'width')]),
			'Haut. 48 pouces, large 68 pouces': ([Dimension(48, 'fr_inches', 'height')], [Dimension(68, 'fr_inches', 'width')]),
			'1 by 4': ([Dimension(1, None, None)], [Dimension(4, None, None)]),
			'Hoog. 6 v., breed 3 v': ([Dimension(6, 'feet', 'height')], [Dimension(3, 'feet', 'width')]),
			'Breedt 6 v., hoog 3 v': ([Dimension(6, 'feet', 'width')], [Dimension(3, 'feet', 'height')]),
			'20 cm x 24,5 cm': ([Dimension(20, 'cm', None)], [Dimension(24.5, 'cm', None)]),
			'2 w by 5 h': ([Dimension(2, None, 'width')], [Dimension(5, None, 'height')]),
			'Hauteur 1 pied 4 pouces, largeur 1 pied 1/2 pouc.': ([Dimension(1, 'fr_feet', 'height'), Dimension(value=4, unit='fr_inches', which='height')], [Dimension(1, 'fr_feet', 'width'), Dimension(value=0.5, unit='fr_inches', which='width')]),
			'h.73 pouces 4 lignes, l.50 pouces': ([Dimension(value=73, unit='fr_inches', which='height'), Dimension(value=4, unit='ligne', which='height')], [Dimension(value=50, unit='fr_inches', which='width')]),
			'haut. 5 pouc. larg. 5 pouc. 4 linges': ([Dimension(value=5, unit='fr_inches', which='height')], [Dimension(value=5, unit='fr_inches', which='width'), Dimension(value=4, unit='ligne', which='width')]),
			'haut. 9 pouc. 4 lignes larg. 10 pouc. 4 linges': ([Dimension(value=9, unit='fr_inches', which='height'), Dimension(value=4, unit='ligne', which='height')], [Dimension(value=10, unit='fr_inches', which='width'), Dimension(value=4, unit='ligne', which='width')]),
			'h 38 cm, w 27 cm': ([Dimension(38, 'cm', 'height')], [Dimension(27, 'cm', 'width')]),
			""hauteur 9 pouces, largeur 7"": ([Dimension(value=9, unit='fr_inches', which='height')], [Dimension(value=7, unit=None, which='width')]),
		}

		for value, expected in tests.items():
			dims = cromulent.extract.dimensions_cleaner(value)
			if expected is not None:
				self.assertIsInstance(dims, tuple)
# 				print('===== got:')
# 				pprint.pprint(dims)
# 				print('----- expected:')
# 				pprint.pprint(expected)
# 				print('=====')
				self.assertEqual(dims, expected, msg='dimensions: %r' % (value,))
			else:
				self.assertIsNone(dims)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,,test_extract_physical_dimensions,"def test_extract_physical_dimensions(self):
		'''
		Test the documented formats that `cromulent.extract.extract_physical_dimensions`
		can parse and ensure that it returns the expected data.
		'''
		tests = {}
		h9l7_height = cromulent.vocab.Height(ident='', content=9.0)
		h9l7_height.identified_by = cromulent.model.Name(ident='', content='9 French inches')
		h9l7_height.unit = cromulent.vocab.instances.get('fr_inches')
		h9l7_width = cromulent.vocab.Width(ident='', content=7.0)
		tests[""hauteur 9 pouces, largeur 7""] = [h9l7_height, h9l7_width]

		for value, expected_dims in tests.items():
			dims = list(cromulent.extract.extract_physical_dimensions(value))
			for got, expected in zip(dims, expected_dims):
				self.assertEqual(got.value, expected.value)
				self.assertEqual(got.type, expected.type)

				if suppress is None:
					# Python 2.7
					if hasattr(expected, 'unit'):
						self.assertEqual(got.unit, expected.unit)						
					if hasattr(expected, 'classified_as'):
						self.assertEqual(got.classified_as, expected.classified_as)						
					if hasattr(expected, 'identified_by'):
						self.assertEqual(got.identified_by, expected.identified_by)						
				else:			
					with suppress(AttributeError):
						self.assertEqual(got.unit, expected.unit)
					with suppress(AttributeError):
						self.assertEqual(got.classified_as, expected.classified_as)
					with suppress(AttributeError):
						self.assertEqual(got.identified_by, expected.identified_by)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,,test_extract_physical_dimensions_with_default,"def test_extract_physical_dimensions_with_default(self):
		'''
		Test the documented formats that `cromulent.extract.extract_physical_dimensions`
		can parse, specifying a default unit, and ensure that it returns the expected data.
		'''
		tests = {}
		h9l7_height = cromulent.vocab.Height(ident='', content=9.0)
		h9l7_height.identified_by = cromulent.model.Name(ident='', content='9 French inches')
		h9l7_height.unit = cromulent.vocab.instances.get('fr_inches')
		h9l7_width = cromulent.vocab.Width(ident='', content=7.0)
		h9l7_width.unit = cromulent.vocab.instances.get('inches')
		tests[""hauteur 9 pouces, largeur 7""] = [h9l7_height, h9l7_width]

		for value, expected_dims in tests.items():
			dims = list(cromulent.extract.extract_physical_dimensions(value, default_unit='inches'))
			for got, expected in zip(dims, expected_dims):
				self.assertEqual(got.value, expected.value)
				self.assertEqual(got.type, expected.type)
				self.assertEqual(got.unit, expected.unit)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_dimensions.py,,test_normalize_dimension,"def test_normalize_dimension(self):
		tests = {
			'1 ft, 2 in': ('1 foot, 2 inches', Dimension(value=14, unit='inches', which=None)),
			'8 1/2 pouces': ('8.5 French inches', Dimension(value=8.5, unit='fr_inches', which=None)),
			'1 pied 7 pouces': ('1 French foot, 7 French inches', Dimension(value=19, unit='fr_inches', which=None)),
			'2 pied 1/2 pouces': ('2 French feet, 0.5 French inches', Dimension(value=24.5, unit='fr_inches', which=None)),
			'1 pied 3 pouce. 3 linges': ('1 French foot, 3 French inches, 3 lignes', Dimension(value=15.25, unit='fr_inches', which=None)),
			""4' 8"": ('4 feet, 8 inches', Dimension(value=56, unit='inches', which=None)),
			""1 pied 2"": ('1 French foot, 2 French inches', Dimension(value=14, unit='fr_inches', which=None)),
		}
		for value, expected in tests.items():
			elabel, edim = expected
			dims = cromulent.extract.parse_simple_dimensions(value)
			dim, label = normalized_dimension_object(dims)
			self.assertEqual(label, elabel)
			self.assertEqual(dim, edim)

",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_base_url,"def test_base_url(self):
		self.assertEqual(model.factory.base_url, 'http://data.getty.edu/provenance/')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_base_dir,"def test_base_dir(self):
		self.assertEqual(model.factory.base_dir, 'tests/provenance_base_dir')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_default_lang,"def test_default_lang(self):
		self.assertEqual(model.factory.default_lang, 'en')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_set_debug_stream,"def test_set_debug_stream(self):
		strm = open('err_output', 'w')
		model.factory.set_debug_stream(strm)
		self.assertEqual(model.factory.log_stream, strm)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_set_debug,"def test_set_debug(self):
		model.factory.set_debug('error_on_warning')
		self.assertEqual(model.factory.debug_level, 'error_on_warning')
		self.assertRaises(model.ConfigurationError, model.factory.set_debug, 'xxx')
		self.assertRaises(model.MetadataError, model.factory.maybe_warn, ""test"")

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_load_context,"def test_load_context(self):
		self.assertRaises(model.ConfigurationError, model.factory.load_context, 
			""foo"", {""foo"":""does_not_exist.txt""})
		model.factory.load_context(""foo"", {""foo"":""tests/test_context.json""})
		self.assertEqual(model.factory.context_json, {""@context"":{""id"":""@id""}})
		self.assertRaises(model.ConfigurationError, model.factory.load_context, """", {})

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_pickle,"def test_pickle(self):
		model.factory.log_stream = sys.stderr
		srlz = pickle.dumps(model.factory)
		newfac = pickle.loads(srlz)
		self.assertTrue(model.factory.log_stream is newfac.log_stream)



",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_broken_unicode,"def test_broken_unicode(self):
		model.factory.debug_level = ""error_on_warning""
		try:
			badval = b""\xFF\xFE\x02""
		except:
			badval = ""\xFF\xFE\x02""
		badjs = {""_label"": badval}
		self.assertRaises(model.MetadataError, model.factory._buildString,
			js=badjs)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_external,"def test_external(self):
		x = model.ExternalResource(ident=""1"")
		model.factory.elasticsearch_compatible = 1
		js = x._toJSON(done=None)
		self.assertTrue(type(js) == dict)
		model.factory.elasticsearch_compatible = 0
		js = x._toJSON(done=None)
		# testing unicode in 2, str in 3 :(
		self.assertTrue(type(js) != dict)		

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_process_tsv,"def test_process_tsv(self):
		expect = {u'subs': [u'E84_Information_Carrier'], u'label': u'Human-Made Object', u'className': u'HumanMadeObject', 
		u'subOf': u'E19_Physical_Object|E24_Physical_Human-Made_Thing', u'props': [], u'class': None, u'okay': u'1'}
		fn = 'cromulent/data/crm_vocab.tsv'
		vocabData = model.process_tsv(fn)
		man_made = vocabData['E22_Human-Made_Object']
		del man_made['desc']  # too long and volatile
		# check subs specifically - could be coming from an extension
		if man_made['subs'] != expect['subs']:
			del man_made['subs']
			del expect['subs']
		self.assertEqual(expect, man_made)


",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_build_classes,"def test_build_classes(self):
		tsv = ""\nClassName_full\tclass\tClassName_py\tClass Label\tClass Description\t\t1\t\n""
		fh = open('tests/temp.tsv', 'w')
		fh.write(tsv)
		fh.close()
		model.build_classes(""tests/temp.tsv"", ""ClassName_full"")
		from cromulent.model import ClassName_py
		self.assertEqual('Class Description', ClassName_py.__doc__)
		os.remove('tests/temp.tsv')

",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_build_class,"def test_build_class(self):
		tsv = ""\nClassName_full\tclass\tClassName_py2\tClass Label\tClass Description\t\t1\t\n""
		fh = open('tests/temp.tsv', 'w')
		fh.write(tsv)
		fh.close()
		vocabData = model.process_tsv('tests/temp.tsv')
		model.build_class('ClassName_full', model.BaseResource, vocabData)
		from cromulent.model import ClassName_py2
		self.assertEqual('Class Description', ClassName_py2.__doc__)
		os.remove('tests/temp.tsv')

",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_bad_autoid,"def test_bad_autoid(self):
		model.factory.auto_assign_id = True
		model.factory.auto_id_type = ""broken""
		self.assertRaises(model.ConfigurationError, model.factory.generate_id,
			""irrelevant"")

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_int,"def test_int(self):
		model.factory.auto_assign_id = True
		model.factory.auto_id_type = ""int""
		p = model.Person()
		p2 = model.Activity()
		self.assertEqual(int(p.id[-1]), int(p2.id[-1])-1)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_int_per_type,"def test_int_per_type(self):
		model.factory.auto_assign_id = True
		model.factory.auto_id_type = ""int-per-type""
		p = model.Person()
		p2 = model.Person()
		self.assertEqual(int(p.id[-1]), int(p2.id[-1])-1)
		p3 = model.Activity()
		self.assertEqual(int(p.id[-1]), int(p3.id[-1]))		

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_int_per_segment,"def test_int_per_segment(self):
		model.factory.auto_assign_id = True
		model.factory._auto_id_segments = {}
		model.factory.auto_id_type = ""int-per-segment""
		model.Activity._uri_segment = model.Person._uri_segment
		p = model.Person()
		p2 = model.Activity()
		self.assertEqual(int(p.id[-1]), int(p2.id[-1])-1)		
		p3 = model.TimeSpan()
		self.assertEqual(int(p.id[-1]), int(p3.id[-1]))		
			
	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_uuid,"def test_uuid(self):
		model.factory.auto_assign_id = True
		model.factory.auto_id_type = ""uuid""
		p = model.Person()
		self.assertTrue(p.id.startswith('urn:uuid:'))		

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_prefixes,"def test_prefixes(self):

		model.factory.prefixes = {'fish':'http://example.org/ns/'}
		p3 = model.Person('fish:3')
		self.assertEqual(p3.id, 'fish:3')
		self.assertEqual(p3._full_id, 'http://example.org/ns/3')

		model.factory.prefixes = {}
		p4 = model.Person('fish:4')
		self.assertTrue(p4.id.startswith(model.factory.base_url))

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_other_uris,"def test_other_uris(self):
		p1 = model.Person(ident=""tag:some-info-about-person"")
		self.assertEqual(p1.id, ""tag:some-info-about-person"")
		p2 = model.Person(ident=""info:ulan/500012345"")
		self.assertEqual(p2.id, ""info:ulan/500012345"")
		p3 = model.Person(ident=""some:random:thing:with:colons"")
		self.assertFalse(p3.id == ""some:random:thing:with:colons"")

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_init,"def test_init(self):
		self.assertEqual(self.artist.id, 'http://lod.example.org/museum/Person/00001')
		self.assertEqual(self.artist._type, 'crm:E21_Person')
		self.assertEqual(self.artist.type, 'Person')
		self.assertEqual(self.artist._label, 'Jane Doe')
		self.assertFalse(hasattr(self.artist, 'value'))
		self.assertFalse(hasattr(self.artist, 'has_type'))

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_list_all_props,"def test_list_all_props(self):
		props = self.artist.list_all_props()
		props.sort()
		self.assertEqual(props[-1], 'witnessed')
		self.assertTrue('_label' in props)
		self.assertTrue('identified_by' in props)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_dir,"def test_dir(self):
		props = dir(self.artist)
		self.assertTrue('identified_by' in props)


",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_set_magic_resource,"def test_set_magic_resource(self):
		artist = model.Person('00001', 'Jane Doe')
		son = model.Person('00002', 'John Doe')
		daughter = model.Person('00002', 'Jenny Doe')
		son2 = model.Person('00002', 'Jim Doe')
		artist._set_magic_resource('parent_of', son)
		self.assertEqual(artist.parent_of, [son])
		artist._set_magic_resource('parent_of', daughter)
		try:
			self.assertIn(son, artist.parent_of)
			self.assertIn(daughter, artist.parent_of)
		except:
			# 2.6 doesn't have assertIn
			self.assertTrue(son in artist.parent_of)
			self.assertTrue(daughter in artist.parent_of)

		artist._set_magic_resource('parent_of', son2)
		try:
			self.assertIn(son, artist.parent_of)
			self.assertIn(daughter, artist.parent_of)
			self.assertIn(son2, artist.parent_of)
		except:
			self.assertTrue(son in artist.parent_of)
			self.assertTrue(daughter in artist.parent_of)
			self.assertTrue(son2 in artist.parent_of)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_set_magic_resource_inverse,"def test_set_magic_resource_inverse(self):
		model.factory.materialize_inverses = True
		artist = model.Person('00001', 'Jane Doe')
		son = model.Person('00002', 'John Doe')
		artist._set_magic_resource('parent_of', son)
		self.assertEqual(son.parent, [artist])
		model.factory.materialize_inverses = False

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_validation_unknown,"def test_validation_unknown(self):
		model.factory.validate_properties = True
		artist = model.Person('00001', 'Jane Doe')		
		self.assertRaises(model.DataError, artist.__setattr__, 'unknown_property', 1)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_validation_off,"def test_validation_off(self):
		model.factory.validate_properties = False
		artist = model.Person('00001', 'Jane Doe')		
		artist.unknown_property = 1
		self.assertEqual(artist.unknown_property, 1)
		model.factory.validate_properties = True

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_eq_ident,"def test_eq_ident(self):
		self.assertEqual(self.artist, self.artist)
		self.assertEqual(self.son, model.Person('00002', 'John Doe'))
		self.assertEqual(self.son2, model.Person('00002', 'Jim Doe'))
		self.assertEqual(self.daughter, model.Person('00002', 'Jenny Doe'))

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_eq_value,"def test_eq_value(self):
		self.assertEqual(self.artist, model.Person('00001', 'Jane Doe'))
		self.assertEqual(self.son, self.son)
		self.assertEqual(self.son2, self.son2)
		self.assertEqual(self.daughter, self.daughter)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_in_value,"def test_in_value(self):
		people = (
			model.Person('00001', 'Jane Doe'), # artist
			model.Person('00002', 'Jim Doe')   # son2
		)
		self.assertIn(self.artist, people)
		self.assertNotIn(self.son, people)
		self.assertNotIn(self.daughter, people)
		self.assertIn(self.son2, people)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_neq,"def test_neq(self):
		self.assertNotEqual(self.artist, self.son)
		self.assertNotEqual(self.artist, model.Person('00001', 'Jane')) # label differs
		self.assertNotEqual(self.artist, self.daughter)
		self.assertNotEqual(self.artist, self.son2)
		self.assertNotEqual(self.son, self.daughter)
		self.assertNotEqual(self.son, self.son2)
		self.assertNotEqual(self.daughter, self.son2)

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_model.py,,test_equality,"def test_equality(self):
		from cromulent.model import factory
		place1 = self.nation('Belgium', 'http://vocab.getty.edu/aat/300128207')
		place2 = self.nation('Belgium', 'http://vocab.getty.edu/aat/300128207')
		self.assertEqual(place1, place2)

",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_multiple_instantiation.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_multiple_instantiation.py,,test_destruction,"def test_destruction(self):
		expect = OrderedDict([('id', u'http://lod.example.org/museum/Activity/1'), 
			('type', ['Destruction', 'Activity']), ('_label', ""Test Destruction"")])
		mi.DestructionActivity._okayToUse = 1
		da = mi.DestructionActivity(""1"")
		da._label = ""Test Destruction""
		factory.context_uri = """"
		dajs = factory.toJSON(da)
		self.assertEqual(dajs, expect)

",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_reader.py,,test_attrib_assign,"def test_attrib_assign(self):
		vocab.add_attribute_assignment_check()

		data = """"""
		{
		  ""id"": ""https://linked.art/example/activity/12"", 
		  ""type"": ""AttributeAssignment"", 
		  ""assigned"": {
		    ""id"": ""https://linked.art/example/name/10"", 
			""type"": ""Name"", 
		    ""content"": ""Exhibition Specific Name""
		  }, 
		  ""assigned_property"": ""identified_by"", 
		  ""assigned_to"": {
		    ""id"": ""https://linked.art/example/object/12"", 
		    ""type"": ""HumanMadeObject"", 
		    ""_label"": ""Real Painting Name""
		  }
		}
		""""""
		d = self.reader.read(data)
		self.assertTrue(isinstance(d, AttributeAssignment))


	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,,test_class,"def test_class(self):
		vocab.register_aat_class(""TestObject1"", {""parent"": model.HumanMadeObject, ""id"": ""1"", ""label"": ""example 1""})
		from cromulent.vocab import TestObject1
		self.assertEqual(TestObject1._classification[0].id, 'http://vocab.getty.edu/aat/1')

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,,test_instance,"def test_instance(self):
		vocab.register_instance(""TestMaterial2"", {""parent"": model.Material, ""id"": ""2"", ""label"": ""example 2""})
		self.assertTrue('TestMaterial2' in vocab.instances)
		tm2 = vocab.instances['TestMaterial2']
		self.assertEqual(tm2.id, ""http://vocab.getty.edu/aat/2"")

	",False
-1,crom,https://github.com/thegetty/crom/blob/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,https://raw.githubusercontent.com/thegetty/crom/98bb6be4e32b4c81eb7e0b5e841a915b015abaf0/tests/test_vocab.py,,test_art_setter,"def test_art_setter(self):
		p = model.HumanMadeObject(""a"", art=1)
		p._label = ""a""
		pj = p._toJSON(done={})
		self.assertFalse(pj.get('classified_as', None))
		vocab.add_art_setter()
		p2 = vocab.Painting(""b"", art=1)
		p2j = p2._toJSON(done={})

	",False
586,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_resilient_between_timecaches,"def test_resilient_between_timecaches():
    ",True
587,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_concurrent_done_status,"@pytest.mark.parametrize('throw', [False, True])
def test_concurrent_done_status(throw):
    from threading import Event

    continue_func = Event()

    ",True
588,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_concurrent_done_status,"@pytest.mark.parametrize('throw', [False, True])
def test_concurrent_done_status(throw):
    from threading import Event

    continue_func = Event()

    ",True
589,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_api,"@pytest.mark.usefixtures('concurrency_enabled_and_disabled')
def test_multiexception_api():
    with pytest.raises(MultiException) as exc:
        MultiObject([0, 5]).call(lambda i: 10 // i)

    failed, sucsessful = exc.value.futures

    assert failed.done()
    with pytest.raises(ZeroDivisionError):
        failed.result()
    assert isinstance(failed.exception(), ZeroDivisionError)

    assert sucsessful.done()
    assert sucsessful.result() == 2
    assert sucsessful.exception() is None


",True
590,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_api,"@pytest.mark.usefixtures('concurrency_enabled_and_disabled')
def test_multiexception_api():
    with pytest.raises(MultiException) as exc:
        MultiObject([0, 5]).call(lambda i: 10 // i)

    failed, sucsessful = exc.value.futures

    assert failed.done()
    with pytest.raises(ZeroDivisionError):
        failed.result()
    assert isinstance(failed.exception(), ZeroDivisionError)

    assert sucsessful.done()
    assert sucsessful.result() == 2
    assert sucsessful.exception() is None


",True
591,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_pickling,"def test_multiexception_pickling():
    import pickle
    import multiprocessing

    ",True
592,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiexception_types,"def test_multiexception_types():

    ",True
593,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_1,"def test_multiobject_1():
    m = MultiObject(range(10))

    ",True
594,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_exceptions,"def test_multiobject_exceptions():

    assert MultiException[ValueError] is MultiException[ValueError]
    assert issubclass(MultiException[UnicodeDecodeError], MultiException[UnicodeError])
    assert issubclass(MultiException[UnicodeDecodeError], MultiException[ValueError])

    with pytest.raises(AssertionError):
        MultiException[0]

    with pytest.raises(MultiException):
        MultiObject(range(5)).call(lambda n: 1 / n)

    with pytest.raises(MultiException[Exception]):
        MultiObject(range(5)).call(lambda n: 1 / n)

    with pytest.raises(MultiException[ZeroDivisionError]):
        MultiObject(range(5)).call(lambda n: 1 / n)

    try:
        MultiObject(range(5)).call(lambda n: 1 / n)
    except MultiException[ValueError] as exc:
        assert False
    except MultiException[ZeroDivisionError] as exc:
        assert len(exc.actual) == 1
        assert isinstance(exc.one, ZeroDivisionError)
    else:
        assert False

    with pytest.raises(MultiException[ArithmeticError]):
        try:
            MultiObject(range(5)).call(lambda n: 1 / n)
        except ZeroDivisionError:
            assert False  # shouldn't be here
        except MultiException[ValueError]:
            assert False  # shouldn't be here


",True
595,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_logging,"def test_multiobject_logging():
    m = MultiObject(range(4), log_ctx=""abcd"", initial_log_interval=0.1)

    ",True
596,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_context_stacks,"def test_thread_context_stacks():
    TC = ThreadContexts(stacks=('i', 'j'))
    assert TC.i == TC.j == []

    with TC(i='a'):
        ",True
597,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_contexts_counters,"def test_thread_contexts_counters():
    TC = ThreadContexts(counters=('i', 'j'))
    assert TC.i == TC.j == 0

    with TC(i=1):
        ",True
598,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_stacks,"def test_thread_stacks():
    with concurrent(sleep, .1, threadname='sleep'):
        print(get_thread_stacks().render())


",True
599,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_exceptions.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_exceptions.py,,test_pickle_texception,"def test_pickle_texception():
    import pickle

    t1 = T(what=""happened"", a=1, b=Bunch(x=[1, 2, 3], y=range(5)))
    t2 = pickle.loads(pickle.dumps(t1))

    assert t1.render() == t2.render()
    assert t1._params == t2._params
",True
600,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_ctx,"def test_indent_around_ctx(get_log):

    @logger.indented(""hey"")
    @contextmanager
    ",True
601,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_function,"def test_indent_around_function(get_log):

    @logger.indented(""hey"")
    ",True
602,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_logging.py,,test_indent_around_generator,"def test_indent_around_generator(get_log):

    @logger.indented(""hey"")
    ",True
603,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_rwlock.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_rwlock.py,,test_rwlock,"def test_rwlock():

    main_ctrl = threading.Event()
    reader_ctrl = threading.Event()
    writer_ctrl = threading.Event()
    lock = RWLock(""test"")

    state = Bunch(reading=False, writing=False)

    ",True
604,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_async,"def test_async():
    from threading import get_ident

    main = get_ident()

    @on_async_test.register(asynchronous=True)
    ",True
605,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_ctx,"def test_ctx():
    result = []

    ",True
606,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_ctx_with_identifier,"def test_ctx_with_identifier():
    ",True
607,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_priorities,"def test_priorities():

    l = []

    @on_test.register(priority=PRIORITIES.LAST)
    ",True
608,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_priorities_async,"def test_priorities_async():

    l = []
    import time

    @on_test.register(asynchronous=True, priority=PRIORITIES.FIRST)
    ",True
609,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_registration_context,"def test_registration_context():

    ",True
610,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref,"def test_signal_weakref():
    """"""
    Test that signals handlers of methods are deleted when their objects get collected
    """"""
    import gc

    ",True
611,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_complex_descriptors,"def test_signal_weakref_complex_descriptors():
    import gc
    from easypy.lockstep import lockstep

    ",True
612,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_after,"def test_signal_weakref_context_manager_delete_after():
    import gc

    result = []

    ",True
613,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_after_with_identifier,"def test_signal_weakref_context_manager_delete_after_with_identifier():
    import gc

    result = []

    ",True
614,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_during,"def test_signal_weakref_context_manager_delete_during():
    import gc

    result = []

    ",True
615,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_context_manager_delete_during_with_identifier,"def test_signal_weakref_context_manager_delete_during_with_identifier():
    import gc

    result = []

    ",True
616,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_signal_weakref_with_identifier,"def test_signal_weakref_with_identifier():
    import gc

    ",True
617,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_identifier,"def test_simple_signal_object_identifier():

    on_test_identifier(obj='xxx')

    ",True
618,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_identifier_attribute,"def test_simple_signal_object_identifier_attribute():

    ",True
619,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_registration,"def test_simple_signal_object_registration():

    ",True
620,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_object_wo_identifier,"def test_simple_signal_object_wo_identifier():

    ",True
621,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_signals.py,,test_simple_signal_registration,"def test_simple_signal_registration():

    @on_test.register
    ",True
622,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition,"def test_logged_condition():
    cond = LoggedCondition('test', log_interval=.1)

    progress = 0
    executed = []

    ",True
623,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition_exception,"def test_logged_condition_exception():
    cond = LoggedCondition('test', log_interval=.2)

    should_throw = False

    ",True
624,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_condition_waited_for,"def test_logged_condition_waited_for():
    cond = LoggedCondition('test', log_interval=15)
    progress = 0
    executed = []

    ",True
625,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_logged_lock,"def test_logged_lock():
    lock = LoggedRLock(""test"", lease_expiration=1, log_interval=.2)

    step1 = threading.Event()
    step2 = threading.Event()

    ",True
626,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_failing_context_manager,"def test_synchronization_coordinator_failing_context_manager():
    ",True
627,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_timeout,"def test_synchronization_coordinator_timeout():
    mo = MultiObject(range(3))

    ",True
628,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_multiobject_exception,"def test_synchronization_coordinator_with_multiobject_exception():
    mo = MultiObject(range(3))

    executed = []

    ",True
629,easypy,https://github.com/weka-io/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka-io/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_log_predicate,"def test_wait_log_predicate(get_log):
    ",True
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,,test_aliasing_static,"def test_aliasing_static():

    @aliases(""this"")
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,,test_aliasing_dynamic,"def test_aliasing_dynamic():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,,test_aliasing_inherit,"def test_aliasing_inherit():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_aliasing.py,,test_aliasing_infinite_recursion_exception,"def test_aliasing_infinite_recursion_exception():
    @aliases('bar', static=False)
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_bunch.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_bunch.py,,test_bunch_recursion,"def test_bunch_recursion():
    x = Bunch(a='a', b=""b"", d=Bunch(x=""axe"", y=""why""))
    x.d.x = x
    x.d.y = x.b
    print(x)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_bunch.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_bunch.py,,test_bunchify,"def test_bunchify():
    x = bunchify(dict(a=[dict(b=5), 9, (1, 2)], c=8))
    assert x.a[0].b == 5
    assert x.a[1] == 9
    assert isinstance(x.a[2], tuple)
    assert x.c == 8
    assert x.pop(""c"") == 8
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_timecache,"def test_timecache():
    ts = 0
    data = Bunch(a=0, b=0)

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_timecache_method,"def test_timecache_method():
    ts = 0

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_timecache_getattr,"def test_timecache_getattr():
    ts = 0

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_persistent_cache,"def test_persistent_cache(persistent_cache_path):
    ps = PersistentCache(persistent_cache_path, version=1)
    TEST_KEY = ""test_key""
    TEST_VALUE = ""test_value""
    ps.set(TEST_KEY, TEST_VALUE)
    assert ps.get(TEST_KEY) == TEST_VALUE, ""Value does not match set value""

    ps = PersistentCache(persistent_cache_path, version=1)
    assert ps.get(TEST_KEY) == TEST_VALUE, ""Value does not match set value after reopen""

    ps = PersistentCache(persistent_cache_path, version=2)
    with pytest.raises(KeyError):  # Changed version should invalidate cache
        ps.get(TEST_KEY)

    # Default values
    assert ps.get(TEST_KEY, default=None) is None, ""Wrong default value returnen(not None)""
    assert ps.get(TEST_KEY, default=""1"") == ""1"", ""Wrong default value returned""

    # Cached func should be called only once
    value_generated = False
    use_cache = True

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_locking_timecache,"def test_locking_timecache():
    from easypy.concurrency import MultiObject

    # Cached func should be called only once
    value_generated = False

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test,"def test(x):
        nonlocal value_generated
        if value_generated:
            raise UnnecessaryFunctionCall()
        value_generated = True
        return True

    MultiObject(range(10)).call(lambda x: test(x=x))


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_caching.py,,test_caching_gc_leaks,"@pytest.mark.parametrize('cache_decorator', [cached_property, timecache()])
def test_caching_gc_leaks(cache_decorator):
    """"""
    Make sure that the cache does not prevent GC collection once the original objects die
    """"""

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_filter,"def test_collection_filter():
    lst = ListCollection(""abcdef"")
    assert lst.filtered(lambda c: c == 'a').sample(1) == ['a']


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_reprs,"def test_collection_reprs():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_partial_dict,"def test_partial_dict():
    assert partial_dict({'a': 1, 'b': 2, 'c': 3}, ['a', 'b']) == {'a': 1, 'b': 2}


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_separate1,"def test_separate1():
    a, b = separate(range(5), key=lambda n: n < 3)
    assert a == [0, 1, 2]
    assert b == [3, 4]


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_separate2,"def test_separate2():
    a, b = separate(range(5))
    assert a == [1, 2, 3, 4]
    assert b == [0]


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample,"def test_collection_sample():
    l = ListCollection(""abcdef"")
    assert len(l.sample(2.0)) == 2

    with pytest.raises(AssertionError):
        l.sample(1.5)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_select,"def test_collection_select():
    assert len(L.select(name='a', id='1')) == 100


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_select_no_unique,"def test_collection_select_no_unique():
    with pytest.raises(AssertionError):
        L.select(name=UNIQUE)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_too_much,"def test_collection_sample_too_much():
    len(L.select(name='a', id='2').sample(100)) == 100
    with pytest.raises(ObjectNotFound):
        L.select(name='a', id='2').sample(101)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_too_many,"def test_collection_sample_too_many():
    len(L.select(name='a', id='2').sample(100)) == 100
    with pytest.raises(TooManyObjectsFound):
        L.get(name='a', id='2')


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique0,"def test_collection_sample_unique0():
    assert not L.sample(0, name=UNIQUE)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique1,"def test_collection_sample_unique1():
    s = L.sample(3, name=UNIQUE)
    assert len({b.name for b in s}) == 3


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique2,"def test_collection_sample_unique2():
    x, = L.sample(1, name=UNIQUE, id='1')
    assert x.id == '1'


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique3,"def test_collection_sample_unique3():
    s = L.sample(6, name=UNIQUE, id=UNIQUE)
    assert len({(b.name, b.id) for b in s}) == 6


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique4,"def test_collection_sample_unique4():
    with pytest.raises(ObjectNotFound):
        L.sample(7, name=UNIQUE)  # too many


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique5,"def test_collection_sample_unique5():
    s = L.sample(3, name=UNIQUE, id=UNIQUE, v=UNIQUE)
    assert len({(b.name, b.id) for b in s}) == 3


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collection_sample_unique_diverse,"def test_collection_sample_unique_diverse():
    x = Counter(repr(x) for _ in range(100) for x in L.sample(1, name=UNIQUE))
    assert len(x) == 10


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_collections_slicing,"def test_collections_slicing():
    L = ListCollection(""abcdef"")
    assert L[0] == 'a'
    assert L[-1] == 'f'
    assert L[:2] == list('ab')
    assert L[-2:] == list('ef')
    assert L[::2] == list('ace')
    assert L[::-2] == list('fdb')


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_filters_order,"def test_filters_order():
    l = ListCollection([Bunch(a='b', b=5), Bunch(a='c', c='c')])
    filterd_l = l.filtered(a='b').select(lambda o: o.b > 4)
    assert len(filterd_l) == 1

    with pytest.raises(AttributeError):
        filterd_l = l.select(lambda o: o.b > 4)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_collections.py,,test_simple_object_collection,"def test_simple_object_collection():
    S = SimpleObjectCollection(L, ID_ATTRIBUTE='id')
    assert S.get_next(S['5']) == S['6']
    assert S.get_prev(S['5']) == S['4']
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_colors.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_colors.py,,test_colors,"def test_colors():
    from easypy.colors import Colorized, uncolored, colorize, register_colorizers

    register_colorizers(bad=(""red"", ""blue""))

    opts = {
        str(Colorized(""RED(BLUE)<<XXX>>"")),
        str(Colorized(""RED(BLUE)@[XXX]@"")),
        str(Colorized(""RED(BLUE)@{XXX}@"")),

        str(colorize(""RED(BLUE)<<XXX>>"")),
        str(colorize(""RED(BLUE)@[XXX]@"")),
        str(colorize(""RED(BLUE)@{XXX}@"")),

        str(colorize(""BAD<<XXX>>"")),
        str(colorize(""BAD@[XXX]@"")),
        str(colorize(""BAD@{XXX}@"")),
    }

    assert len(opts) == 1
    [ret] = opts
    assert ret == ""\x1b[1;44;31mXXX\x1b[0m""
    assert uncolored(ret) == ""XXX""


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_colors.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_colors.py,,test_empty_markup,"def test_empty_markup():
    from easypy.colors import Colorized, colorize

    opts = {
        colorize(""BLUE<<>>""),
        colorize(""BLUE@[]@""),
        colorize(""BLUE@{}@""),
        str(Colorized(""BLUE<<>>"")),
        str(Colorized(""BLUE@[]@"")),
        str(Colorized(""BLUE@{}@"")),
    }

    assert len(opts) == 1
    [ret] = opts

    assert ret == """"
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_thread_contexts_counters_multiobject,"def test_thread_contexts_counters_multiobject():
    TC = ThreadContexts(counters=('i',))
    assert TC.i == 0

    print(""---"")

    @TC(i=True)
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test,"def test(n):
        print(n, TC._context_data)
        sleep(.1)
        return TC.i

    test(0)
    ret = MultiObject(range(10)).call(test)
    assert set(ret) == {1}


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_0,"def test_multiobject_0():
    x = MultiObject([]).foo()
    assert len(x) == 0
    assert x.__class__.CONCESTOR is object


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_concurrent_find_found,"def test_multiobject_concurrent_find_found():
    m = MultiObject(range(10))
    from time import sleep
    ret = m.concurrent_find(lambda n: sleep(n / 10) or n)  # n==0 is not nonzero, so it's not eligible
    assert ret == 1


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_concurrent_find_not_found,"def test_multiobject_concurrent_find_not_found():
    m = MultiObject(range(10))
    ret = m.concurrent_find(lambda n: n < 0)
    assert ret is False

    m = MultiObject([0] * 5)
    ret = m.concurrent_find(lambda n: n)
    assert ret == 0


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_concurrent_find_proper_shutdown,"def test_multiobject_concurrent_find_proper_shutdown():
    executed = []
    m = MultiObject(range(10), workers=1)
    ret = m.concurrent_find(lambda n: [print(n) or executed.append(n) or sleep(.01)])
    assert ret
    sleep(1)  # wait for potential stragglers
    assert max(executed) <= 2


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_zip_with,"def test_multiobject_zip_with():
    m = MultiObject(range(4))

    with pytest.raises(AssertionError):
        m.zip_with(range(3), range(5))  # too few objects

    m.zip_with(range(5), range(6))  # too many objects

    ret = m.zip_with(range(1, 5)).call(lambda a, b: a + b).T
    assert ret == (1, 3, 5, 7)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_enumerate,"def test_multiobject_enumerate():
    m = MultiObject(range(5), log_ctx=""abcd"")

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_types,"def test_multiobject_types():
    assert isinstance(MultiObject(range(5)), MultiObject[int])
    assert not isinstance(MultiObject(range(5)), MultiObject[str])

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_concurrency.py,,test_multiobject_namedtuples,"def test_multiobject_namedtuples():
    from collections import namedtuple

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,,test_simple,"def test_simple():
    with ctx() as i:
        assert i == 2
        assert X == [1]
    assert not X


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,,test_function,"def test_function():
    @ctx()
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,,test_generator,"def test_generator():
    @ctx()
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,,test_ctx,"def test_ctx():
    @ctx()
    @contextmanager
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_contexts.py,,test_breakable_section,"def test_breakable_section():

    a = []
    with breakable_section() as Break1:
        with breakable_section() as Break2:
            with breakable_section() as Break3:
                raise Break2()
                a += [1]  # this will be skipped
            a += [2]  # this will be skipped
        a += [3]  # landing here
    a += [4]

    assert Break1 is not Break2
    assert Break2 is not Break3
    assert Break3 is not Break1
    assert a == [3, 4]
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_kwargs_resilient,"def test_kwargs_resilient():
    @kwargs_resilient
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_lazy_decorator_lambda,"def test_lazy_decorator_lambda():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_lazy_decorator_attribute,"def test_lazy_decorator_attribute():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_lazy_decorator_with_timecache,"def test_lazy_decorator_with_timecache():
    from easypy.caching import timecache

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_ensure_same_defaults,"def test_ensure_same_defaults():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_ensure_same_defaults_skipping_params_with_no_default,"def test_ensure_same_defaults_skipping_params_with_no_default():
    @ensure_same_defaults(lambda a=1, b=2: ...)
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_decorations.py,,test_ensure_same_defaults_ignore,"def test_ensure_same_defaults_ignore():
    @ensure_same_defaults(lambda a=1, b=2: ..., ignore=('b',))
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_deprecation.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_deprecation.py,,test_deprecated_arguments,"@pytest.mark.filterwarnings(""ignore::DeprecationWarning"")
def test_deprecated_arguments():
    @deprecated_arguments(foo='bar')
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,,test_hexdump_functions,"def test_hexdump_functions():
    assert from_hexdump(hexdump(_SAMPLE_DATA)) == _SAMPLE_DATA
    assert from_hexdump(hexdump(_SAMPLE_DATA, 24, 2)) == _SAMPLE_DATA
    assert from_hexdump(hexdump(_SAMPLE_DATA, 16, 1, False)) == _SAMPLE_DATA
    assert from_hexdump(hexdump(_SAMPLE_DATA, 4, 4)) == _SAMPLE_DATA

    assert _SAMPLE_DATA.decode(""hexdump_24_2"") == hexdump(_SAMPLE_DATA, 24, 2)
    assert hexdump(_SAMPLE_DATA, 24, 2).encode(""hexdump"") == _SAMPLE_DATA


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,,test_indentable_text_buffer,"def test_indentable_text_buffer():
    from io import StringIO

    buff = IndentableTextBuffer(""Exc"")
    buff.write(""a"")
    buff.write(""b"")
    with buff.indent(""Header2""):
        buff.write(hexdump(_SAMPLE_DATA, 24, 8))
    buff.write(""hello"")
    buff.write(""world"")
    with buff.indent(""Header2""):
        # buff.write(format_in_columns([str(i) for i in range(100)], 50))
        with buff.indent(""This should be pruned away""):
            with buff.indent(""This should be pruned away""):
                pass
        with buff.indent(""Header3""):
            buff.write(""text3"")
        buff.write(""text2"")

    f = StringIO()
    buff.render(prune=True, textual=True, width=120, file=f)
    assert open(""tests/indentable_buffer1.txt"", ""r"").read() == f.getvalue()

    f = StringIO()
    buff.render(prune=True, textual=False, width=40, overflow=""ignore"", file=f)
    assert open(""tests/indentable_buffer2.txt"", ""r"").read() == f.getvalue()

    f = StringIO()
    buff.render(prune=True, textual=False, width=40, edges=False, file=f)
    assert open(""tests/indentable_buffer3.txt"", ""r"").read() == f.getvalue()


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,,test_format_table_with_titles,"def test_format_table_with_titles():
    table = [
        'abc',
        range(3),
        [None, True, False],
        [dict(x='x'), b'bytes', 'string']
    ]

    output = (
        ""a         |b       |c     \n""
        ""--------------------------\n""
        ""         0|       1|     2\n""
        ""None      |True    |False \n""
        ""{'x': 'x'}|b'bytes'|string\n"")

    assert output == format_table(table)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_humanize.py,,test_format_table_without_titles,"def test_format_table_without_titles():
    table = [
        'abc',
        range(3),
        [None, True, False],
        [dict(x='x'), b'bytes', 'string']
    ]

    output = (
        ""a         |b       |c     \n""
        ""         0|       1|     2\n""
        ""None      |True    |False \n""
        ""{'x': 'x'}|b'bytes'|string\n"")

    assert output == format_table(table, titles=False)
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_side_effects,"def test_lockstep_side_effects():
    calculation_result = 0

    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_run_as_function,"def test_lockstep_run_as_function():
    calculation_result = 0

    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_class_method,"def test_lockstep_class_method():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_wrong_step_name,"def test_lockstep_wrong_step_name():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_not_exhausted,"def test_lockstep_not_exhausted():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_exhausted_prematurely,"def test_lockstep_exhausted_prematurely():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_exhaust,"def test_lockstep_exhaust():
    finished = False

    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_yielded_values,"def test_lockstep_yielded_values():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_nested,"def test_lockstep_nested():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_step_util,"def test_lockstep_step_util():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_step_util_wrong_order,"def test_lockstep_step_util_wrong_order():
    @lockstep
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_lockstep.py,,test_lockstep_as_static_and_class_methods,"def test_lockstep_as_static_and_class_methods():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,,test_easy_meta_before_cls_init,"def test_easy_meta_before_cls_init():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,,test_easy_meta_after_cls_init,"def test_easy_meta_after_cls_init():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,,test_easy_meta_get_all_subclasses,"def test_easy_meta_get_all_subclasses():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_meta.py,,test_easy_meta_multi_inheritance,"def test_easy_meta_multi_inheritance():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_misc.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_misc.py,,test_tokens,"def test_tokens():
    from easypy.tokens import AUTO, if_auto, MAX

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,,test_random_nice_name,"def test_random_nice_name():
    for _ in range(20):
        length = random.randint(64, 85)
        entropy = random.randint(1, 3)
        sep = random.choice(['_', '..'])
        name = random_nice_name(max_length=length, entropy=entropy, sep=sep)
        assert len(name) <= length


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,,test_random_nice_name_raises,"def test_random_nice_name_raises():
    with pytest.raises(ValueError):
        random_nice_name(max_length=10, entropy=3)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_randutils.py,,test_random_filename,"def test_random_filename():
    fn = random_filename(10)
    assert len(fn) == 10

    fn = random_filename((10, 11))
    assert 10 <= len(fn) <= 11

    fn = random_filename((11, 11))
    assert len(fn) == 11
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,,test_loads,"def test_loads():
    semver = SemVer.loads('3.4.5.6-hello')
    assert semver.build == 6
    assert semver.patch == 5
    assert semver.minor == 4
    assert semver.major == 3
    assert semver.tag == 'hello'

    semver = SemVer.loads('3_4_5:hello', separator='_', tag_separator=':')
    assert semver.build is None
    assert semver.patch == 5
    assert semver.minor == 4
    assert semver.major == 3
    assert semver.tag == 'hello'


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,,test_dumps,"def test_dumps():
    version = '3.4.5.6-hello'
    assert SemVer.loads(version).dumps() == version

    string = SemVer.loads(version).dumps(separator='_', tag_separator=':')
    assert string == version.replace('.', '_').replace('-', ':')


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,,test_copy,"def test_copy():
    semver = SemVer.loads('1000.2000.3000.5000-10102010')
    assert semver.copy() == semver

    assert semver.copy(major=1500).major == 1500


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,,test_comparison,"def test_comparison():
    semver1 = SemVer.loads('2.1-aaa')
    semver2 = SemVer.loads('2.1-bbb')
    semver3 = SemVer.loads('2.1.2-a')
    semver4 = SemVer.loads('2.2')
    assert semver1 < semver2 < semver3 < semver4

    assert semver1 == semver2.copy(tag='aaa')


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_semver.py,,test_bumping,"def test_bumping():
    semver = SemVer.loads('1.1.1.1-aaa')
    assert semver.bump_build().dumps() == '1.1.1.2'

    # Build part is only printed when it is set
    assert semver.bump_patch().dumps() == '1.1.2'
    assert semver.bump_minor().dumps() == '1.2.0'
    assert semver.bump_major().dumps() == '2.0.0'
    assert semver.bump_major(clear_tag=False).dumps() == '2.0.0-aaa'
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_shared_contextmanager,"def test_shared_contextmanager():

    data = []

    @shared_contextmanager
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_shared_contextmanager_method,"def test_shared_contextmanager_method():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_shared_contextmanager_method_does_not_keep_object_alive_after_done,"def test_shared_contextmanager_method_does_not_keep_object_alive_after_done():
    import weakref
    import gc

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_wait_for_everyone,"def test_synchronization_coordinator_wait_for_everyone():
    mo = MultiObject(range(3))

    sync = SynchronizationCoordinator(len(mo))
    executed = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_collect_and_call_once,"def test_synchronization_coordinator_collect_and_call_once():
    mo = MultiObject(range(3))

    sync = SynchronizationCoordinator(len(mo))
    executed = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_abandon,"def test_synchronization_coordinator_abandon():
    mo = MultiObject(range(3))

    sync = SynchronizationCoordinator(len(mo))
    executed = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_exception_in_collect_and_call_once,"def test_synchronization_coordinator_exception_in_collect_and_call_once():
    mo = MultiObject(range(3))

    sync = SynchronizationCoordinator(len(mo))
    times_called = 0

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_multiobject,"def test_synchronization_coordinator_with_multiobject():
    mo = MultiObject(range(3))

    executed = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_multiobject_early_return,"def test_synchronization_coordinator_with_multiobject_early_return():
    mo = MultiObject(range(3))

    executed = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_multiobject_method,"def test_synchronization_coordinator_with_multiobject_method():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_synchronization_coordinator_with_context_manager,"def test_synchronization_coordinator_with_context_manager():
    mo = MultiObject(range(3))

    executed = []

    @contextmanager
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_tag_along_thread,"def test_tag_along_thread():
    counter = 0

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_sync_singleton,"def test_sync_singleton():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_exception,"def test_wait_exception():
    with pytest.raises(Exception, match="".*`message` is required.*""):
        wait(0.1, pred=lambda: True)

    wait(0.1)
    wait(0.1, pred=lambda: True, message='message')
    wait(0.1, pred=lambda: True, message=False)
    repeat(0.1, callback=lambda: True)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_better_exception,"def test_wait_better_exception():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_better_exception_nested,"def test_wait_better_exception_nested():

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_iter_wait_warning,"def test_iter_wait_warning():
    with pytest.raises(Exception, match="".*`message` is required.*""):
        for _ in iter_wait(0.1, pred=lambda: True):
            pass

    no_warn_iters = [
        iter_wait(0.1),
        iter_wait(0.1, pred=lambda: True, message='message'),
        iter_wait(0.1, pred=lambda: True, throw=False),
        iter_wait(0.1, pred=lambda: True, message=False)
    ]
    for i in no_warn_iters:
        for _ in i:
            pass


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_iter_wait_progress_inbetween_sleep,"def test_iter_wait_progress_inbetween_sleep():
    data = Bunch(a=3)

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_iter_wait_progress_total_timeout,"def test_iter_wait_progress_total_timeout():
    data = Bunch(a=1000)

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_long_predicate,"def test_wait_long_predicate():
    """"""
    After the actual check the predicate is held for .3 seconds. Make sure
    that we don't get a timeout after .2 seconds - because the actual
    condition should be met in .1 second!
    """"""

    t = Timer()

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_timeout_exception,"def test_timeout_exception():
    exc = None

    with timing() as t:
        try:
            wait(0.5, lambda: False, message=False)
        except TimeoutException as e:
            exc = e

    assert exc.duration > 0.5
    assert exc.start_time >= t.start_time
    assert exc.start_time < t.stop_time
    assert t.duration > exc.duration


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_with_callable_message,"def test_wait_with_callable_message():
    val = ['FOO']

    with pytest.raises(TimeoutException) as e:
        ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_sync.py,,test_wait_do_something_on_final_attempt,"@pytest.mark.parametrize(""multipred"", [False, True])
def test_wait_do_something_on_final_attempt(multipred):
    data = []

    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_timing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_timing.py,,test_time_interval1,"def test_time_interval1():

    st = 150000000
    t = Timer(st)
    t.t1 = t.t0 + 1

    ti = t.to_interval()

    assert t in ti

    assert t.t0 in ti
    assert t.t1 in ti

    assert t.t0 - 1 not in ti
    assert t.t1 + 1 not in ti

    assert ti.duration == t.duration
    assert ti.duration == 1
    assert ti.duration_delta.total_seconds() == 1

    assert str(ti) == '<TI 05:40:00..(1s)..05:40:01>'

    assert str(t.to_interval().to_timer()) == str(t)


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_timing.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_timing.py,,test_time_interval2,"def test_time_interval2():
    st = 150000000
    ti = TimeInterval()
    assert str(ti) == '<TI Eternity>'

    ti = TimeInterval(from_time=st)
    assert str(ti) == '<TI 05:40:00...>'

    ti = TimeInterval(from_time=st, to_time=st)
    assert str(ti) == '<TI 05:40:00..(0.0ms)..05:40:00>'

    ti = TimeInterval(to_time=st)
    assert str(ti) == '<TI ...05:40:00>'
",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_validations,"def test_typed_struct_validations():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_nesting,"def test_typed_struct_nesting():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_comparison,"def test_typed_struct_comparison():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_list_fields,"@pytest.mark.parametrize(""use_full_syntax"", [True, False])
def test_typed_struct_list_fields(use_full_syntax):
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_dict_fields,"@pytest.mark.parametrize(""use_full_syntax"", [True, False])
def test_typed_struct_dict_fields(use_full_syntax):
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_bunch_fields,"@pytest.mark.parametrize(""use_full_syntax"", [True, False])
def test_typed_struct_bunch_fields(use_full_syntax):
    if use_full_syntax:
        ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_field_defaults,"def test_typed_struct_field_defaults():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_metadata,"def test_typed_struct_metadata():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_convert,"def test_typed_struct_convert():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_preprocess,"@pytest.mark.parametrize(""use_helper_methods"", [True, False])
def test_typed_struct_preprocess(use_helper_methods):
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_collection_type_verification,"def test_typed_struct_collection_type_verification():
    """"""
    To prevent things like this:

        In [1]: from easypy import typed_struct as ts

        In [2]: ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_auto_field_wrapping_dsl,"def test_typed_struct_auto_field_wrapping_dsl():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_inheritance,"def test_typed_struct_inheritance():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_repr,"def test_typed_struct_repr():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_typed_struct.py,,test_typed_struct_hash,"def test_typed_struct_hash():
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_units.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_units.py,,test_data_sizes,"def test_data_sizes():
    assert ""{0!s}, {0!r}, {0:10text}"".format(byte) == ""byte, byte,     1 byte""
    assert ""{0!s}, {0!r}, {0:10text}"".format(1000 * byte) == ""KB, KB,       1 KB""
    assert ""{0!s}, {0!r}, {0:10text}"".format(1020 * byte) == ""1020bytes, 1020*bytes,  1020bytes""
    assert ""{0!s}, {0!r}, {0:10text}"".format(1024 * byte) == ""KiB, KiB,      1 KiB""
    assert ""{0!s}, {0!r}, {0:10text}"".format(2**20 * byte) == ""MiB, MiB,      1 MiB""
    assert ""{0!s}, {0!r}, {0:10text}"".format(2**21 * byte) == ""2MiB, 2*MiB,       2MiB""
    assert ""{0!s}, {0!r}, {0:10text}"".format(2**21 * byte + 100) == ""~2.0MiB, 2097252*bytes,    ~2.0MiB""
    assert ""{0!s}, {0!r}, {0:10text}"".format(2**41 * byte + 100) == ""~2.0TiB, 2199023255652*bytes,    ~2.0TiB""


",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_units.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_units.py,,test_operators,"def test_operators():

    assert (byte * 1024) == KiB
    assert KiB / 1024 == byte
    assert KiB / KiB == 1
    assert KiB / 7 == 146.28571428571428
    assert KiB // 7 == 146
    assert 2050 // KiB == (2 * byte)

    # check that __r*__ overloads are used when the unit doesn't support the right-hand operand
    ",False
-1,easypy,https://github.com/weka/easypy/blob/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_ziplog.py,https://raw.githubusercontent.com/weka/easypy/9501c3ee03dcb1630e58cbb73b1647056907bcea/tests/test_ziplog.py,,test_ziplog,"def test_ziplog():
    from io import StringIO
    from easypy import ziplog
    from textwrap import dedent

    streams = dedent(""""""
    01:21:27                         -  2
    05:41:27                         -  4
    ;
    16255 15:08:52.554223|           -  5
    16155 19:08:52.554223|           - 11
    ;
    2018-04-01 04:48:11,811|         -  1
    2018-04-06 17:13:40,966          -  8
    ;
    2018-04-06T02:11:06+0200         -  3
    2018-04-07T02:11:06+0200         - 12
    ;
    2018-04-06 18:13:40,966          - 10
    2018-04-23 04:48:11,811|         - 14
    ;
    [2018/04/06 17:13:40.955356      -  7
    [2018/04/06 17:13:41.955356      -  9
    ;
    Apr 6 17:13:40                   -  6
    Apr 7 17:13:40                   - 13
    ;
    """""")

    ziplog.YEAR = 2018
    ziplog.MONTH = 4
    ziplog.DAY = 6

    streams = [StringIO(line.lstrip()) for line in streams.split("";"")]
    lines = ziplog.iter_zipped_logs(*streams, prefix=""> "")
    prev = 0
    print()
    for line in lines:
        print(line, end="""")
        cur = int(line.rpartition("" "")[-1])
        try:
            assert cur == prev + 1, ""line %s is out of place"" % cur
        except AssertionError:
            for line in lines:
                print(line, end="""")
            raise
        prev = cur
",False
646,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,TestIDF,test_popidfobject,"def test_popidfobject(self):
        idftxt = """"
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        key = ""BUILDING""
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building1"")
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building2"")
        buildings = idf.idfobjects[""building""]
        removethis = buildings[-2]
        idf.popidfobject(key, 2)
        assert buildings[2].Name == ""Building2""
        assert idf.model.dt[key][2][1] == ""Building2""
",True
647,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,TestIDF,test_removeidfobject,"def test_removeidfobject(self):
        """"""py.test for IDF.removeidfobject """"""
        idftxt = """"
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        key = ""BUILDING""
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building1"")
        idf.newidfobject(key, Name=""Building_remove"")
        idf.newidfobject(key, Name=""Building2"")
        buildings = idf.idfobjects[""building""]
        removethis = buildings[-2]
        idf.removeidfobject(removethis)
        assert buildings[2].Name == ""Building2""
        assert idf.model.dt[key][2][1] == ""Building2""

    ",True
648,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,TestEpBunch,test_get_referenced_object,"def test_get_referenced_object(self):
        """"""py.test for get_referenced_object""""""
        idf = IDF()
        idf.initnew(""test.idf"")
        idf.newidfobject(""VERSION"")  # does not have a field ""Name""

        # construction material
        construction = idf.newidfobject(""CONSTRUCTION"", Name=""construction"")
        construction.Outside_Layer = ""TestMaterial""

        expected = idf.newidfobject(""MATERIAL"", Name=""TestMaterial"")

        fetched = idf.getobject(""MATERIAL"", ""TestMaterial"")
        assert fetched == expected

        material = construction.get_referenced_object(""Outside_Layer"")
        assert material == expected

        # window material
        glazing_group = idf.newidfobject(
            ""WINDOWMATERIAL:GLAZINGGROUP:THERMOCHROMIC"", Name=""glazing_group""
        )
        glazing_group.Window_Material_Glazing_Name_1 = ""TestWindowMaterial""

        expected = idf.newidfobject(
            ""WINDOWMATERIAL:GLAZING"", Name=""TestWindowMaterial""
        )  # has several \references

        fetched = idf.getobject(""WINDOWMATERIAL:GLAZING"", ""TestWindowMaterial"")
        assert fetched == expected

        material = glazing_group.get_referenced_object(""Window_Material_Glazing_Name_1"")
        assert material == expected


bldfidf = """"""
Version,
    6.0;

BUILDING,
    Empire State Building,    !- Name
    30.0,                     !- North Axis
    City,                     !- Terrain
    0.04,                     !- Loads Convergence Tolerance Value
    0.4,                      !- Temperature Convergence Tolerance Value
    FullExterior,             !- Solar Distribution
    25,                       !- Maximum Number of Warmup Days
    6;                        !- Minimum Number of Warmup Days

BuildingSurface:Detailed,
  Zn001:Wall001,           !- Name
  Wall,                    !- Surface Type
  EXTWALL80,               !- Construction Name
  West Zone,               !- Zone Name
  Outdoors,                !- Outside Boundary Condition
  ,                        !- Outside Boundary Condition Object
  SunExposed,              !- Sun Exposure
  WindExposed,             !- Wind Exposure
  0.5000000,               !- View Factor to Ground
  4,                       !- Number of Vertices
  0,0,3.048000,  !- X,Y,Z ==> Vertex 1 {m}
  0,0,0,  !- X,Y,Z ==> Vertex 2 {m}
  6.096000,0,0,  !- X,Y,Z ==> Vertex 3 {m}
  6.096000,0,3.048000;  !- X,Y,Z ==> Vertex 4 {m}
""""""
# test_EpBunch1()
# import idfreader


",True
649,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,TestEpBunch,test_getreferingobjs,"def test_getreferingobjs(self):
        """"""py.test for getreferingobjs""""""
        thedata = (
            (
                """"""  Zone,
        Box,  !- Name
        0.0,  !- Direction of Relative North {deg}
        0.288184,  !- X Origin {m}
        0.756604,  !- Y Origin {m}
        0.0,  !- Z Origin {m}
        ,  !- Type
        1;  !- Multiplier

      BuildingSurface:Detailed,
        N_Wall,  !- Name
        Wall,  !- Surface Type
        Exterior Wall,  !- Construction Name
        Box,  !- Zone Name
        Outdoors,  !- Outside Boundary Condition
        ,  !- Outside Boundary Condition Object
        SunExposed,  !- Sun Exposure
        WindExposed,  !- Wind Exposure
        ,  !- View Factor to Ground
        1,  !- Number of Vertices
        5.000000000000,  !- Vertex 1 X-coordinate {m}
        6.000000000000,  !- Vertex 1 Y-coordinate {m}
        3.000000000000;  !- Vertex 1 Z-coordinate {m}

      WALL:EXTERIOR,
          WallExterior,                    !- Name
          ,                         !- Construction Name
          Box,                         !- Zone Name
          ,                         !- Azimuth Angle
          90;                       !- Tilt Angle

        BUILDINGSURFACE:DETAILED,
            EWall,                    !- Name
            ,                         !- Surface Type
            ,                         !- Construction Name
            BOX,                         !- Zone Name
            OtherBox,                         !- Outside Boundary Condition
            ,                         !- Outside Boundary Condition Object
            SunExposed,               !- Sun Exposure
            WindExposed,              !- Wind Exposure
            autocalculate,            !- View Factor to Ground
            autocalculate;            !- Number of Vertices

        BUILDINGSURFACE:DETAILED,
            EWall1,                    !- Name
            ,                         !- Surface Type
            ,                         !- Construction Name
            BOX_other,                         !- Zone Name
            OtherBox,                         !- Outside Boundary Condition
            ,                         !- Outside Boundary Condition Object
            SunExposed,               !- Sun Exposure
            WindExposed,              !- Wind Exposure
            autocalculate,            !- View Factor to Ground
            autocalculate;            !- Number of Vertices
      HVACTemplate:Thermostat,
        Constant Setpoint Thermostat,  !- Name
        ,                        !- Heating Setpoint Schedule Name
        20,                      !- Constant Heating Setpoint {C}
        ,                        !- Cooling Setpoint Schedule Name
        25;                      !- Constant Cooling Setpoint {C}

    FENESTRATIONSURFACE:DETAILED,
        Window1,                  !- Name
        ,                         !- Surface Type
        ,                         !- Construction Name
        EWall1,                         !- Building Surface Name
        ,                         !- Outside Boundary Condition Object
        autocalculate,            !- View Factor to Ground
        ,                         !- Shading Control Name
        ,                         !- Frame and Divider Name
        1.0,                      !- Multiplier
        autocalculate;            !- Number of Vertices
      """""",
                ""Box"",
                [""N_Wall"", ""EWall"", ""WallExterior""],
            ),  # idftxt, zname, surfnamelst
        )
        for idftxt, zname, surfnamelst in thedata:
            # import pdb; pdb.set_trace()
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {""iddgroups"": [""Thermal Zones and Surfaces""]}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {""fields"": [""Zone_Name""]}
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            zone = idf.getobject(""zone"", zname)
            kwargs = {
                ""fields"": [""Zone_Name""],
                ""iddgroups"": [""Thermal Zones and Surfaces""],
            }
            result = zone.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == surfnamelst
        # use the above idftxt and try other to get other references.
        for idftxt, zname, surfnamelst in thedata:
            idf = IDF(StringIO(idftxt))
            wname = ""EWall1""
            windownamelist = [""Window1""]
            wall = idf.getobject(""BUILDINGSURFACE:DETAILED"", wname)
            kwargs = {
                ""fields"": [""Building_Surface_Name""],
                ""iddgroups"": [""Thermal Zones and Surfaces""],
            }
            result = wall.getreferingobjs(**kwargs)
            rnames = [item.Name for item in result]
            rnames.sort()
            surfnamelst.sort()
            assert rnames == windownamelist

    ",True
650,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
651,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
652,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
653,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_contains,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_contains(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects


",True
654,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
655,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
656,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
657,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_del,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_del(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    assert key in idf.idfobjects
    del idf.idfobjects[""building""]
    assert key not in idf.idfobjects
",True
658,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
659,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
660,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
661,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_case_insensitive.py,,test_get_and_set,"@pytest.mark.parametrize(""key"", [""BUILDING"", ""Building"", ""building"", ""BuIlDiNg""])
def test_get_and_set(base_idf, key):
    idf = base_idf
    idf.newidfobject(key, Name=""Building"")
    buildings = idf.idfobjects[""building""]
    assert len(buildings) == 1


",True
662,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,,test_pythonic,"def test_pythonic():
    """"""py.test for ex_pythonic.py""""""
    zones = bunchdt[""zone""]  # all the zones
    zone0 = zones[0]
    # -
    printout = ""PLENUM-1""
    assert zone0.Name == printout
    # -
    printout = [
        ""PLENUM-1"",
        ""SPACE1-1"",
        ""SPACE2-1"",
        ""SPACE3-1"",
        ""SPACE4-1"",
        ""SPACE5-1"",
        ""Sup-PLENUM-1"",
    ]
    zonenames = [zone.Name for zone in zones]
    assert printout == zonenames
    # -
    printout = [
        ""283.2"",
        ""239.247360229"",
        ""103.311355591"",
        ""239.247360229"",
        ""103.311355591"",
        ""447.682556152"",
        ""208.6"",
    ]
    zonevolumes = [zone.Volume for zone in zones]
    for item1, item2 in zip(printout, zonevolumes):
        item1, item2 = float(item1), float(item2)
        assert pytest_helpers.almostequal(item1, item2)
    # -
    printout = [(""SPACE2-1"", ""103.311355591""), (""SPACE4-1"", ""103.311355591"")]
    smallzones = [zn for zn in zones if float(zn.Volume) < 150]
    namevolume = [(zn.Name, zn.Volume) for zn in smallzones]
    for (n1, v1), (n2, v2) in zip(printout, namevolume):
        (n1, v1) = (n1, float(v1))
        (n2, v2) = (n2, float(v2))
        assert n1 == n2
        assert pytest_helpers.almostequal(v1, v2)
    # -
    printout = 2
    assert printout == len(smallzones)
    # -
    printout = [
        ""PLENUM-1"",
        ""SPACE1-1"",
        ""FIRST-SMALL-ZONE"",
        ""SPACE3-1"",
        ""SECOND-SMALL-ZONE"",
        ""SPACE5-1"",
        ""Sup-PLENUM-1"",
    ]
    smallzones[0].Name = ""FIRST-SMALL-ZONE""
    smallzones[1].Name = ""SECOND-SMALL-ZONE""
    # now the zone names are:
    zonenames = [zone.Name for zone in zones]
    assert printout == zonenames


",True
663,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_fan_maxcfm,"def test_fan_maxcfm():
    """"""py.test for fan_maxcfm in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    cfm = thefan.f_fan_maxcfm
    assert almostequal(cfm, 12000, places=5)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    watts = thefan.f_fanpower_watts
    assert watts == ""autosize""


",True
664,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,testfanpower_bhp,"def testfanpower_bhp():
    """"""py.test for fanpower_bhp in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    bhp = thefan.f_fanpower_bhp
    assert almostequal(bhp, 2.40306611606)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    bhp = thefan.f_fanpower_bhp
    assert bhp == ""autosize""


",True
665,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,testfanpower_watts,"def testfanpower_watts():
    """"""py.test for fanpower_watts in idf""""""
    idf = IDF(StringIO(vavfan))
    thefans = idf.idfobjects[""Fan:VariableVolume"".upper()]
    thefan = thefans[0]
    watts = thefan.f_fanpower_watts
    assert almostequal(watts, 1791.9664027495671)
    # test autosize
    thefan.Maximum_Flow_Rate = ""autosize""
    watts = thefan.f_fanpower_watts
    assert watts == ""autosize""


",True
666,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_componentsintobranch,"def test_componentsintobranch():
    """"""py.test for componentsintobranch""""""
    tdata = (
        (
            """"""BRANCH,
             sb0,
             0.0,
             ,
             Pipe:Adiabatic,
             sb0_pipe,
             p_loop Supply Inlet,
             sb0_pipe_outlet,
             Bypass;
             """""",
            [(""PIPE:ADIABATIC"", ""pipe1"", None), (""PIPE:ADIABATIC"", ""pipe2"", None)],
            """",
            [
                ""PIPE:ADIABATIC"",
                ""pipe1"",
                ""pipe1_Inlet_Node_Name"",
                ""pipe1_Outlet_Node_Name"",
                """",
                ""PIPE:ADIABATIC"",
                ""pipe2"",
                ""pipe2_Inlet_Node_Name"",
                ""pipe2_Outlet_Node_Name"",
                """",
            ],
        ),
        # idftxt, complst, fluid, branchcomps
        (
            """"""BRANCH,
            sb0,
            0.0,
            ,
            Pipe:Adiabatic,
            sb0_pipe,
            p_loop Supply Inlet,
            sb0_pipe_outlet,
            Bypass;
            """""",
            [
                (""PIPE:ADIABATIC"", ""pipe1"", None),
                (""CHILLER:ELECTRIC"", ""chiller"", ""Chilled_Water_""),
            ],
            """",
            [
                ""PIPE:ADIABATIC"",
                ""pipe1"",
                ""pipe1_Inlet_Node_Name"",
                ""pipe1_Outlet_Node_Name"",
                """",
                ""CHILLER:ELECTRIC"",
                ""chiller"",
                ""chiller_Chilled_Water_Inlet_Node_Name"",
                ""chiller_Chilled_Water_Outlet_Node_Name"",
                """",
            ],
        ),
        # idftxt, complst, fluid, branchcomps
    )
    for ii, (idftxt, complst, fluid, branchcomps) in enumerate(tdata):
        fhandle = StringIO(idftxt)
        idf = IDF(fhandle)
        components_thisnodes = [
            (idf.newidfobject(key, Name=nm), thisnode) for key, nm, thisnode in complst
        ]
        fnc = hvacbuilder.initinletoutlet
        components_thisnodes = [
            (fnc(idf, cp, thisnode), thisnode) for cp, thisnode in components_thisnodes
        ]
        branch = idf.idfobjects[""BRANCH""][0]
        branch = hvacbuilder.componentsintobranch(
            idf, branch, components_thisnodes, fluid
        )
        assert branch.obj[4:] == branchcomps


",True
667,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_connectcomponents,"def test_connectcomponents():
    """"""py.test for connectcomponents""""""
    fhandle = StringIO("""")
    idf = IDF(fhandle)

    tdata = (
        (
            [
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe1""), None),
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe2""), None),
            ],
            [""pipe1_Inlet_Node_Name"", [""pipe2_Inlet_Node_Name"", ""pipe1_pipe2_node""]],
            [[""pipe1_Outlet_Node_Name"", ""pipe1_pipe2_node""], ""pipe2_Outlet_Node_Name""],
            """",
        ),
        # components_thisnodes, inlets, outlets, fluid
        (
            [
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe1""), ""Water_""),
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe2""), ""Water_""),
            ],
            [
                ""pipe1_Water_Inlet_Node_Name"",
                """",
                ""pipe2_Water_Inlet_Node_Name"",
                ["""", ""pipe1_pipe2_node""],
            ],
            [
                [""pipe1_Water_Outlet_Node_Name"", ""pipe1_pipe2_node""],
                """",
                ""pipe2_Water_Outlet_Node_Name"",
                """",
            ],
            ""Air"",
        ),
        # components_thisnodes, inlets, outlets, fluid
        (
            [
                (idf.newidfobject(""PIPE:ADIABATIC"", Name=""pipe1""), None),
                (idf.newidfobject(""Coil:Cooling:Water"", Name=""pipe2""), ""Water_""),
            ],
            [
                ""pipe1_Inlet_Node_Name"",
                ""pipe2_Water_Inlet_Node_Name"",
                [""pipe2_Air_Inlet_Node_Name"", ""pipe1_pipe2_node""],
            ],
            [
                [""pipe1_Outlet_Node_Name"", ""pipe1_pipe2_node""],
                ""pipe2_Water_Outlet_Node_Name"",
                """",
            ],
            ""Air"",
        ),
        # components_thisnodes, inlets, outlets, fluid
    )
    for components_thisnodes, inlets, outlets, fluid in tdata:
        # init the nodes in the new components
        for component, thisnode in components_thisnodes:
            hvacbuilder.initinletoutlet(idf, component, thisnode)
        hvacbuilder.connectcomponents(idf, components_thisnodes, fluid)
        inresult = []
        for component, thisnode in components_thisnodes:
            fldnames = hvacbuilder.getfieldnamesendswith(component, ""Inlet_Node_Name"")
            for name in fldnames:
                inresult.append(component[name])
        assert inresult == inresult
        outresult = []
        for component, thisnode in components_thisnodes:
            fldnames = hvacbuilder.getfieldnamesendswith(component, ""Outlet_Node_Name"")
            for name in fldnames:
                outresult.append(component[name])
        assert outresult == outlets


",True
668,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getbranchcomponents,"def test_getbranchcomponents():
    """"""py.test for getbranchcomponents""""""
    tdata = (
        (
            """"""BRANCH,
            sb1,
            0.0,
            ,
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node,
            ,
            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet,
            ;
            """""",
            True,
            [(""PIPE:ADIABATIC"", ""np1""), (""PIPE:ADIABATIC"", ""np2"")],
        ),  # idftxt, utest, componentlist
        (
            """"""BRANCH,
            sb1,
            0.0,
            ,
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node,
            ,
            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet,
            ;
            PIPE:ADIABATIC,
            np1,
            np1_inlet,
            np1_np2_node;

            PIPE:ADIABATIC,
            np2,
            np1_np2_node,
            np2_outlet;

            """""",
            False,
            [
                [""PIPE:ADIABATIC"", ""np1"", ""np1_inlet"", ""np1_np2_node""],
                [""PIPE:ADIABATIC"", ""np2"", ""np1_np2_node"", ""np2_outlet""],
            ],
        ),
        # idftxt, utest, componentlist
    )
    for idftxt, utest, componentlist in tdata:
        fhandle = StringIO(idftxt)
        idf = IDF(fhandle)
        branch = idf.idfobjects[""BRANCH""][0]
        result = hvacbuilder.getbranchcomponents(idf, branch, utest=utest)
        if utest:
            assert result == componentlist
        else:
            lresult = [item.obj for item in result]
            assert lresult == componentlist


",True
669,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getfieldnamesendswith,"def test_getfieldnamesendswith():
    """"""py.test for getfieldnamesendswith""""""
    idftxt = """"""PIPE:ADIABATIC,
        np2,                      !- Name
        np1_np2_node,             !- Inlet Node Name
        np2_outlet;               !- Outlet Node Name

    """"""
    tdata = (
        (""Inlet_Node_Name"", [""Inlet_Node_Name""]),  # endswith, fieldnames
        (""Node_Name"", [""Inlet_Node_Name"", ""Outlet_Node_Name""]),  # endswith, fieldnames
        (
            ""Name"",
            [""Name"", ""Inlet_Node_Name"", ""Outlet_Node_Name""],
        ),  # endswith, fieldnames
    )
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    idfobject = idf.idfobjects[""PIPE:ADIABATIC""][0]
    for endswith, fieldnames in tdata:
        result = hvacbuilder.getfieldnamesendswith(idfobject, endswith)
        assert result == fieldnames


",True
670,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_getnodefieldname,"def test_getnodefieldname():
    """"""py.test for getnodefieldname""""""
    tdata = (
        (""PIPE:ADIABATIC"", ""pipe1"", ""Inlet_Node_Name"", """", ""Inlet_Node_Name""),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""CHILLER:ELECTRIC"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            """",
            ""Chilled_Water_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            ""Water"",
            ""Water_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Inlet_Node_Name"",
            ""Air"",
            ""Air_Inlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
        (
            ""COIL:COOLING:WATER"",
            ""pipe1"",
            ""Outlet_Node_Name"",
            ""Air"",
            ""Air_Outlet_Node_Name"",
        ),
        # objtype, objname, endswith, fluid, nodefieldname
    )
    for objtype, objname, endswith, fluid, nodefieldname in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        idfobject = idf.newidfobject(objtype, Name=objname)
        result = hvacbuilder.getnodefieldname(idfobject, endswith, fluid)
        assert result == nodefieldname


",True
671,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_initinletoutlet,"def test_initinletoutlet():
    """"""py.test for initinletoutlet""""""
    tdata = (
        (
            ""PIPE:ADIABATIC"",
            ""apipe"",
            None,
            True,
            [""apipe_Inlet_Node_Name""],
            [""apipe_Outlet_Node_Name""],
        ),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
        (""PIPE:ADIABATIC"", ""apipe"", None, False, [""Gumby""], [""apipe_Outlet_Node_Name""]),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
        (
            ""Coil:Cooling:Water"",
            ""acoil"",
            ""Water_"",
            True,
            [""acoil_Water_Inlet_Node_Name"", """"],
            [""acoil_Water_Outlet_Node_Name"", """"],
        ),
        # idfobjectkey, idfobjname, thisnode, force, inlets, outlets
    )
    fhandle = StringIO("""")
    idf = IDF(fhandle)
    for idfobjectkey, idfobjname, thisnode, force, inlets, outlets in tdata:
        idfobject = idf.newidfobject(idfobjectkey, Name=idfobjname)
        inodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Inlet_Node_Name"")
        idfobject[inodefields[0]] = ""Gumby""
        hvacbuilder.initinletoutlet(idf, idfobject, thisnode, force=force)
        inodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Inlet_Node_Name"")
        for nodefield, inlet in zip(inodefields, inlets):
            result = idfobject[nodefield]
            assert result == inlet
        onodefields = hvacbuilder.getfieldnamesendswith(idfobject, ""Outlet_Node_Name"")
        for nodefield, outlet in zip(onodefields, outlets):
            result = idfobject[nodefield]
            assert result == outlet


",True
672,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makecondenserloop,"def test_makecondenserloop():
    """"""pytest for makecondenserloop""""""
    tdata = (
        (
            """",
            ""c_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            """"""BRANCH, sb0, 0.0, , Pipe:Adiabatic, sb0_pipe,
        c_loop Cond_Supply Inlet, sb0_pipe_outlet, Bypass;  BRANCH, sb1, 0.0,
        , Pipe:Adiabatic, sb1_pipe, sb1_pipe_inlet, sb1_pipe_outlet,
        Bypass;  BRANCH, sb2, 0.0, , Pipe:Adiabatic, sb2_pipe,
        sb2_pipe_inlet, sb2_pipe_outlet, Bypass;  BRANCH, sb3, 0.0, ,
        Pipe:Adiabatic, sb3_pipe, sb3_pipe_inlet, sb3_pipe_outlet,
        Bypass;  BRANCH, sb4, 0.0, , Pipe:Adiabatic, sb4_pipe,
        sb4_pipe_inlet, c_loop Cond_Supply Outlet, Bypass;  BRANCH,
        db0, 0.0, , Pipe:Adiabatic, db0_pipe, c_loop Demand Inlet,
        db0_pipe_outlet, Bypass;  BRANCH, db1, 0.0, , Pipe:Adiabatic, db1_pipe,
        db1_pipe_inlet, db1_pipe_outlet, Bypass;  BRANCH, db2, 0.0, ,
        Pipe:Adiabatic, db2_pipe, db2_pipe_inlet, db2_pipe_outlet, Bypass;
        BRANCH, db3, 0.0, , Pipe:Adiabatic, db3_pipe, db3_pipe_inlet,
        db3_pipe_outlet, Bypass;  BRANCH, db4, 0.0, , Pipe:Adiabatic,
        db4_pipe, db4_pipe_inlet, c_loop Demand Outlet, Bypass;
        BRANCHLIST, c_loop Cond_Supply Branchs, sb0, sb1, sb2, sb3, sb4;
        BRANCHLIST, c_loop Condenser Demand Branchs, db0, db1, db2, db3,
        db4;  CONNECTOR:SPLITTER, c_loop_supply_splitter, sb0, sb1,
        sb2, sb3;  CONNECTOR:SPLITTER, c_loop_demand_splitter, db0, db1, db2,
        db3;  CONNECTOR:MIXER, c_loop_supply_mixer, sb4, sb1, sb2, sb3;
        CONNECTOR:MIXER, c_loop_demand_mixer, db4, db1, db2, db3;
        CONNECTORLIST, c_loop Cond_Supply Connectors, Connector:Splitter,
        c_loop_supply_splitter, Connector:Mixer, c_loop_supply_mixer;
        CONNECTORLIST, c_loop Condenser Demand Connectors,
        Connector:Splitter, c_loop_demand_splitter, Connector:Mixer,
        c_loop_demand_mixer;  PIPE:ADIABATIC, sb0_pipe,
        c_loop Cond_Supply Inlet, sb0_pipe_outlet;  PIPE:ADIABATIC,
        sb1_pipe, sb1_pipe_inlet, sb1_pipe_outlet;  PIPE:ADIABATIC, sb2_pipe,
        sb2_pipe_inlet, sb2_pipe_outlet;  PIPE:ADIABATIC, sb3_pipe,
        sb3_pipe_inlet, sb3_pipe_outlet;  PIPE:ADIABATIC, sb4_pipe,
        sb4_pipe_inlet, c_loop Cond_Supply Outlet;  PIPE:ADIABATIC,
        db0_pipe, c_loop Demand Inlet, db0_pipe_outlet;  PIPE:ADIABATIC,
        db1_pipe, db1_pipe_inlet, db1_pipe_outlet;  PIPE:ADIABATIC,
        db2_pipe, db2_pipe_inlet, db2_pipe_outlet;  PIPE:ADIABATIC,
        db3_pipe, db3_pipe_inlet, db3_pipe_outlet;  PIPE:ADIABATIC, db4_pipe,
        db4_pipe_inlet, c_loop Demand Outlet;  CONDENSERLOOP, c_loop, Water, ,
        , , , , , 0.0, Autocalculate, c_loop Cond_Supply Inlet,
        c_loop Cond_Supply Outlet, c_loop Cond_Supply Branchs,
        c_loop Cond_Supply Connectors, c_loop Demand Inlet,
        c_loop Demand Outlet, c_loop Condenser Demand Branchs,
        c_loop Condenser Demand Connectors, Sequential, None;  """""",
        ),  # blankidf, loopname, sloop, dloop, nidf
    )
    for blankidf, loopname, sloop, dloop, nidf in tdata:

        fhandle = StringIO("""")
        idf1 = IDF(fhandle)
        loopname = ""c_loop""
        sloop = [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""]
        dloop = [""db0"", [""db1"", ""db2"", ""db3""], ""db4""]
        hvacbuilder.makecondenserloop(idf1, loopname, sloop, dloop)
        idf2 = IDF(StringIO(nidf))
        assert str(idf1.model) == str(idf2.model)


",True
673,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeductbranch,"def test_makeductbranch():
    """"""py.test for makeductbranch""""""
    tdata = (
        (
            ""d_branch"",
            [
                ""BRANCH"",
                ""d_branch"",
                0.0,
                """",
                ""duct"",
                ""d_branch_duct"",
                ""d_branch_duct_inlet"",
                ""d_branch_duct_outlet"",
                ""Bypass"",
            ],
            [""DUCT"", ""d_branch_duct"", ""d_branch_duct_inlet"", ""d_branch_duct_outlet""],
        ),  # db_name, branch_obj, duct_obj
    )
    for db_name, branch_obj, duct_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makeductbranch(idf, db_name)
        assert result.obj == branch_obj
        theduct = idf.getobject(""DUCT"", result.Component_1_Name)
        assert theduct.obj == duct_obj


",True
674,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeductcomponent,"def test_makeductcomponent():
    """"""py.test for makeductcomponent""""""
    tdata = (
        (""aduct"", [""DUCT"", ""aduct"", ""aduct_inlet"", ""aduct_outlet""]),  # dname, duct_obj
    )
    for dname, duct_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makeductcomponent(idf, dname)
        assert result.obj == duct_obj


",True
675,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makepipebranch,"def test_makepipebranch():
    """"""py.test for makepipebranch""""""
    tdata = (
        (
            ""p_branch"",
            [
                ""BRANCH"",
                ""p_branch"",
                0.0,
                """",
                ""Pipe:Adiabatic"",
                ""p_branch_pipe"",
                ""p_branch_pipe_inlet"",
                ""p_branch_pipe_outlet"",
                ""Bypass"",
            ],
            [
                ""PIPE:ADIABATIC"",
                ""p_branch_pipe"",
                ""p_branch_pipe_inlet"",
                ""p_branch_pipe_outlet"",
            ],
        ),  # pb_name, branch_obj, pipe_obj
    )
    for pb_name, branch_obj, pipe_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makepipebranch(idf, pb_name)
        assert result.obj == branch_obj
        thepipe = idf.getobject(""PIPE:ADIABATIC"", result.Component_1_Name)
        assert thepipe.obj == pipe_obj


",True
676,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makepipecomponent,"def test_makepipecomponent():
    """"""py.test for makepipecomponent""""""
    tdata = (
        (
            ""apipe"",
            [""PIPE:ADIABATIC"", ""apipe"", ""apipe_inlet"", ""apipe_outlet""],
        ),  # pname, pipe_obj
        (
            ""bpipe"",
            [""PIPE:ADIABATIC"", ""bpipe"", ""bpipe_inlet"", ""bpipe_outlet""],
        ),  # pname, pipe_obj
    )
    for pname, pipe_obj in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = hvacbuilder.makepipecomponent(idf, pname)
        assert result.obj == pipe_obj


",True
677,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_makeplantloop,"def test_makeplantloop():
    """"""pytest for makeplantloop""""""
    tdata = (
        (
            """",
            ""p_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            """"""BRANCH, sb0, 0.0, , Pipe:Adiabatic, sb0_pipe, p_loop Supply Inlet,
        sb0_pipe_outlet, Bypass;BRANCH, sb1, 0.0, , Pipe:Adiabatic, sb1_pipe,
        sb1_pipe_inlet, sb1_pipe_outlet, Bypass;BRANCH, sb2, 0.0, ,
        Pipe:Adiabatic, sb2_pipe, sb2_pipe_inlet, sb2_pipe_outlet,
        Bypass;BRANCH, sb3, 0.0, , Pipe:Adiabatic, sb3_pipe, sb3_pipe_inlet,
        sb3_pipe_outlet, Bypass;BRANCH, sb4, 0.0, , Pipe:Adiabatic, sb4_pipe,
        sb4_pipe_inlet, p_loop Supply Outlet, Bypass;BRANCH, db0, 0.0, ,
        Pipe:Adiabatic, db0_pipe, p_loop Demand Inlet, db0_pipe_outlet,
        Bypass;BRANCH, db1, 0.0, , Pipe:Adiabatic, db1_pipe, db1_pipe_inlet,
        db1_pipe_outlet, Bypass;BRANCH, db2, 0.0, , Pipe:Adiabatic, db2_pipe,
        db2_pipe_inlet, db2_pipe_outlet, Bypass;BRANCH, db3, 0.0, ,
        Pipe:Adiabatic, db3_pipe, db3_pipe_inlet, db3_pipe_outlet,
        Bypass;BRANCH, db4, 0.0, , Pipe:Adiabatic, db4_pipe, db4_pipe_inlet,
        p_loop Demand Outlet, Bypass;BRANCHLIST, p_loop Supply Branchs,
        sb0, sb1, sb2, sb3, sb4;BRANCHLIST, p_loop Demand Branchs, db0,
        db1, db2, db3, db4;CONNECTOR:SPLITTER, p_loop_supply_splitter,
        sb0, sb1, sb2, sb3;CONNECTOR:SPLITTER, p_loop_demand_splitter,
        db0, db1, db2, db3;CONNECTOR:MIXER, p_loop_supply_mixer, sb4,
        sb1, sb2, sb3;CONNECTOR:MIXER, p_loop_demand_mixer, db4, db1,
        db2, db3;CONNECTORLIST, p_loop Supply Connectors, Connector:Splitter,
        p_loop_supply_splitter, Connector:Mixer,
        p_loop_supply_mixer;CONNECTORLIST, p_loop Demand Connectors,
        Connector:Splitter, p_loop_demand_splitter, Connector:Mixer,
        p_loop_demand_mixer;PIPE:ADIABATIC, sb0_pipe, p_loop Supply Inlet,
        sb0_pipe_outlet;PIPE:ADIABATIC, sb1_pipe, sb1_pipe_inlet,
        sb1_pipe_outlet;PIPE:ADIABATIC, sb2_pipe, sb2_pipe_inlet,
        sb2_pipe_outlet;PIPE:ADIABATIC, sb3_pipe, sb3_pipe_inlet,
        sb3_pipe_outlet;PIPE:ADIABATIC, sb4_pipe, sb4_pipe_inlet,
        p_loop Supply Outlet;PIPE:ADIABATIC, db0_pipe,
        p_loop Demand Inlet, db0_pipe_outlet;PIPE:ADIABATIC, db1_pipe,
        db1_pipe_inlet, db1_pipe_outlet;PIPE:ADIABATIC, db2_pipe,
        db2_pipe_inlet, db2_pipe_outlet;PIPE:ADIABATIC, db3_pipe,
        db3_pipe_inlet, db3_pipe_outlet;PIPE:ADIABATIC, db4_pipe,
        db4_pipe_inlet, p_loop Demand Outlet;PLANTLOOP, p_loop, Water, , ,
        , , , , 0.0, Autocalculate, p_loop Supply Inlet,
        p_loop Supply Outlet, p_loop Supply Branchs,
        p_loop Supply Connectors, p_loop Demand Inlet, p_loop Demand Outlet,
        p_loop Demand Branchs, p_loop Demand Connectors, Sequential, ,
        SingleSetpoint, None, None;"""""",
        ),  # blankidf, loopname, sloop, dloop, nidf
    )
    for blankidf, loopname, sloop, dloop, nidf in tdata:
        fhandle = StringIO("""")
        idf1 = IDF(fhandle)
        loopname = ""p_loop""
        sloop = [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""]
        dloop = [""db0"", [""db1"", ""db2"", ""db3""], ""db4""]
        hvacbuilder.makeplantloop(idf1, loopname, sloop, dloop)
        idf2 = IDF(StringIO(nidf))
        # print('=' * 15)
        # print(idf1.model)
        # print('-' * 15)
        # print(idf2.model)
        # print('=' * 15)
        assert str(idf1.model) == str(idf2.model)


",True
678,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_renamenodes,"def test_renamenodes():
    """"""py.test for renamenodes""""""
    idftxt = """"""PIPE:ADIABATIC,
         np1,
         np1_inlet,
         np1_outlet;
         !- ['np1_outlet', 'np1_np2_node'];

    BRANCH,
         sb0,
         0.0,
         ,
         Pipe:Adiabatic,
         np1,
         np1_inlet,
         np1_outlet,
         Bypass;
    """"""
    outtxt = """"""PIPE:ADIABATIC,
         np1,
         np1_inlet,
         np1_np2_node;
         !- ['np1_outlet', 'np1_np2_node'];

    BRANCH,
         sb0,
         0.0,
         ,
         Pipe:Adiabatic,
         np1,
         np1_inlet,
         np1_np2_node,
         Bypass;
    """"""
    # !- ['np1_outlet', 'np1_np2_node'];
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    pipe = idf.idfobjects[""PIPE:ADIABATIC""][0]
    pipe.Outlet_Node_Name = [
        ""np1_outlet"",
        ""np1_np2_node"",
    ]  # this is the first step of the replace
    hvacbuilder.renamenodes(idf, fieldtype=""node"")
    outidf = IDF(StringIO(outtxt))
    result = idf.idfobjects[""PIPE:ADIABATIC""][0].obj
    assert result == outidf.idfobjects[""PIPE:ADIABATIC""][0].obj


",True
679,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_replacebranch,"def test_replacebranch():
    """"""py.test for replacebranch""""""
    tdata = (
        (
            ""p_loop"",
            [""sb0"", [""sb1"", ""sb2"", ""sb3""], ""sb4""],
            [""db0"", [""db1"", ""db2"", ""db3""], ""db4""],
            ""sb0"",
            [
                (""Chiller:Electric"", ""Central_Chiller"", ""Chilled_Water_""),
                (""PIPE:ADIABATIC"", ""np1"", None),
                (""PIPE:ADIABATIC"", ""np2"", None),
            ],
            ""Water"",
            [
                ""BRANCH"",
                ""sb0"",
                0.0,
                """",
                ""CHILLER:ELECTRIC"",
                ""Central_Chiller"",
                ""p_loop Supply Inlet"",
                ""Central_Chiller_np1_node"",
                """",
                ""PIPE:ADIABATIC"",
                ""np1"",
                ""Central_Chiller_np1_node"",
                ""np1_np2_node"",
                """",
                ""PIPE:ADIABATIC"",
                ""np2"",
                ""np1_np2_node"",
                ""np2_Outlet_Node_Name"",
                """",
            ],
        ),  # loopname, sloop, dloop, branchname, componenttuple, fluid, outbranch
    )
    for (loopname, sloop, dloop, branchname, componenttuple, fluid, outbranch) in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        loop = hvacbuilder.makeplantloop(idf, loopname, sloop, dloop)
        components_thisnodes = [
            (idf.newidfobject(key, Name=nm), thisnode)
            for key, nm, thisnode in componenttuple
        ]
        branch = idf.getobject(""BRANCH"", branchname)
        newbr = hvacbuilder.replacebranch(
            idf, loop, branch, components_thisnodes, fluid=fluid
        )
        assert newbr.obj == outbranch


",True
680,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_copyidfintoidf,"def test_copyidfintoidf():
    """"""py.test for copyidfintoidf""""""
    tonames = [""a"", ""b"", ""c""]
    fromnames = [""d"", ""e""]
    allnames = [""a"", ""b"", ""c"", ""d"", ""e""]
    toidf = IDF(StringIO(""""))
    toidf.newidfobject(""building"", Name=""a"")
    toidf.newidfobject(""building"", Name=""b"")
    toidf.newidfobject(""Site:Location"", Name=""c"")
    result = idf_helpers.getidfobjectlist(toidf)
    assert [res.Name for res in result] == tonames
    fromidf = IDF(StringIO(""""))
    fromidf.newidfobject(""ScheduleTypeLimits"", Name=""d"")
    fromidf.newidfobject(""ScheduleTypeLimits"", Name=""e"")
    result = idf_helpers.getidfobjectlist(fromidf)
    assert [res.Name for res in result] == fromnames
    idf_helpers.copyidfintoidf(toidf, fromidf)
    result = idf_helpers.getidfobjectlist(toidf)
    assert [res.Name for res in result] == allnames
",True
681,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getanymentions,"def test_getanymentions():
    """"""py.test for getanymentions""""""
    idf = IDF(StringIO(""""))
    mat = idf.newidfobject(""MATERIAL"", Name=""mat"")
    aconst = idf.newidfobject(""CONSTRUCTION"", Name=""const"")
    foundobjs = idf_helpers.getanymentions(idf, mat)
    assert len(foundobjs) == 1
    assert foundobjs[0] == mat


",True
682,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getidfkeyswithnodes,"def test_getidfkeyswithnodes():
    """"""py.test for getidfkeyswithnodes""""""
    nodekeys = idf_helpers.getidfkeyswithnodes()
    # print(len(nodekeys))
    assert ""PLANTLOOP"" in nodekeys
    assert ""ZONE"" not in nodekeys


# ",True
683,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getidfobjectlist,"def test_getidfobjectlist():
    """"""py.test for getidfobjectlist""""""
    names = [""a"", ""b"", ""c"", ""d"", ""e""]
    idf = IDF(StringIO(""""))
    idf.newidfobject(""building"", Name=""a"")
    idf.newidfobject(""building"", Name=""b"")
    idf.newidfobject(""Site:Location"", Name=""c"")
    idf.newidfobject(""ScheduleTypeLimits"", Name=""d"")
    idf.newidfobject(""ScheduleTypeLimits"", Name=""e"")
    result = idf_helpers.getidfobjectlist(idf)
    assert [res.Name for res in result] == names


",True
684,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getobject_use_prevfield,"def test_getobject_use_prevfield():
    """"""py.test for getobject_use_prevfield""""""
    idf = IDF(StringIO(""""))
    branch = idf.newidfobject(
        ""BRANCH"",
        Name=""CW Pump Branch"",
        Component_1_Object_Type=""Pump:VariableSpeed"",
        Component_1_Name=""CW Circ Pump"",
    )
    pump = idf.newidfobject(""PUMP:VARIABLESPEED"", Name=""CW Circ Pump"")
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Component_1_Name"")
    assert foundobject == pump
    # test for all times it should return None
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Name"")
    foundobject = None  # prev field not end with Object_Type
    foundobject = idf_helpers.getobject_use_prevfield(
        idf, branch, ""Component_11_Object_Type""
    )
    foundobject = None  # field does not end with ""Name""
    foundobject = idf_helpers.getobject_use_prevfield(idf, branch, ""Component_3_Name"")
    foundobject = None  # bad idfobject key


",True
685,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_getobjectswithnode,"def test_getobjectswithnode():
    """"""py.test for getobjectswithnode""""""
    idf = IDF(StringIO(""""))
    nodekeys = idf_helpers.getidfkeyswithnodes()
    plantloop = idf.newidfobject(
        ""PlantLoop"",
        Name=""Chilled Water Loop"",
        Plant_Side_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    branch = idf.newidfobject(
        ""Branch"",
        Name=""CW Pump Branch"",
        Component_1_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    pump = idf.newidfobject(
        ""Pump:VariableSpeed"",
        Name=""CW Circ Pump"",
        Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    zone = idf.newidfobject(""zone"")
    foundobjs = idf_helpers.getobjectswithnode(idf, nodekeys, ""CW Supply Inlet Node"")
    expected = [plantloop, branch, pump]
    expectedset = set([item.key for item in expected])
    resultset = set([item.key for item in foundobjs])
    assert resultset == expectedset
    expectedset = set([item.Name for item in expected])
    resultset = set([item.Name for item in foundobjs])
    assert resultset == expectedset


",True
686,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_idfobjectkeys,"def test_idfobjectkeys():
    """"""py.test for idfobjectkeys""""""
    expected = [
        ""LEAD INPUT"",
        ""SIMULATION DATA"",
        ""VERSION"",
        ""SIMULATIONCONTROL"",
        ""BUILDING"",
    ]
    idf = IDF(StringIO(""""))
    result = idf_helpers.idfobjectkeys(idf)
    assert result[:5] == expected


",True
687,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_name2idfobject,"def test_name2idfobject():
    """"""py.test for name2idfobject""""""
    idf = IDF(StringIO(""""))
    plantloopname = ""plantloopname""
    branchname = ""branchname""
    pumpname = ""pumpname""
    zonename = ""zonename""
    plantloop = idf.newidfobject(
        ""PlantLoop"",
        Name=plantloopname,
        Plant_Side_Inlet_Node_Name=""CW Supply Inlet Node"",
    )
    branch = idf.newidfobject(
        ""Branch"", Name=branchname, Component_1_Inlet_Node_Name=""CW Supply Inlet Node""
    )
    pump = idf.newidfobject(
        ""Pump:VariableSpeed"", Name=pumpname, Inlet_Node_Name=""CW Supply Inlet Node""
    )
    zone = idf.newidfobject(""zone"", Name=zonename)
    simulation = idf.newidfobject(""SimulationControl"")
    # - test
    names = [plantloopname, branchname, pumpname, zonename]
    idfobjs = [plantloop, branch, pump, zone]
    for name, idfobj in zip(names, idfobjs):
        result = idf_helpers.name2idfobject(idf, Name=name)
        assert result == idfobj
    # test when objkeys!=None
    objkey = ""ZoneHVAC:EquipmentConnections""
    equipconnections = idf.newidfobject(objkey, Zone_Name=zonename)
    result = idf_helpers.name2idfobject(idf, Zone_Name=zonename, objkeys=[objkey])
    assert result == equipconnections


",True
688,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,,test_updateidf,"def test_updateidf():
    """"""py.test for updateidf""""""
    iddtxt = """"""!IDD_Version 8.4.0""""""
    data = (
        (
            """"""Version,
        8.3;                     !- Version Identifier

    """""",
            {""idf.version..Version_Identifier"": ""0.1""},
            ""version"",
            ""Version_Identifier"",
            ""0.1"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""SimulationControl,
    No,                      !- Do Zone Sizing Calculation
    No,                      !- Do System Sizing Calculation
    No,                      !- Do Plant Sizing Calculation
    No,                      !- Run Simulation for Sizing Periods
    Yes;                     !- Run Simulation for Weather File Run Periods
    """""",
            {""idf.SimulationControl..Do_Zone_Sizing_Calculation"": ""Yes""},
            ""SimulationControl"",
            ""Do_Zone_Sizing_Calculation"",
            ""Yes"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Untitled,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.Untitled.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        # make a new object
        (
            """"""
    """""",
            {""idf.BUilding.Taj.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        # make a new object with no Name field
        (
            """"""
    """""",
            {""idf.GlobalGeometryRules..Starting_Vertex_Position"": ""UpperLeftCorner""},
            ""GlobalGeometryRules"",
            ""Starting_Vertex_Position"",
            ""UpperLeftCorner"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Name.name,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.Name.name.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
        (
            """"""Building,
    Name.name,                !- Name
    0.0,                     !- North Axis {deg}
    City,                    !- Terrain
    0.04,                    !- Loads Convergence Tolerance Value
    0.4,                     !- Temperature Convergence Tolerance Value {deltaC}
    FullInteriorAndExterior, !- Solar Distribution
    25,                      !- Maximum Number of Warmup Days
    ;                        !- Minimum Number of Warmup Days
    """""",
            {""idf.BUilding.'Name.name'.Terrain"": ""Rural""},
            ""Building"",
            ""Terrain"",
            ""Rural"",
        ),  # idftxt, dct, key, field, fieldval
    )
    for idftxt, dct, key, field, fieldval in data:
        idfhandle = StringIO(idftxt)
        idf = IDF(idfhandle)
        json_functions.updateidf(idf, dct)
        assert idf.idfobjects[key][0][field] == fieldval
",True
689,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getallobjlists,"def test_getallobjlists():
    """"""py.test for getallobjlists""""""
    tdata = (
        (
            ""TransformerNames"",
            [(""ElectricLoadCenter:Distribution"".upper(), ""TransformerNames"", [10])],
        ),  # refname, objlists
    )
    for refname, objlists in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.getallobjlists(idf, refname)
        assert result == objlists


",True
690,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getiddgroupdict,"def test_getiddgroupdict():
    """"""py.test for IDF.getiddgroupdict()""""""
    data = (({None: [""Lead Input"", ""Simulation Data""]},),)  # gdict,
    for (gdict,) in data:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = idf.getiddgroupdict()
        assert result[None] == gdict[None]


",True
691,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getrefnames,"def test_getrefnames():
    """"""py.test for getrefnames""""""
    tdata = (
        (
            ""ZONE"",
            [
                ""ZoneNames"",
                ""OutFaceEnvNames"",
                ""ZoneAndZoneListNames"",
                ""AirflowNetworkNodeAndZoneNames"",
            ],
        ),  # objkey, therefs
        (
            ""FluidProperties:Name"".upper(),
            [""FluidNames"", ""FluidAndGlycolNames""],
        ),  # objkey, therefs
        (""Building"".upper(), []),  # objkey, therefs
    )
    for objkey, therefs in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.getrefnames(idf, objkey)
        assert result == therefs


",True
692,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idd_index,"def test_idd_index():
    """"""py.test to see if idd_index is returned""""""
    idftxt = """"""""""""
    idf = IDF(StringIO(idftxt))
    assert idf.idd_index == {}
",True
693,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idfinmsequence,"def test_idfinmsequence():
    """"""py.test for setting of theidf in Idf_MSequence""""""
    idftxt = """"""Version, 6.0;""""""
    # theidf set in Idf_MSequence.__init__
    idf = IDF(StringIO(idftxt))
    versions = idf.idfobjects[""version"".upper()]
    assert versions.theidf == idf
    assert versions[0].theidf == idf
    # theidf set in Idf_MSequence.insert()
    material = idf.newidfobject(""material"".upper())
    assert material.theidf == idf
    # theidf set when you pop an item
    newmaterial = idf.newidfobject(""material"".upper())
    materials = idf.idfobjects[""material"".upper()]
    material = materials.pop(0)
    assert material.theidf == None
    assert materials[0].theidf == idf


",True
694,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_idfstr,"def test_idfstr():
    """"""Test all outputtype options in IDF.idfstr().
    """"""
    idf = IDF()
    idf.initreadtxt(idfsnippet)
    assert idf.outputtype == ""standard""  # start with the default
    original = idf.idfstr()
    assert ""!-"" in original  # has comment
    assert ""\n"" in original  # has line break
    assert ""\n\n"" in original  # has empty line

    idf.outputtype = ""standard""
    s = idf.idfstr()
    assert ""!-"" in s  # has comment
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty line
    assert s == original  # is unchanged

    idf.outputtype = ""nocomment""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty line
    assert s != original  # is changed

    idf.outputtype = ""nocomment1""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" in s  # has empty lines
    assert s != original  # is changed

    idf.outputtype = ""nocomment2""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" in s  # has line break
    assert ""\n\n"" not in s  # has no empty lines
    assert s != original  # is changed

    idf.outputtype = ""compressed""
    s = idf.idfstr()
    assert ""!-"" not in s  # has no comments
    assert ""\n"" not in s  # has no line breaks
    assert ""\n\n"" not in s  # has no empty lines
    assert s != original  # is changed


",True
695,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_initread,"def test_initread():
    """"""Test for IDF.initread() with filename in unicode and as python str.
    """"""
    # setup
    idf = IDF()
    idf.initreadtxt(idfsnippet)
    idf.saveas(""tmp.idf"")

    # test fname as unicode
    fname = ""tmp.idf""
    assert isinstance(fname, string_types)
    idf = IDF()
    idf.initread(fname)
    assert idf.getobject(""BUILDING"", ""Building"")

    # test fname as str
    fname = str(""tmp.idf"")
    assert isinstance(fname, string_types)
    idf = IDF()
    idf.initread(fname)
    assert idf.getobject(""BUILDING"", ""Building"")

    # test that a nonexistent file raises an IOError
    fname = ""notarealfilename.notreal""
    idf = IDF()
    try:
        idf.initread(fname)
        assert False  # shouldn't reach here
    except IOError:
        pass

    # teardown
    os.remove(""tmp.idf"")


",True
696,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_initreadtxt,"def test_initreadtxt():
    """"""Test for IDF.initreadtxt().
    """"""
    idftxt = """"""
        Material,
          G01a 19mm gypsum board,  !- Name
          MediumSmooth,            !- Roughness
          0.019,                   !- Thickness {m}
          0.16,                    !- Conductivity {W/m-K}
          800,                     !- Density {kg/m3}
          1090;                    !- Specific Heat {J/kg-K}

        Construction,
          Interior Wall,           !- Name
          G01a 19mm gypsum board,  !- Outside Layer
          F04 Wall air space resistance,  !- Layer 2
          G01a 19mm gypsum board;  !- Layer 3
        """"""
    idf = IDF()
    idf.initreadtxt(idftxt)
    assert idf.getobject(""MATERIAL"", ""G01a 19mm gypsum board"")


",True
697,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_new,"def test_new():
    """"""py.test for IDF.new()""""""
    idf = IDF()
    idf.new()
    # assert idf.idfobjects['building'.upper()] == Idf_MSequence()
    assert idf.idfobjects[""building"".upper()].list1 == []
    assert idf.idfobjects[""building"".upper()].list2 == []


",True
698,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_newidfobject,"def test_newidfobject():
    """"""py.test for newidfobject""""""
    # make a blank idf
    # make a function for this and then continue.
    idf = IDF()
    idf.new()
    objtype = ""material:airgap"".upper()
    obj = idf.newidfobject(objtype, Name=""Argon"")
    obj = idf.newidfobject(objtype, Name=""Krypton"")
    obj = idf.newidfobject(objtype, Name=""Xenon"")
    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Krypton""],
        [""MATERIAL:AIRGAP"", ""Xenon""],
    ]
    # remove an object
    idf.popidfobject(objtype, 1)
    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Xenon""],
    ]
    lastobject = idf.idfobjects[objtype][-1]
    idf.removeidfobject(lastobject)
    assert idf.model.dt[objtype] == [[""MATERIAL:AIRGAP"", ""Argon""]]
    # copyidfobject
    onlyobject = idf.idfobjects[objtype][0]
    idf.copyidfobject(onlyobject)

    assert idf.model.dt[objtype] == [
        [""MATERIAL:AIRGAP"", ""Argon""],
        [""MATERIAL:AIRGAP"", ""Argon""],
    ]
    # test some functions
    objtype = ""FENESTRATIONSURFACE:DETAILED""
    obj = idf.newidfobject(objtype, Name=""A Wall"")
    assert obj.coords == []
    assert obj.fieldvalues[1] == ""A Wall""

    # test defaultvalues=True and defaultvalues=False
    sim_deftrue = idf.newidfobject(""SimulationControl"".upper(), defaultvalues=True)
    assert sim_deftrue.Do_Zone_Sizing_Calculation == ""No""
    sim_deffalse = idf.newidfobject(""SimulationControl"".upper(), defaultvalues=False)
    assert sim_deffalse.Do_Zone_Sizing_Calculation == """"


",True
699,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_newidfobject_warning,"def test_newidfobject_warning():
    """"""Test that the warning for newidfobject created with `aname` is working.

    Fails if the warning is not issued when `aname` is used, or if the warning
    is issued when `aname` is not used.
    """"""
    # make a blank idf
    # make a function for this and then continue.
    idf = IDF()
    idf.new()
    objtype = ""material:airgap"".upper()
    # expect warnings here
    with pytest.warns(UserWarning):
        idf.newidfobject(objtype, aname=""Krypton"")
    with pytest.warns(UserWarning):
        idf.newidfobject(objtype, ""Krypton"")

    # expect no warnings here - we pass None so as not to trigger the `Failed: DID NOT WARN` message from pytest
    with pytest.warns(None) as captured_warnings:
        idf.newidfobject(objtype, Name=""Krypton"")
    assert len(captured_warnings) == 0


",True
700,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_refname2key,"def test_refname2key():
    """"""py.test for refname2key""""""
    tdata = (
        (
            ""TransformerNames"",
            [""ElectricLoadCenter:Distribution"".upper()],
        ),  # refname, key
        (
            ""AllCurves"",
            [
                ""PUMP:VARIABLESPEED"",
                ""PUMP:CONSTANTSPEED"",
                ""BOILER:HOTWATER"",
                ""ENERGYMANAGEMENTSYSTEM:CURVEORTABLEINDEXVARIABLE"",
            ],
        ),  # refname, key
    )
    for refname, key in tdata:
        fhandle = StringIO("""")
        idf = IDF(fhandle)
        result = modeleditor.refname2key(idf, refname)
        assert result == key


",True
701,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_rename,"def test_rename():
    """"""py.test for rename""""""
    idftxt = """"""Material,
      G01a 19mm gypsum board,  !- Name
      MediumSmooth,            !- Roughness
      0.019,                   !- Thickness {m}
      0.16,                    !- Conductivity {W/m-K}
      800,                     !- Density {kg/m3}
      1090;                    !- Specific Heat {J/kg-K}

      Construction,
        Interior Wall,           !- Name
        G01a 19mm gypsum board,  !- Outside Layer
        F04 Wall air space resistance,  !- Layer 2
        G01a 19mm gypsum board;  !- Layer 3

      Construction,
        Other Wall,           !- Name
        G01a 19mm gypsum board,  !- Outside Layer
        G01a 19mm gypsum board,  !- Layer 2
        G01a 19mm gypsum board;  !- Layer 3

    """"""
    ridftxt = """"""Material,
      peanut butter,  !- Name
      MediumSmooth,            !- Roughness
      0.019,                   !- Thickness {m}
      0.16,                    !- Conductivity {W/m-K}
      800,                     !- Density {kg/m3}
      1090;                    !- Specific Heat {J/kg-K}

      Construction,
        Interior Wall,           !- Name
        peanut butter,  !- Outside Layer
        F04 Wall air space resistance,  !- Layer 2
        peanut butter;  !- Layer 3

      Construction,
        Other Wall,           !- Name
        peanut butter,  !- Outside Layer
        peanut butter,  !- Layer 2
        peanut butter;  !- Layer 3

    """"""
    fhandle = StringIO(idftxt)
    idf = IDF(fhandle)
    result = modeleditor.rename(
        idf, ""Material"".upper(), ""G01a 19mm gypsum board"", ""peanut butter""
    )
    assert result.Name == ""peanut butter""
    assert idf.idfobjects[""CONSTRUCTION""][0].Outside_Layer == ""peanut butter""
    assert idf.idfobjects[""CONSTRUCTION""][0].Layer_3 == ""peanut butter""


",True
702,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_save,"def test_save():
    """"""
    Test the IDF.save() function using a filehandle to avoid external effects.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    # test save with just a filehandle
    file_handle = StringIO()
    idf.save(file_handle)
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    # minimal test that TestMaterial is being written to the file handle
    assert expected in result


",True
703,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_save_with_lineendings_and_encodings,"def test_save_with_lineendings_and_encodings():
    """"""
    Test the IDF.save() function with combinations of encodings and line
    endings.

    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    lineendings = (""windows"", ""unix"", ""default"")
    encodings = (""ascii"", ""latin-1"", ""UTF-8"")

    for le, enc in product(lineendings, encodings):
        file_handle = StringIO()
        idf.save(file_handle, encoding=enc, lineendings=le)
        file_handle.seek(0)
        result = file_handle.read().encode(enc)
        if le == ""windows"":
            assert b""\r\n"" in result
        elif le == ""unix"":
            assert b""\r\n"" not in result
        elif le == ""default"":
            assert os.linesep.encode(enc) in result


",True
704,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_saveas,"def test_saveas():
    """"""Test the IDF.saveas() function.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    idf.idfname = ""test.idf""

    try:
        idf.saveas()  # this should raise an error as no filename is passed
        assert False
    except TypeError:
        pass

    file_handle = StringIO()
    idf.saveas(file_handle)  # save with a filehandle
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    assert expected in result

    # test the idfname attribute has been changed
    assert idf.idfname != ""test.idf""


",True
705,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_savecopy,"def test_savecopy():
    """"""Test the IDF.savecopy() function.
    """"""
    file_text = ""Material,TestMaterial,  !- Name""
    idf = IDF(StringIO(file_text))
    idf.idfname = ""test.idf""

    try:
        idf.savecopy()  # this should raise an error as no filename is passed
        assert False
    except TypeError:
        pass

    file_handle = StringIO()
    idf.savecopy(file_handle)  # save a copy with a different filename
    expected = ""TestMaterial""
    file_handle.seek(0)
    result = file_handle.read()
    assert expected in result

    # test the idfname attribute has not been changed
    assert idf.idfname == ""test.idf""


",True
706,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_zonearea_zonevolume,"def test_zonearea_zonevolume():
    """"""py.test for zonearea and zonevolume""""""
    idftxt = """"""Zone, 473222, 0.0, 0.0, 0.0, 0.0, , 1;
        BuildingSurface:Detailed, F7289B, Floor, Exterior Floor, 473222,
        Ground, ,
        NoSun, NoWind, , 4, 2.23, 2.56, 0.0, 2.23, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        2.56, 0.0;  BuildingSurface:Detailed, F3659B, Wall, Exterior Wall,
        473222, Outdoors, , SunExposed, WindExposed, , 4, 2.23, 2.56, 1.49,
        2.23, 2.56, 0.0, 0.0, 2.56, 0.0, 0.0, 2.56, 1.49;
        BuildingSurface:Detailed, 46C6C9, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23, 0.0, 1.49, 2.23,
        0.0, 0.0, 2.23, 1.02548139464, 0.0, 2.23, 1.02548139464, 1.49;
        BuildingSurface:Detailed, 4287DD, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 0.0, 2.56, 1.49, 0.0,
        2.56, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.49;
        BuildingSurface:Detailed, 570C2E, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 0.0, 0.0, 1.49, 0.0, 0.0,
        0.0, 2.23, 0.0, 0.0, 2.23, 0.0, 1.49;  BuildingSurface:Detailed,
        BAEA99, Roof, Exterior Roof, 473222, Outdoors, , SunExposed,
        WindExposed, , 4, 0.0, 2.56, 1.49, 0.0, 0.0, 1.49, 2.23, 0.0, 1.49,
        2.23, 2.56, 1.49;  BuildingSurface:Detailed, C879FE, Floor,
        Exterior Floor, 473222, Ground, , NoSun, NoWind, , 4, 3.22,
        2.52548139464, 0.0, 3.22, 1.02548139464, 0.0, 2.23,
        1.02548139464, 0.0, 2.23, 2.52548139464, 0.0;
        BuildingSurface:Detailed, 25B601, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23,
        1.02548139464, 1.49, 2.23, 1.02548139464, 0.0, 2.23, 2.52548139464,
        0.0, 2.23, 2.52548139464, 1.49;  BuildingSurface:Detailed, F5EADC,
        Wall, Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, ,
        4, 2.23, 1.02548139464, 1.49, 2.23, 1.02548139464, 0.0, 3.22,
        1.02548139464, 0.0, 3.22, 1.02548139464, 1.49;
        BuildingSurface:Detailed, D0AABE, Wall, Exterior Wall, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 3.22, 1.02548139464,
        1.49, 3.22, 1.02548139464, 0.0, 3.22, 2.52548139464, 0.0, 3.22,
        2.52548139464, 1.49;  BuildingSurface:Detailed, B0EA02, Wall,
        Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, ,
        4, 3.22, 2.52548139464, 1.49, 3.22, 2.52548139464, 0.0, 2.23,
        2.52548139464, 0.0, 2.23, 2.52548139464, 1.49;
        BuildingSurface:Detailed, E6DF3B, Roof, Exterior Roof, 473222,
        Outdoors, , SunExposed, WindExposed, , 4, 2.23, 2.52548139464, 1.49,
        2.23, 1.02548139464, 1.49, 3.22, 1.02548139464, 1.49, 3.22,
        2.52548139464, 1.49;  BuildingSurface:Detailed, 4F8681, Wall,
        Exterior Wall, 473222, Outdoors, , SunExposed, WindExposed, , 4,
        2.23, 2.52548139464, 1.49, 2.23, 2.52548139464, 0.0, 2.23, 2.56,
        0.0, 2.23, 2.56, 1.49;  """"""
    idf = IDF(StringIO(idftxt))
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea_floor(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zone_floor2roofheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zone_floor2roofheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)
    # remove floor
    zone = idf.getobject(""ZONE"", ""473222"")
    surfs = idf.idfobjects[""BuildingSurface:Detailed"".upper()]
    zone_surfs = [s for s in surfs if s.Zone_Name == zone.Name]
    floors = [s for s in zone_surfs if s.Surface_Type.upper() == ""FLOOR""]
    for floor in floors:
        idf.removeidfobject(floor)
    result = modeleditor.zonearea_floor(idf, ""473222"")
    assert almostequal(result, 0)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)
    # reload idf and remove roof/ceiling
    idf = IDF(StringIO(idftxt))
    zone = idf.getobject(""ZONE"", ""473222"")
    surfs = idf.idfobjects[""BuildingSurface:Detailed"".upper()]
    zone_surfs = [s for s in surfs if s.Zone_Name == zone.Name]
    roofs = [s for s in zone_surfs if s.Surface_Type.upper() == ""ROOF""]
    ceilings = [s for s in zone_surfs if s.Surface_Type.upper() == ""CEILING""]
    topsurfaces = roofs + ceilings
    for surf in topsurfaces:
        idf.removeidfobject(surf)
    result = modeleditor.zonearea_roofceiling(idf, ""473222"")
    assert almostequal(result, 0)
    result = modeleditor.zonearea(idf, ""473222"")
    assert almostequal(result, 7.1938)
    result = modeleditor.zoneheight(idf, ""473222"")
    assert almostequal(result, 1.49)
    result = modeleditor.zonevolume(idf, ""473222"")
    assert almostequal(result, 10.718762)


",True
707,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,,test_idfreadtest,"def test_idfreadtest():
    """"""py.test for idfreadtest""""""
    data = (
        (
            """"""!IDD_Version 7.2.0.006
Version,
      \\unique-object
      \\format singleLine
  A1 ; \\field Version Identifier

SimulationControl,
      \\unique-object
  A1, \\field Do Zone Sizing Calculation
  A2, \\field Do System Sizing Calculation
  A3, \\field Do Plant Sizing Calculation
  A4, \\field Run Simulation for Sizing Periods
  A5; \\field Run Simulation for Weather File Run Periods

Building,
       \\unique-object
  A1 , \\field Name
  N1 , \\field North Axis
  A2 , \\field Terrain
  N2 , \\field Loads Convergence Tolerance Value
  N3 , \\field Temperature Convergence Tolerance Value
  A3 , \\field Solar Distribution
  N4 , \\field Maximum Number of Warmup Days
  N5 ; \\field Minimum Number of Warmup Days

Site:Location,
       \\unique-object
  A1 , \\field Name
  N1 , \\field Latitude
  N2 , \\field Longitude
  N3 , \\field Time Zone
  N4 ; \\field Elevation

"""""",
            """"""
VERSION,
    7.3;                      !- Version Identifier

SIMULATIONCONTROL,
    Yes,                      !- Do Zone Sizing Calculation
    Yes,                      !- Do System Sizing Calculation
    Yes,                      !- Do Plant Sizing Calculation
    No,                       !- Run Simulation for Sizing Periods
    Yes;                      !- Run Simulation for Weather File Run Periods

BUILDING,
    Empire State Building,    !- Name
    30.0,                     !- North Axis
    City,                     !- Terrain
    0.04,                     !- Loads Convergence Tolerance Value
    0.4,                      !- Temperature Convergence Tolerance Value
    FullExterior,             !- Solar Distribution
    25,                       !- Maximum Number of Warmup Days
    6;                        !- Minimum Number of Warmup Days

SITE:LOCATION,
    CHICAGO_IL_USA TMY2-94846,    !- Name
    41.78,                    !- Latitude
    -87.75,                   !- Longitude
    -6.0,                     !- Time Zone
    190.0;                    !- Elevation
"""""",
        ),  # iddtxt, idftxt
    )
    for iddtxt, idftxt in data:
        iddhandle = StringIO(iddtxt)
        idfhandle1 = StringIO(idftxt)
        idfhandle2 = StringIO(idftxt)
        result = simpleread.idfreadtest(iddhandle, idfhandle1, idfhandle2)
        assert result == True
",True
708,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_1_layer_construction,"def test_heatcapacity_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001
        assert c.heatcapacity == expected
        assert c.heatcapacity == 120

    ",True
709,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_2_layer_construction,"def test_heatcapacity_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert c.heatcapacity == expected
        assert c.heatcapacity == 240

    ",True
710,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_airgap_construction,"def test_heatcapacity_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert almostequal(c.heatcapacity, expected, places=2)
        assert almostequal(c.heatcapacity, 240, places=2)

    ",True
711,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_infraredtransparent_construction,"def test_heatcapacity_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        assert almostequal(c.heatcapacity, expected, places=2)
        assert almostequal(c.heatcapacity, 240, places=2)

    ",True
712,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_material,"def test_heatcapacity_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001
        assert m.heatcapacity == expected
        assert m.heatcapacity == 120
",True
713,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_nomass_construction,"def test_heatcapacity_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness * m.Specific_Heat * m.Density * 0.001 * 2
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert almostequal(c.heatcapacity, expected, places=2)
            assert almostequal(c.heatcapacity, 240, places=2)
            assert issubclass(w[-1].category, UserWarning)

    ",True
714,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_heatcapacity_roofvegetation_construction,"def test_heatcapacity_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = (
            m.Thickness * m.Specific_Heat_of_Dry_Soil * m.Density_of_Dry_Soil * 0.001
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            # check that a UserWarning is raised
            assert almostequal(c.heatcapacity, expected, places=2)
            assert almostequal(c.heatcapacity, 120, places=2)
            assert issubclass(w[-1].category, UserWarning)

    ",True
715,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_1_layer_construction,"def test_rvalue_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = INSIDE_FILM_R + m.Thickness / m.Conductivity + OUTSIDE_FILM_R
        assert c.rvalue == expected
        assert c.rvalue == 0.35

    ",True
716,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_2_layer_construction,"def test_rvalue_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert c.rvalue == expected
        assert c.rvalue == 0.55

    ",True
717,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_airgap_construction,"def test_rvalue_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        a = self.idf.getobject(""MATERIAL:AIRGAP"", ""AirGap"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + a.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.65, places=2)

    ",True
718,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_fails,"def test_rvalue_fails(self):
        self.idf.initreadtxt(expected_failure)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        try:
            c.rvalue
            assert False
        except AttributeError as e:
            assert str(e) == ""Skyhooks material not found in IDF""

    ",True
719,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_infraredtransparent_construction,"def test_rvalue_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.55, places=2)

    ",True
720,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_material,"def test_rvalue_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = m.Thickness / m.Conductivity
        assert m.rvalue == expected
        assert m.rvalue == 0.2

    ",True
721,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_nomass_construction,"def test_rvalue_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        n = self.idf.getobject(""MATERIAL:NOMASS"", ""NoMass"")
        expected = (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + n.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.rvalue, expected, places=2)
        assert almostequal(c.rvalue, 0.65, places=2)

    ",True
722,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_rvalue_roofvegetation_construction,"def test_rvalue_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = (
            INSIDE_FILM_R + m.Thickness / m.Conductivity_of_Dry_Soil + OUTSIDE_FILM_R
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert c.rvalue == expected
            assert c.rvalue == 0.35
            # check that a UserWarning is raised
            assert issubclass(w[-1].category, UserWarning)

    ",True
723,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_1_layer_construction,"def test_ufactor_1_layer_construction(self):
        self.idf.initreadtxt(single_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (INSIDE_FILM_R + m.Thickness / m.Conductivity + OUTSIDE_FILM_R)
        assert c.ufactor == expected
        assert c.ufactor == 1 / 0.35

    ",True
724,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_2_layer_construction,"def test_ufactor_2_layer_construction(self):
        self.idf.initreadtxt(double_layer)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert c.ufactor == expected
        assert c.ufactor == 1 / 0.55

    ",True
725,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_airgap_construction,"def test_ufactor_airgap_construction(self):
        self.idf.initreadtxt(air_gap)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        a = self.idf.getobject(""MATERIAL:AIRGAP"", ""AirGap"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + a.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.65, places=2)

    ",True
726,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_infraredtransparent_construction,"def test_ufactor_infraredtransparent_construction(self):
        self.idf.initreadtxt(infrared_transparent)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.55, places=2)

    ",True
727,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_material,"def test_ufactor_material(self):
        self.idf.initreadtxt(single_layer)
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        expected = 1 / (m.Thickness / m.Conductivity)
        assert m.ufactor == expected
        assert m.ufactor == 1 / 0.2

    ",True
728,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_nomass_construction,"def test_ufactor_nomass_construction(self):
        self.idf.initreadtxt(no_mass)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL"", ""TestMaterial"")
        n = self.idf.getobject(""MATERIAL:NOMASS"", ""NoMass"")
        expected = 1 / (
            INSIDE_FILM_R
            + m.Thickness / m.Conductivity
            + n.Thermal_Resistance
            + m.Thickness / m.Conductivity
            + OUTSIDE_FILM_R
        )
        assert almostequal(c.ufactor, expected, places=2)
        assert almostequal(c.ufactor, 1 / 0.65, places=2)

    ",True
729,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_thermal_properties.py,Test_ThermalProperties,test_ufactor_roofvegetation_construction,"def test_ufactor_roofvegetation_construction(self):
        self.idf.initreadtxt(roof_vegetation)
        c = self.idf.getobject(""CONSTRUCTION"", ""TestConstruction"")
        m = self.idf.getobject(""MATERIAL:ROOFVEGETATION"", ""RoofVegetation"")
        expected = 1 / (
            INSIDE_FILM_R + m.Thickness / m.Conductivity_of_Dry_Soil + OUTSIDE_FILM_R
        )
        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter(""always"")
            assert c.ufactor == expected
            assert c.ufactor == 1 / 0.35
            # check that a UserWarning is raised
            assert issubclass(w[-1].category, UserWarning)

    ",True
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_IDF.py,,test_IDF,"def test_IDF():
    """"""py.test for ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_EpBunch,"def test_EpBunch():
    """"""py.test for EpBunch""""""

    iddfile = StringIO(iddtxt)
    fname = StringIO(idftxt)
    block, data, commdct, idd_index = readidf.readdatacommdct1(fname, iddfile=iddfile)

    # setup code walls - can be generic for any object
    ddtt = data.dt
    dtls = data.dtls
    wall_i = dtls.index(""BuildingSurface:Detailed"".upper())
    wallkey = ""BuildingSurface:Detailed"".upper()
    wallidd = commdct[wall_i]

    dwalls = ddtt[wallkey]
    dwall = dwalls[0]

    wallfields = [comm.get(""field"") for comm in commdct[wall_i]]
    wallfields[0] = [""key""]
    wallfields = [field[0] for field in wallfields]
    wall_fields = [bunchhelpers.makefieldname(field) for field in wallfields]
    assert wall_fields[:20] == [
        ""key"",
        ""Name"",
        ""Surface_Type"",
        ""Construction_Name"",
        ""Zone_Name"",
        ""Outside_Boundary_Condition"",
        ""Outside_Boundary_Condition_Object"",
        ""Sun_Exposure"",
        ""Wind_Exposure"",
        ""View_Factor_to_Ground"",
        ""Number_of_Vertices"",
        ""Vertex_1_Xcoordinate"",
        ""Vertex_1_Ycoordinate"",
        ""Vertex_1_Zcoordinate"",
        ""Vertex_2_Xcoordinate"",
        ""Vertex_2_Ycoordinate"",
        ""Vertex_2_Zcoordinate"",
        ""Vertex_3_Xcoordinate"",
        ""Vertex_3_Ycoordinate"",
        ""Vertex_3_Zcoordinate"",
    ]

    bwall = EpBunch(dwall, wall_fields, wallidd)

    # print bwall.Name
    # print data.dt[wallkey][0][1]
    assert bwall.Name == data.dt[wallkey][0][1]
    bwall.Name = ""Gumby""
    # print bwall.Name
    # print data.dt[wallkey][0][1]
    # print
    assert bwall.Name == data.dt[wallkey][0][1]

    # set aliases
    bwall.__aliases = {""Constr"": ""Construction_Name""}

    # print ""wall.Construction_Name = %s"" % (bwall.Construction_Name, )
    # print ""wall.Constr = %s"" % (bwall.Constr, )
    # print
    assert bwall.Construction_Name == bwall.Constr
    # print ""change wall.Constr""
    bwall.Constr = ""AnewConstr""
    # print ""wall.Constr = %s"" % (bwall.Constr, )
    # print ""wall.Constr = %s"" % (data.dt[wallkey][0][3], )
    # print
    assert bwall.Constr == data.dt[wallkey][0][3]

    # add functions
    bwall.__functions = {""svalues"": bunch_subclass.somevalues}
    assert ""svalues"" in bwall.__functions

    # print bwall.svalues
    assert bwall.svalues == (
        ""Gumby"",
        ""AnewConstr"",
        [
            ""BuildingSurface:Detailed"",
            ""Gumby"",
            ""Wall"",
            ""AnewConstr"",
            ""West Zone"",
            ""Outdoors"",
            """",
            ""SunExposed"",
            ""WindExposed"",
            ""0.5000000"",
            ""4"",
            ""0"",
            ""0"",
            ""3.048000"",
            ""0"",
            ""0"",
            ""0"",
            ""6.096000"",
            ""0"",
            ""0"",
            ""6.096000"",
            ""0"",
            ""3.048000"",
        ],
    )

    # print bwall.__functions

    # test __getitem__
    assert bwall[""Name""] == data.dt[wallkey][0][1]
    # test __setitem__
    newname = ""loofah""
    bwall[""Name""] = newname
    assert bwall.Name == newname
    assert bwall[""Name""] == newname
    assert data.dt[wallkey][0][1] == newname
    # test functions and alias again
    assert bwall.Constr == data.dt[wallkey][0][3]
    assert bwall.svalues == (
        newname,
        ""AnewConstr"",
        [
            ""BuildingSurface:Detailed"",
            newname,
            ""Wall"",
            ""AnewConstr"",
            ""West Zone"",
            ""Outdoors"",
            """",
            ""SunExposed"",
            ""WindExposed"",
            ""0.5000000"",
            ""4"",
            ""0"",
            ""0"",
            ""3.048000"",
            ""0"",
            ""0"",
            ""0"",
            ""6.096000"",
            ""0"",
            ""0"",
            ""6.096000"",
            ""0"",
            ""3.048000"",
        ],
    )
    # test bunch_subclass.BadEPFieldError
    with pytest.raises(bunch_subclass.BadEPFieldError):
        bwall.Name_atypo = ""newname""
    with pytest.raises(bunch_subclass.BadEPFieldError):
        thename = bwall.Name_atypo
    with pytest.raises(bunch_subclass.BadEPFieldError):
        bwall[""Name_atypo""] = ""newname""
    with pytest.raises(bunch_subclass.BadEPFieldError):
        thename = bwall[""Name_atypo""]

    # test where constr[""obj""] has to be extended
    # more items are added to an extendible field
    constr_i = dtls.index(""Construction"".upper())
    constrkey = ""Construction"".upper()
    constridd = commdct[constr_i]
    dconstrs = ddtt[constrkey]
    dconstr = dconstrs[0]
    constrfields = [comm.get(""field"") for comm in commdct[constr_i]]
    constrfields[0] = [""key""]
    constrfields = [field[0] for field in constrfields]
    constr_fields = [bunchhelpers.makefieldname(field) for field in constrfields]
    bconstr = EpBunch(dconstr, constr_fields, constridd)
    assert bconstr.Name == ""Dbl Clr 3mm/13mm Air""
    bconstr.Layer_4 = ""butter""
    assert bconstr.obj == [
        ""Construction"",
        ""Dbl Clr 3mm/13mm Air"",
        ""CLEAR 3MM"",
        ""AIR 13MM"",
        ""CLEAR 3MM"",
        ""butter"",
    ]
    bconstr.Layer_7 = ""cheese""
    assert bconstr.obj == [
        ""Construction"",
        ""Dbl Clr 3mm/13mm Air"",
        ""CLEAR 3MM"",
        ""AIR 13MM"",
        ""CLEAR 3MM"",
        ""butter"",
        """",
        """",
        ""cheese"",
    ]
    bconstr[""Layer_8""] = ""jam""
    assert bconstr.obj == [
        ""Construction"",
        ""Dbl Clr 3mm/13mm Air"",
        ""CLEAR 3MM"",
        ""AIR 13MM"",
        ""CLEAR 3MM"",
        ""butter"",
        """",
        """",
        ""cheese"",
        ""jam"",
    ]

    # retrieve a valid field that has no value
    assert bconstr.Layer_10 == """"
    assert bconstr[""Layer_10""] == """"


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_extendlist,"def test_extendlist():
    """"""py.test for extendlist""""""
    data = (
        ([1, 2, 3], 2, 0, [1, 2, 3]),  # lst, i, value, nlst
        ([1, 2, 3], 3, 0, [1, 2, 3, 0]),  # lst, i, value, nlst
        ([1, 2, 3], 5, 0, [1, 2, 3, 0, 0, 0]),  # lst, i, value, nlst
        ([1, 2, 3], 7, 0, [1, 2, 3, 0, 0, 0, 0, 0]),  # lst, i, value, nlst
    )
    for lst, i, value, nlst in data:
        bunch_subclass.extendlist(lst, i, value=value)
        assert lst == nlst


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_fieldnames,"def test_fieldnames(self):
        """"""
        Test that the contents of idfobject.fieldnames are the same as those
        of objls.

        """"""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        for fn_item, objls_item in zip(idfobject.fieldnames, idfobject.objls):
            assert fn_item == objls_item

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_fieldvalues,"def test_fieldvalues(self):
        """"""
        Test that the contents of idfobject.fieldvalues are the same as those
        of obj.

        """"""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        for fv_item, objls_item in zip(idfobject.fieldvalues, idfobject.obj):
            assert fv_item == objls_item

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_getrange,"def test_getrange(self):
        data = (
            (
                ""Loads_Convergence_Tolerance_Value"",
                {
                    ""maximum"": 0.5,
                    ""minimum>"": 0.0,
                    ""maximum<"": None,
                    ""minimum"": None,
                    ""type"": ""real"",
                },
            ),  # fieldname, theranges
            (
                ""Maximum_Number_of_Warmup_Days"",
                {
                    ""maximum"": None,
                    ""minimum>"": -3,
                    ""maximum<"": 5,
                    ""minimum"": None,
                    ""type"": ""integer"",
                },
            ),  # fieldname, theranges
        )
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        for fieldname, theranges in data:
            result = idfobject.getrange(fieldname)
            assert result == theranges

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_checkrange,"def test_checkrange(self):
        data = (
            (""Minimum_Number_of_Warmup_Days"", 4, False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""Minimum_Number_of_Warmup_Days"", 6, True, bunch_subclass.RangeError),
            # fieldname, fieldvalue, isexception, theexception
            (""Minimum_Number_of_Warmup_Days"", 5, False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""Minimum_Number_of_Warmup_Days"", -3, False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""Minimum_Number_of_Warmup_Days"", -4, True, bunch_subclass.RangeError),
            # fieldname, fieldvalue, isexception, theexception
            # -
            (""Maximum_Number_of_Warmup_Days"", 4, False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""Maximum_Number_of_Warmup_Days"", 5, True, bunch_subclass.RangeError),
            # fieldname, fieldvalue, isexception, theexception
            (""Maximum_Number_of_Warmup_Days"", -3, True, bunch_subclass.RangeError),
            # fieldname, fieldvalue, isexception, theexception
            (
                ""Loads_Convergence_Tolerance_Value"",
                0.3,
                False,
                bunch_subclass.RangeError,
            ),
            # fieldname, fieldvalue, isexception, theexception
            (""Loads_Convergence_Tolerance_Value"", 0, True, bunch_subclass.RangeError),
            # fieldname, fieldvalue, isexception, theexception
            # -
            (""North_Axis"", 0, False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""Name"", ""Empire State Building"", False, None),
            # fieldname, fieldvalue, isexception, theexception
            (""key"", ""BUILDING"", False, None),
            # fieldname, fieldvalue, isexception, theexception
        )
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        for fieldname, fieldvalue, isexception, theexception in data:
            idfobject[fieldname] = fieldvalue
            if not isexception:
                result = idfobject.checkrange(fieldname)
                assert result == fieldvalue
            else:
                with pytest.raises(theexception):
                    result = idfobject.checkrange(fieldname)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_getfieldidd,"def test_getfieldidd(self):
        """"""py.test for getfieldidd""""""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        result = idfobject.getfieldidd(""North_Axis"")
        assert result == {""type"": [""real""]}
        result = idfobject.getfieldidd(""No_such_field"")
        assert result == {}

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_getfieldidd_item,"def test_getfieldidd_item(self):
        """"""py.test for test_getfieldidd_item""""""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        result = idfobject.getfieldidd_item(""North_Axis"", ""type"")
        assert result == [""real""]
        result = idfobject.getfieldidd_item(""North_Axis"", ""no_such_key"")
        assert result == []
        result = idfobject.getfieldidd_item(""no_such_field"", ""type"")
        assert result == []

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_get_retaincase,"def test_get_retaincase(self):
        """"""py.test for get_retaincase""""""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        result = idfobject.get_retaincase(""Name"")
        assert result == True
        result = idfobject.get_retaincase(""Terrain"")
        assert result == False

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_isequal,"def test_isequal(self):
        """"""py.test for isequal""""""
        obj, objls, objidd = self.initdata()
        idfobject = EpBunch(obj, objls, objidd)
        # test Terrain -> Alphanumeric, no retaincase
        result = idfobject.isequal(""Terrain"", ""City"")
        assert result == True
        result = idfobject.isequal(""Terrain"", ""Rural"")
        assert result == False
        result = idfobject.isequal(""Terrain"", ""CITY"")
        assert result == True
        # test Name -> Alphanumeric, retaincase
        result = idfobject.isequal(""Name"", ""Empire State Building"")
        assert result == True
        result = idfobject.isequal(""Name"", ""Empire State Building"".upper())
        assert result == False
        # test North_Axis -> real
        result = idfobject.isequal(""North_Axis"", 30)
        assert result == True
        result = idfobject.isequal(""North_Axis"", ""30"")
        assert result == True
        # test North_Axis -> real
        result = idfobject.isequal(""North_Axis"", 30.02)
        assert result == False
        result = idfobject.isequal(""North_Axis"", 30.02, places=1)
        assert result == True
        # test Maximum_Number_of_Warmup_Days -> integer
        result = idfobject.isequal(""Maximum_Number_of_Warmup_Days"", 25)
        assert result == True
        result = idfobject.isequal(""Maximum_Number_of_Warmup_Days"", 25.0000)
        assert result == True
        result = idfobject.isequal(""Maximum_Number_of_Warmup_Days"", 25.00001)
        assert result == False

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunch_subclass.py,,test_EpBunch1,"def test_EpBunch1():
    """"""py.test for EpBunch1""""""
    iddfile = StringIO(iddtxt)
    idffile = StringIO(bldfidf)
    block, data, commdct, idd_index = readidf.readdatacommdct1(idffile, iddfile=iddfile)
    key = ""BUILDING""
    objs = data.dt[key]
    obj = objs[0]
    obj_i = data.dtls.index(key)
    bunchobj = idfreader.makeabunch(commdct, obj, obj_i)

    # assertions
    assert bunchobj.Name == ""Empire State Building""
    bunchobj.Name = ""Kutub Minar""
    assert bunchobj.Name == ""Kutub Minar""
    prnt = bunchobj.__repr__()
    result = """"""
BUILDING,
    Kutub Minar,              !- Name
    30.0,                     !- North Axis
    City,                     !- Terrain
    0.04,                     !- Loads Convergence Tolerance Value
    0.4,                      !- Temperature Convergence Tolerance Value
    FullExterior,             !- Solar Distribution
    25,                       !- Maximum Number of Warmup Days
    6;                        !- Minimum Number of Warmup Days
""""""
    assert prnt == result
    # print bunchobj.objidd
    # assert 1 == 0
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,,test_onlylegalchar,"def test_onlylegalchar():
    """"""py.test for onlylegalchar""""""
    data = (
        (""abc"", ""abc""),  # name, newname
        (""abc {mem}"", ""abc mem""),  # name, newname
        (""abc {mem} #1"", ""abc mem 1""),  # name, newname
    )
    for name, newname in data:
        result = bunchhelpers.onlylegalchar(name)
        assert result == newname


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,,test_makefieldname,"def test_makefieldname():
    """"""py.test for makefieldname""""""
    data = (
        (""aname"", ""aname""),  # namefromidd, bunchname
        (""a name"", ""a_name""),  # namefromidd, bunchname
        (""a name #1"", ""a_name_1""),  # namefromidd, bunchname
    )
    for namefromidd, bunchname in data:
        result = bunchhelpers.makefieldname(namefromidd)
        assert result == bunchname


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,,testintinlist,"def testintinlist():
    """"""pytest for intinlist""""""
    data = (
        (""this is"", False),  # lst, hasint
        (""this is 1"", True),  # lst, hasint
        (""this 54 is "", True),  # lst, hasint
    )
    for lst, hasint in data:
        result = bunchhelpers.intinlist(lst)
        assert result == hasint


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_bunchhelpers.py,,test_replaceint,"def test_replaceint():
    """"""pytest for replaceint""""""
    data = (
        (""this is"", ""this is""),  # fname, newname
        (""this is 54"", ""this is %s""),  # fname, newname
        # ('this is #54', 'this is %s'), # fname, newname
    )
    for fname, newname in data:
        result = bunchhelpers.replaceint(fname)
        assert result == newname
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,,test_cleanupversion,"def test_cleanupversion():
    """"""py.test for cleanupversion""""""
    data = (
        (""8.8.0"", ""8.8.0""),  # ver, expected
        (""8.8.1"", ""8.8.0""),  # ver, expected
        (""8.8"", ""8.8.0""),  # ver, expected
        (""8"", ""8.0.0""),  # ver, expected
        ("""", "".0.0""),  # ver, expected
    )
    for ver, expected in data:
        result = easyopen.cleanupversion(ver)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,,test_easyopen_idfopen,"@pytest.mark.skipif(
    not do_integration_tests(), reason=""$EPPY_INTEGRATION env var not set""
)
def test_easyopen_idfopen():
    """"""py.test for easyopen""""""
    ver = idd_helpers.latestidd()
    txt, result = (""  Version,{};"".format(ver), ""{}"".format(ver))
    fhandle1 = StringIO(txt)
    fhandle2 = StringIO(txt)
    reload(eppy)
    reload(modeleditor)
    reload(easyopen)
    idf1, idf2 = easyopen.easyopen(fhandle1), eppy.openidf(fhandle2)
    for idf in [idf1, idf2]:
        versions = idf.idfobjects[""version""]
        version = versions[0]
        ver = version.Version_Identifier
        assert result == ver
    # test with epw=weatherfile
    fhandle1 = StringIO(txt)
    fhandle2 = StringIO(txt)
    epwname = ""weatherfile.epw""
    idf1, idf2 = (
        easyopen.easyopen(fhandle1, epw=epwname),
        eppy.openidf(fhandle2, epw=epwname),
    )
    for idf in [idf1, idf2]:
        assert idf.epw == epwname


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_easyopen.py,,test_easyopen_withidd,"@pytest.mark.skipif(
    not do_integration_tests(), reason=""$EPPY_INTEGRATION env var not set""
)
def test_easyopen_withidd():
    """"""py.test for easyopen""""""
    ver = idd_helpers.latestidd()
    iddfile = easyopen.getiddfile(ver)
    txt, result = (""  Version,{};"".format(ver), ""{}"".format(ver))
    fhandle1 = StringIO(txt)
    fhandle2 = StringIO(txt)
    reload(eppy)
    reload(modeleditor)
    reload(easyopen)
    idf1, idf2 = (
        easyopen.easyopen(fhandle1, idd=iddfile),
        eppy.openidf(fhandle2, idd=iddfile),
    )
    for idf in [idf1, idf2]:
        versions = idf.idfobjects[""version""]
        version = versions[0]
        ver = version.Version_Identifier
        assert result == ver
    # test with epw=weatherfile
    fhandle1 = StringIO(txt)
    fhandle2 = StringIO(txt)
    epwname = ""weatherfile.epw""
    idf1, idf2 = (
        easyopen.easyopen(fhandle1, idd=iddfile, epw=epwname),
        eppy.openidf(fhandle2, idd=iddfile, epw=epwname),
    )
    for idf in [idf1, idf2]:
        assert idf.epw == epwname
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_eppy.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_eppy.py,,test_newidf,"@pytest.mark.skipif(
    not do_integration_tests(), reason=""$EPPY_INTEGRATION env var not set""
)
def test_newidf():
    """"""py.test for newidf""""""
    data = ((idd_helpers.latestidd(), idd_helpers.latestidd()),)  # ver, expected
    for ver, expected in data:
        idf = eppy.newidf(ver)
        result = idf.idfobjects[""version"".upper()][0]
        assert result.Version_Identifier == expected
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,,test_readwrite,"def test_readwrite():
    """"""py.test for ex_readwrite""""""
    txt = str(data)
    head = ""Zone,\n     PLENUM-1,\n     0.0,\n     0.0,\n     0.0,\n     0.0,\n     1,\n     1,\n     0.609600067,\n     283.2;\n\n""
    tail = ""\n\nBuildingSurface:Detailed,\n     WALL-1PF,\n     WALL,\n     WALL-1,\n     PLENUM-1,\n     Outdoors,\n     ,\n     SunExposed,\n     WindExposed,\n     0.5,\n     4,\n     0.0,\n     0.0,\n     3.0,\n     0.0,\n     0.0,\n     2.4,\n     30.5,\n     0.0,\n     2.4,\n     30.5,\n     0.0,\n     3.0;\n\n""
    # assert head == txt[:108]
    # assert tail == txt[-280:]


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,,test_addobject,"def test_addobject():
    """"""py.test for ex_addobject.py""""""
    zones = bunchdt[""zone""]  # all the zones
    assert len(zones) == 7
    modeleditor.addobject(bunchdt, data, commdct, ""Zone"".upper(), None, aname=""NewZone"")
    assert len(zones) == 8
    assert zones[-1].obj == [
        ""ZONE"",
        ""NewZone"",
        0.0,
        0.0,
        0.0,
        0.0,
        1,
        1,
        ""autocalculate"",
        ""autocalculate"",
        ""autocalculate"",
        """",
        """",
        ""Yes"",
    ]


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_examples.py,,test_functions,"def test_functions():
    """"""py.test for ex_functions.py""""""
    surfaces = bunchdt[""BuildingSurface:Detailed""]  # all the surfaces
    assert len(surfaces) == 1
    surface = surfaces[0]
    assert surface.Name == ""WALL-1PF""
    assert surface.azimuth == 180.0
    assert surface.tilt == 90.0
    assert pytest_helpers.almostequal(surface.area, 18.3)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_pascal2inh2o,"def test_pascal2inh2o():
    """"""py.test for pascal2inh2o and inh2o2pascal""""""
    data = (
        (1, 0.00401865),  # pascal, expected
        (186.816675, 0.7507501808391),  # pascal, expected
    )
    for pascal, expected in data:
        result = fanpower.pascal2inh2o(pascal)
        assert almostequal(result, expected, places=5)
    data = (
        (1, 0.00401865),  # expected, inh20
        (186.816675, 0.7507501808391),  # expected, inh20
    )
    for expected, inh20 in data:
        result = fanpower.inh2o2pascal(inh20)
        assert almostequal(result, expected, places=3)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_m3s2cfm,"def test_m3s2cfm():
    """"""py.test for m3s2cfm and cfm2m3s""""""
    data = (
        (1, 2118.880003),  # m3s, expected
        (1.28442384, 2721.539989952472),  # m3s, expected
    )
    for m3s, expected in data:
        result = fanpower.m3s2cfm(m3s)
        assert result == expected
    data = (
        (1, 2118.880003),  # expected, cfm
        (1.28442384, 2721.539989952472),  # expected, cfm
    )
    for expected, cfm in data:
        result = fanpower.cfm2m3s(cfm)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_fan_bhp,"def test_fan_bhp():
    """"""py.test for fan_bhp""""""
    data = (
        (
            0.342,
            186.816675,
            1.28442384,
            0.939940898974,
        ),  # fan_tot_eff, pascal, m3s, expected
        (
            0.537,
            871.81115,
            2.44326719,
            5.31400249068,
        ),  # fan_tot_eff, pascal, m3s, expected
    )
    for fan_tot_eff, pascal, m3s, expected in data:
        result = fanpower.fan_bhp(fan_tot_eff, pascal, m3s)
        assert almostequal(result, expected)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_bhp2watts,"def test_bhp2watts():
    """"""py.test for bhp2watts and watts2bhp""""""
    data = (
        (0.939940898974, 700.9139283649118),  # bhp, expected
        (5.31400249068, 3962.6516573000763),  # bhp, expected
    )
    for bhp, expected in data:
        result = fanpower.bhp2watts(bhp)
        assert result == expected
    data = (
        (0.939940898974, 700.9139283649118),  # expected, watts
        (5.31400249068, 3962.6516573000763),  # expected, watts
    )
    for expected, watts in data:
        result = fanpower.watts2bhp(watts)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_fan_watts,"def test_fan_watts():
    """"""py.test for fan_watts""""""
    data = (
        (
            0.342,
            186.816675,
            1.28442384,
            700.9139283649118,
        ),  # fan_tot_eff, pascal, m3s, expected
        (
            0.537,
            871.81115,
            2.44326719,
            3962.6516573000763,
        ),  # fan_tot_eff, pascal, m3s, expected
    )
    for fan_tot_eff, pascal, m3s, expected in data:
        result = fanpower.fan_watts(fan_tot_eff, pascal, m3s)
        assert almostequal(result, expected)


vavfan = """"""Fan:VariableVolume,
  Fan 2,                                  !- Name
  OfficeHVACAvail,                        !- Availability Schedule Name
  0.519,                                  !- Fan Total Efficiency
  164.3824832215,                         !- Pressure Rise {Pa}
  5.6633693184,                           !- Maximum Flow Rate {m3/s}
  FixedFlowRate,                          !- Fan Power Minimum Flow Rate Input Method
  0,                                      !- Fan Power Minimum Flow Fraction
  1.4158423296,                           !- Fan Power Minimum Air Flow Rate {m3/s}
  0.865,                                  !- Motor Efficiency
  1,                                      !- Motor In Airstream Fraction
  0.04076,                                !- Fan Power Coefficient 1
  0.088045,                               !- Fan Power Coefficient 2
  -0.072926,                              !- Fan Power Coefficient 3
  0.94374,                                !- Fan Power Coefficient 4
  0,                                      !- Fan Power Coefficient 5
  AC(1)(2) Supply Side (Return Air) Inlet Node, !- Air Inlet Node Name
  Fan 2 Outlet Node;                      !- Air Outlet Node Name
""""""


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_bhp2pascal,"def test_bhp2pascal():
    """"""py.test for bhp2pascal""""""
    bhp = 10.182489271962908
    cfm = 74999.99998975938
    fan_tot_eff = 0.58
    exp_pascal, exp_m3s = (124.544455, 35.39605824)
    result_pascal, result_m3s = fanpower.bhp2pascal(bhp, cfm, fan_tot_eff)
    assert almostequal(result_pascal, exp_pascal)
    assert almostequal(result_m3s, exp_m3s)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_fanpower.py,,test_watts2pascal,"def test_watts2pascal():
    """"""py.test for watts2pascal""""""
    watts = 7593.0822501027405
    cfm = 74999.99998975938
    fan_tot_eff = 0.58
    exp_pascal, exp_m3s = (124.544455, 35.39605824)
    result_pascal, result_m3s = fanpower.watts2pascal(watts, cfm, fan_tot_eff)
    assert almostequal(result_pascal, exp_pascal)
    assert almostequal(result_m3s, exp_m3s)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_flattencopy,"def test_flattencopy():
    """"""py.test for flattencopy""""""
    tdata = (
        ([1, 2], [1, 2]),  # lst , nlst
        ([1, 2, [3, 4]], [1, 2, 3, 4]),  # lst , nlst
        ([1, 2, [3, [4, 5, 6], 7, 8]], [1, 2, 3, 4, 5, 6, 7, 8]),  # lst , nlst
        ([1, 2, [3, [4, 5, [6, 7], 8], 9]], [1, 2, 3, 4, 5, 6, 7, 8, 9]),
        # lst , nlst
    )
    for lst, nlst in tdata:
        result = hvacbuilder.flattencopy(lst)
        assert result == nlst


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_clean_listofcomponents,"def test_clean_listofcomponents():
    """"""py.test for _clean_listofcomponents""""""
    data = (
        ([1, 2], [(1, None), (2, None)]),  # lst, clst
        ([(1, None), 2], [(1, None), (2, None)]),  # lst, clst
        ([(1, ""stuff""), 2], [(1, ""stuff""), (2, None)]),  # lst, clst
    )
    for lst, clst in data:
        result = hvacbuilder._clean_listofcomponents(lst)
        assert result == clst


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_hvacbuilder.py,,test_clean_listofcomponents_tuples,"def test_clean_listofcomponents_tuples():
    """"""py.test for _clean_listofcomponents_tuples""""""
    data = (
        ([(1, 2), (2, 3)], [(1, 2, None), (2, 3, None)]),  # lst, clst
        ([(1, 2, None), (2, 3)], [(1, 2, None), (2, 3, None)]),  # lst, clst
        ([(1, 2, ""stuff""), (2, 3)], [(1, 2, ""stuff""), (2, 3, None)]),  # lst, clst
    )
    for lst, clst in data:
        result = hvacbuilder._clean_listofcomponents_tuples(lst)
        assert result == clst
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idd_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idd_helpers.py,,test_folder2ver,"def test_folder2ver():
    """"""py.test for folder2ver""""""
    data = (
        (""EnergyPlus-8-8-0"", ""8.8.0""),  # folder, expected
        (""EnergyPlusV8-8-0"", ""8.8.0""),  # folder, expected
    )
    for folder, expected in data:
        result = idd_helpers.folder2ver(folder)
        assert result == expected
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_iddgaps.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_iddgaps.py,,test_cleaniddfield,"def test_cleaniddfield():
    """"""pytest for cleaniddfield""""""
    data = (
        (
            {
                ""field"": [""Water Supply Storage Tank Name""],
                ""Field"": [""Water Supply Storage Tank Name""],
                ""object-list"": [""WaterStorageTankNames""],
                ""type"": [""object-list""],
            },
            {
                ""field"": [""Water Supply Storage Tank Name""],
                ""object-list"": [""WaterStorageTankNames""],
                ""type"": [""object-list""],
            },
        ),  # field, newfield
    )
    for field, newfield in data:
        result = iddgaps.cleaniddfield(field)
        assert result == newfield
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idf_helpers.py,,test_a,"def test_a():
#     assert 1== 2


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_iddversiontuple,"def test_iddversiontuple():
    """"""py.test for iddversiontuple""""""
    iddtxt = """"""stuff 9.8.4
    other stuff""""""
    fhandle = StringIO(iddtxt)
    result = idfreader.iddversiontuple(fhandle)
    assert result == (9, 8, 4)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_convertafield,"def test_convertafield():
    """"""py.test for convertafield""""""
    data = (
        ({""type"": ""integer""}, ""1"", ""N1"", 1),
        # field_comm, field_val, field_iddname, expected
        ({}, ""1"", ""N1"", 1.0),
        # field_comm, field_val, field_iddname, expected
        ({""type"": ""real""}, ""1"", ""N1"", 1.0),
        # field_comm, field_val, field_iddname, expected
        ({}, ""autosize"", ""N1"", ""autosize""),
        ({}, ""4"", ""A1"", ""4""),
        # field_comm, field_val, field_iddname, expected
    )
    for field_comm, field_val, field_iddname, expected in data:
        result = idfreader.convertafield(field_comm, field_val, field_iddname)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_convertallfields,"def test_convertallfields():
    """"""py.test convertallfields""""""
    data = (
        (""version, 8.1;"", ""VERSION"", [""version"", ""8.1""]),
        # idfstr, objkey, expected
        (
            ""WINDOWMATERIAL:SIMPLEGLAZINGSYSTEM, simple, 0.45;"",
            ""WINDOWMATERIAL:SIMPLEGLAZINGSYSTEM"",
            [""WINDOWMATERIAL:SIMPLEGLAZINGSYSTEM"", ""simple"", 0.45],
        ),
        # idfstr, objkey, expected
        (
            ""HVACTEMPLATE:ZONE:FANCOIL, gumby1, gumby2, 0.45;"",
            ""HVACTEMPLATE:ZONE:FANCOIL"",
            [""HVACTEMPLATE:ZONE:FANCOIL"", ""gumby1"", ""gumby2"", 0.45],
        ),
        # idfstr, objkey, expected
        (
            ""HVACTEMPLATE:ZONE:FANCOIL, gumby1, gumby2, autosize;"",
            ""HVACTEMPLATE:ZONE:FANCOIL"",
            [""HVACTEMPLATE:ZONE:FANCOIL"", ""gumby1"", ""gumby2"", ""autosize""],
        ),
        # idfstr, objkey, expected
    )
    commdct = None
    block = None
    for idfstr, objkey, expected in data:
        idfhandle = StringIO(idfstr)
        block, data, commdct, idd_index = readidf.readdatacommdct1(
            idfhandle, iddfile=iddfhandle, commdct=commdct, block=block
        )
        idfreader.convertallfields(data, commdct, block)
        result = data.dt[objkey][0]
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_getextensible,"def test_getextensible():
    """"""py.test for getextensible""""""
    data = (
        (
            [
                {
                    ""format"": [""singleLine""],
                    ""group"": ""Simulation Parameters"",
                    ""idfobj"": ""Version"",
                    ""memo"": [""Specifies the EnergyPlus version of the IDF file.""],
                    ""unique-object"": [""""],
                },
                {},
                {},
                {},
            ],
            None,
        ),  # objidd, expected
        (
            [
                {
                    ""extensible:2"": [
                        '- repeat last two fields, remembering to remove ; from ""inner"" fields.'
                    ],
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                    ""memo"": [
                        ""A Schedule:Day:Interval contains a full day of values with specified end times for each value"",
                        ""Currently, is set up to allow for 10 minute intervals for an entire day."",
                    ],
                    ""min-fields"": [""5""],
                },
                {},
                {},
                {},
            ],
            2,
        ),  # objidd, expected
    )
    for objidd, expected in data:
        result = idfreader.getextensible(objidd)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_endof_extensible,"def test_endof_extensible():
    """"""py.test for endof_extensible""""""
    data = (
        (1, [""gumby"", ""A1"", ""A2""], [""A2""]),  # extensible, thisblock, expected
        (1, [""gumby"", ""A1"", ""A2"", ""A3""], [""A3""]),  # extensible, thisblock, expected
        (
            2,
            [""gumby"", ""A1"", ""A2"", ""A3""],
            [""A2"", ""A3""],
        ),  # extensible, thisblock, expected
    )
    for extensible, thisblock, expected in data:
        result = idfreader.endof_extensible(extensible, thisblock)
        assert result == expected


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_idfreader.py,,test_extension_of_extensible,"def test_extension_of_extensible():
    """"""py.test for extension_of_extensible""""""
    data = (
        (
            [
                {
                    ""extensible:1"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""A1"", ""A2""],
            1,
            [""A3""],
        ),  # objidd, objblock, n, expected
        (
            [
                {
                    ""extensible:1"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""A1"", ""A2""],
            2,
            [""A3"", ""A4""],
        ),  # objidd, objblock, n, expected
        (
            [
                {
                    ""extensible:1"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""A1"", ""A2""],
            3,
            [""A3"", ""A4"", ""A5""],
        ),  # objidd, objblock, n, expected
        (
            [
                {
                    ""extensible:2"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""A1"", ""A2""],
            2,
            [""A3"", ""A4""],
        ),  # objidd, objblock, n, expected
        (
            [
                {
                    ""extensible:4"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""N3"", ""A4"", ""M8"", ""A5""],
            4,
            [""N4"", ""A6"", ""M9"", ""A7""],
        ),  # objidd, objblock, n, expected
        (
            [
                {
                    ""extensible:4"": None,
                    ""group"": ""Schedules"",
                    ""idfobj"": ""Schedule:Day:Interval"",
                },
                {},
                {},
                {},
            ],
            [""Gumby"", ""N3"", ""A4"", ""M8"", ""A5""],
            12,
            [
                ""N4"",
                ""A6"",
                ""M9"",
                ""A7"",
                ""N5"",
                ""A8"",
                ""M10"",
                ""A9"",
                ""N6"",
                ""A10"",
                ""M11"",
                ""A11"",
            ],
        ),  # objidd, objblock, n, expected
    )
    for objidd, objblock, n, expected in data:
        result = idfreader.extension_of_extensible(objidd, objblock, n)
        assert result == expected
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_json_functions.py,,test_key2elements,"def test_key2elements():
    """"""py.test for key2elements""""""
    data = (
        (""a.b.c.d"", [""a"", ""b"", ""c"", ""d""]),  # key, elements
        (""idf.a.Name.name.c"", [""idf"", ""a"", ""Name.name"", ""c""]),  # key, elements
        (""idf.a.'Name.name'.c"", [""idf"", ""a"", ""Name.name"", ""c""]),  # key, elements
        (""idf.a.'Name.name.n'.c"", [""idf"", ""a"", ""Name.name.n"", ""c""]),  # key, elements
    )
    for key, elements in data:
        result = json_functions.key2elements(key)
        # print(result)
        # print(elements)
        assert result == elements


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,,test_dropnodes,"def test_dropnodes():
    """"""py.test for dropnodes""""""
    # test 1
    node = ""node""
    (a, b, c, d, e, f, g, h, i) = (
        (""a"", node),
        ""b"",
        (""c"", node),
        ""d"",
        (""e"", node),
        ""f"",
        (""g"", node),
        ""h"",
        (""i"", node),
    )
    edges = [(a, b), (b, c), (c, d), (d, e), (e, f), (f, g), (g, h), (h, i)]
    theresult = [(""a"", ""b""), (""b"", ""d""), (""d"", ""f""), (""f"", ""h""), (""h"", ""i"")]
    result = dropnodes(edges)
    assert result == theresult
    # test 2
    (a, b, c, d, e, f, g, h, i, j) = (
        (""a"", node),
        ""b"",
        (""c"", node),
        (""d"", node),
        ""e"",
        ""f"",
        (""g"", node),
        (""h"", node),
        ""i"",
        (""j"", node),
    )
    edges = [
        (a, b),
        (b, c),
        (c, e),
        (e, g),
        (g, i),
        (i, j),
        (b, d),
        (d, f),
        (f, h),
        (h, i),
    ]
    theresult = [(""a"", ""b""), (""b"", ""e""), (""e"", ""i""), (""i"", ""j""), (""b"", ""f""), (""f"", ""i"")]
    result = dropnodes(edges)
    assert result == theresult


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,,test_edges2nodes,"def test_edges2nodes():
    """"""py.test for edges2nodes""""""
    thedata = (
        ([(""a"", ""b""), (""b"", ""c""), (""c"", ""d"")], [""a"", ""b"", ""c"", ""d""]),  # edges, nodes
    )
    for edges, nodes in thedata:
        result = edges2nodes(edges)
        assert result == nodes


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,,test_replace_colon,"def test_replace_colon():
    """"""py.test for replace_colon""""""
    data = ((""zone:aap"", ""@"", ""zone@aap""),)  # s, r, replaced
    for s, r, replaced in data:
        result = replace_colon(s, r)
        assert result == replaced


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,,test_cleanedges,"def test_cleanedges():
    """"""py.test for cleanedges""""""
    data = (
        (
            [(""a:a"", ""a""), ((""a"", ""a""), ""a:a""), (""a:a"", (""a"", ""a""))],
            ((""a__a"", ""a""), ((""a"", ""a""), ""a__a""), (""a__a"", (""a"", ""a""))),
        ),
        # edg, clean_edg
    )
    for edg, clean_edg in data:
        result = clean_edges(edg)
        assert result == clean_edg


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_loopdiagram.py,,test_loopdiagram_integration,"@pytest.mark.skipif(
    not do_integration_tests(), reason=""$EPPY_INTEGRATION env var not set""
)
def test_loopdiagram_integration():
    """"""End-to-end smoke test on an example file""""""
    idd = os.path.join(IDD_FILES, ""Energy+V8_1_0.idd"")
    fname = os.path.join(IDF_FILES, ""V8_1_0/Boiler.idf"")
    process_idf(fname, idd)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_poptrailing,"def test_poptrailing():
    """"""py.test for poptrailing""""""
    tdata = (
        ([1, 2, 3, """", 56, """", """", """", """"], [1, 2, 3, """", 56]),  # lst, popped
        ([1, 2, 3, """", 56], [1, 2, 3, """", 56]),  # lst, popped
        ([1, 2, 3, 56], [1, 2, 3, 56]),  # lst, popped
    )
    for before, after in iter(tdata):
        assert modeleditor.poptrailing(before) == after


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_extendlist,"def test_extendlist():
    """"""py.test for extendlist""""""
    tdata = (
        ([1, 2, 3], 2, 0, [1, 2, 3]),  # lst, i, value, nlst
        ([1, 2, 3], 3, 0, [1, 2, 3, 0]),  # lst, i, value, nlst
        ([1, 2, 3], 5, 0, [1, 2, 3, 0, 0, 0]),  # lst, i, value, nlst
        ([1, 2, 3], 7, 0, [1, 2, 3, 0, 0, 0, 0, 0]),  # lst, i, value, nlst
    )
    for lst, i, value, nlst in tdata:
        modeleditor.extendlist(lst, i, value=value)
        assert lst == nlst


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_namebunch,"def test_namebunch():
    """"""py.test for namebunch""""""
    thedata = (
        (Bunch(dict(Name="""", a=5)), ""yay"", ""yay""),  # abunch, aname, thename
        (Bunch(dict(Name=None, a=5)), ""yay"", None),  # abunch, aname, thename
    )
    for abunch, aname, thename in thedata:
        result = modeleditor.namebunch(abunch, aname)
        assert result.Name == thename


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor.py,,test_getnamedargs,"def test_getnamedargs():
    """"""py.test for getnamedargs""""""
    result = dict(a=1, b=2, c=3)
    assert result == modeleditor.getnamedargs(a=1, b=2, c=3)
    assert result == modeleditor.getnamedargs(dict(a=1, b=2, c=3))
    assert result == modeleditor.getnamedargs(dict(a=1, b=2), c=3)
    assert result == modeleditor.getnamedargs(dict(a=1), c=3, b=2)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_addobject,"def test_addobject():
    """"""py.test for addobject""""""
    thedata = (
        # key, aname, fielddict
        (""ZONE"", None, dict(Name=""Gumby"", X_Origin=50)),
        (""ZONE"", ""karamba"", {}),  # key, aname, fielddict
        (""ZONE"", None, {}),  # key, aname, fielddict
        # key, aname, fielddict
        (""ZONE"", None, dict(Name=""Gumby"", X_Origin=50)),
    )
    for key, aname, fielddict in thedata:
        result = modeleditor.addobject(
            bunchdt, data, commdct, key, None, aname, **fielddict
        )
        assert bunchdt[key][-1].key == key  # wierd, but correct :-)
        if aname:
            assert data.dt[key][-1][1] == aname
            assert bunchdt[key][-1].Name == aname
        if fielddict:
            for kkey, value in fielddict.items():
                assert bunchdt[key][-1][kkey] == value


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_addobject1,"def test_addobject1():
    """"""py.test for addobject""""""
    thedata = ((""ZONE"", {""Name"": ""karamba""}),)  # key, kwargs
    for key, kwargs in thedata:
        result = modeleditor.addobject1(bunchdt, data, commdct, key, **kwargs)
        aname = kwargs[""Name""]
        assert data.dt[key][-1][1] == aname
        assert bunchdt[key][-1].Name == aname


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_getobject,"def test_getobject():
    """"""py.test for getobject""""""
    thedata = (
        (""ZONE"", ""PLENUM-1"", bunchdt[""ZONE""][0]),  # key, name, theobject
        # key, name, theobject
        (""ZONE"", ""PLENUM-1"".lower(), bunchdt[""ZONE""][0]),
        (""ZONE"", ""PLENUM-A"", None),  # key, name, theobject
        (
            ""ZONEHVAC:EQUIPMENTCONNECTIONS"",
            ""SPACE1-1"",
            bunchdt[""ZONEHVAC:EQUIPMENTCONNECTIONS""][0],
        ),  # key, name, theobject
    )
    for key, name, theobject in thedata:
        result = modeleditor.getobject(bunchdt, key, name)
        assert result == theobject


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test___objecthasfields,"def test___objecthasfields():
    """"""py.test for __objecthasfields""""""
    thedata = (
        (""ZONE"", dict(Name=""testzone"", X_Origin=32), ""testzone"", True),
        # key, fielddict, aname, istrue
        (""ZONE"", dict(Name=""testzone"", X_Origin=32), ""testzone1"", False),
        # key, fielddict, aname, istrue
    )
    for key, fielddict, aname, istrue in thedata:
        idfobject = modeleditor.addobject(
            bunchdt, data, commdct, key, None, **fielddict
        )
        idfobject.Name = aname  # modify the name, to check for a False return
        result = modeleditor.__objecthasfields(
            bunchdt, data, commdct, idfobject, **fielddict
        )
        assert result == istrue


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_getobjects,"def test_getobjects():
    """"""py.test for getobjects""""""
    thedata = (
        (""ZONE"", {""Name"": ""PLENUM-1""}, 7, bunchdt[""ZONE""][0:1]),
        # key, fielddict, places, theobjects
        # ('ZONE', {'Name':'PLENUM-1', 'Volume':283.2},7,bunchdt['ZONE'][0:1]),
        # key, fielddict, places, theobjects
        # ('ZONE', {'Y_Origin':0.}, 7, bunchdt['ZONE']),
        # key, fielddict, places, theobjects
    )
    for key, fielddict, places, theobjects in thedata:
        result = modeleditor.getobjects(bunchdt, data, commdct, key, **fielddict)
        assert result == theobjects


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_is_retaincase,"def test_is_retaincase():
    """"""py.test for is_retaincase""""""
    thedata = (
        (""BUILDING"", ""Name"", True),  # key, fieldname, case
        (""BUILDING"", ""Terrain"", False),  # key, fieldname, case
    )
    for key, fieldname, case in thedata:
        idfobject = bunchdt[key][0]
        result = modeleditor.is_retaincase(bunchdt, data, commdct, idfobject, fieldname)
        assert result == case


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_isfieldvalue,"def test_isfieldvalue():
    """"""py.test for isfieldvalue""""""
    thedata = (
        (""BUILDING"", 0, ""Name"", ""Building"", 7, True),
        # key, objindex1, fieldname, value, places, isequal
        (""BUILDING"", 0, ""Name"", ""BuildinG"", 7, False),
        # key, objindex1, fieldname, value, places, isequal
        (""BUILDING"", 0, ""North_Axis"", 30, 7, True),
        # key, objindex1, fieldname, value, places, isequal
        (""BUILDING"", 0, ""North_Axis"", ""30"", 7, True),
        # key, objindex1, fieldname, value, places, isequal
        (""BUILDING"", 0, ""North_Axis"", 30.001, 7, False),
        # key, objindex1, fieldname, value, places, isequal
        (""BUILDING"", 0, ""North_Axis"", 30.001, 2, True),
        # key, objindex1, fieldname, value, places, isequal
        (""ZONE"", 0, ""Volume"", 283.2, 2, True),
        # key, objindex1, fieldname, value, places, isequal
    )
    for key, objindex1, fieldname, value, places, isequal in thedata:
        idfobject = bunchdt[key][objindex1]
        result = modeleditor.isfieldvalue(
            bunchdt, data, commdct, idfobject, fieldname, value, places
        )
        assert result == isequal


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_equalfield,"def test_equalfield():
    """"""py.test for equalfield""""""
    thedata = (
        (""BUILDING"", 0, 1, ""Name"", 7, True),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 2, ""Name"", 7, False),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 1, ""Terrain"", 7, True),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 1, ""Terrain"", 7, True),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 1, ""North_Axis"", 7, True),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 2, ""North_Axis"", 2, True),
        # key, objindex1, objeindex2, fieldname, places, isequal
        (""BUILDING"", 0, 3, ""Maximum_Number_of_Warmup_Days"", 7, True),
        (""BUILDING"", 0, 3, ""Minimum_Number_of_Warmup_Days"", 7, False),
        # key, objindex1, objeindex2, fieldname, places, isequal
    )
    for key, objindex1, objindex2, fieldname, places, isequal in thedata:
        idfobject1 = bunchdt[key][objindex1]
        idfobject2 = bunchdt[key][objindex2]
        result = modeleditor.equalfield(
            bunchdt, data, commdct, idfobject1, idfobject2, fieldname, places
        )
        assert result == isequal
    (key, objindex1, objeindex2, fieldname, places, isequal) = (
        ""BUILDING"",
        0,
        1,
        ""Name"",
        7,
        True,
    )
    idfobject1 = bunchdt[key][objindex1]
    idfobject2 = bunchdt[""ZONE""][objindex2]
    with pytest.raises(modeleditor.NotSameObjectError):
        modeleditor.equalfield(
            bunchdt, data, commdct, idfobject1, idfobject2, fieldname, places
        )


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_removeextensibles,"def test_removeextensibles():
    """"""py.test for removeextensibles""""""
    thedata = (
        (
            ""BuildingSurface:Detailed"".upper(),
            ""WALL-1PF"",
            [
                ""BuildingSurface:Detailed"",
                ""WALL-1PF"",
                ""WALL"",
                ""WALL-1"",
                ""PLENUM-1"",
                ""Outdoors"",
                """",
                ""SunExposed"",
                ""WindExposed"",
                ""0.50000"",
                ""4"",
            ],
        ),  # key, objname, rawobject
    )
    for key, objname, rawobject in thedata:
        result = modeleditor.removeextensibles(bunchdt, data, commdct, key, objname)
        assert result.obj == rawobject


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_newrawobject,"def test_newrawobject():
    """"""py.test for newrawobject""""""
    thedata = (
        (
            ""zone"",
            [
                ""ZONE"",
                """",
                0.0,
                0.0,
                0.0,
                0.0,
                1,
                1,
                ""autocalculate"",
                ""autocalculate"",
                ""autocalculate"",
                """",
                """",
                ""Yes"",
            ],
        ),  # key, obj
    )
    for key, obj in thedata:
        result = modeleditor.newrawobject(data, commdct, key)
        assert result == obj


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_obj2bunch,"def test_obj2bunch():
    """"""py.test for obj2bunch""""""
    thedata = (
        (
            [
                ""ZONE"",
                """",
                ""0"",
                ""0"",
                ""0"",
                ""0"",
                ""1"",
                ""1"",
                ""autocalculate"",
                ""autocalculate"",
                ""autocalculate"",
                """",
                """",
                ""Yes"",
            ]
        ),  # obj
    )
    for obj in thedata:
        key_i = data.dtls.index(obj[0].upper())
        abunch = idfreader.makeabunch(commdct, obj, key_i)
        result = modeleditor.obj2bunch(data, commdct, obj)
        assert result.__repr__() == abunch.__repr__()


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_modeleditor1.py,,test_iddofobject,"def test_iddofobject():
    """"""py.test of iddofobject""""""
    thedata = (
        (
            ""VERSION"",
            [
                {
                    ""idfobj"": ""Version"",
                    ""group"": ""Simulation Parameters"",
                    ""format"": [""singleLine""],
                    ""unique-object"": [""""],
                },
                {
                    ""default"": [""7.0""],
                    ""field"": [""Version Identifier""],
                    ""required-field"": [""""],
                },
            ],
        ),  # key, itsidd
    )
    for key, itsidd in thedata:
        result = modeleditor.iddofobject(data, commdct, key)
        try:
            result[0].pop(""memo"")  # memo is new in version 8.0.0
        except KeyError:
            pass
        assert result == itsidd
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_parse_error.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_parse_error.py,,test_capture_stderr,"def test_capture_stderr():
    tmp_out = StringIO()
    sys.stderr = tmp_out
    sys.stderr.write(""I am in stderr"")
    msg = parse_error(tmp_out, ""C:/notafile"")
    assert ""<File not found>"" in msg
    assert ""I am in stderr"" in msg
    sys.stderr = sys.__stderr__


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_parse_error.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_parse_error.py,,test_capture_real_error,"def test_capture_real_error(test_idf):
    test_idf.newidfobject(
        ""HVACTemplate:Thermostat"",
        Name=""thermostat VRF"",
        Heating_Setpoint_Schedule_Name=15,
        Constant_Cooling_Setpoint=25,
    )
    rundir = ""test_capture_real_error""
    os.mkdir(rundir)
    try:
        test_idf.run(output_directory=rundir)
    except EnergyPlusRunError as e:
        assert ""invalid Heating Setpoint Temperature Schedule"" in str(e)
    finally:
        shutil.rmtree(rundir)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_table2matrix,"def test_table2matrix():
    """"""py.test for table2matrix""""""
    thedata = (
        (
            """"""<table border=""1"" cellspacing=""0"" cellpadding=""4"">
                <tr>
                    <td>1</td>
                    <td>2</td>
                </tr>
                <tr>
                    <td>3</td>
                    <td>4</td>
                </tr>
            </table>"""""",
            [[""1"", ""2""], [""3"", ""4""]],
        ),  # tabletxt, rows
    )
    for tabletxt, rows in thedata:
        soup = BeautifulSoup(tabletxt, ""lxml"")
        table = soup.find(""table"")
        result = readhtml.table2matrix(table)
        assert result == rows


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_table2val_matrix,"def test_table2val_matrix():
    """"""py.test for table2val_matrix""""""
    thedata = (
        (
            """"""<table border=""1"" cellspacing=""0"" cellpadding=""4"">
            <tr>
                <td>b</td>
                <td>2</td>
            </tr>
            <tr>
                <td>3</td>
                <td>4</td>
            </tr>
            </table>"""""",
            [[""b"", 2], [3, 4]],
        ),  # tabletxt, rows
        # the following test data has a <br> in the <td></td>
        # it will test if tdbr2EOL works correctly
        (
            """"""<table border=""1"" cellspacing=""0"" cellpadding=""4"">
            <tr>
                <td>b <br> b</td>
                <td>2</td>
            </tr>
            <tr>
                <td>3</td>
                <td>4</td>
            </tr>
            </table>"""""",
            [[""b \n b"", 2], [3, 4]],
        ),  # tabletxt, rows
    )
    for tabletxt, rows in thedata:
        soup = BeautifulSoup(tabletxt, ""lxml"")
        table = soup.find(""table"")
        result = readhtml.table2val_matrix(table)
        assert result == rows


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_gettables,"def test_gettables():
    """"""py.test for gettables""""""
    thedata = (
        (
            [
                (""Site and Source Energy"", [[""a"", ""2""], [""3"", ""4""]]),
                (""Site to Source Energy Conversion Factors"", [[""b"", ""6""], [""7"", ""8""]]),
                (""Custom Monthly Report"", [[""c"", ""16""], [""17"", ""18""]]),
                (""Custom Monthly Report"", [[""d"", ""26""], [""27"", ""28""]]),
            ],
            False,
        ),  # titlerows, tofloat
        (
            [
                (""Site and Source Energy"", [[""a"", 2], [3, 4]]),
                (""Site to Source Energy Conversion Factors"", [[""b"", 6], [7, 8]]),
                (""Custom Monthly Report"", [[""c"", 16], [17, 18]]),
                (""Custom Monthly Report"", [[""d"", 26], [27, 28]]),
            ],
            True,
        ),  # titlerows, tofloat
    )
    for titlerows, tofloat in thedata:
        result = readhtml.titletable(SAMPLE_HTML, tofloat=tofloat)
        for (title1, rows1), (title2, rows2) in zip(result, titlerows):
            assert title1 == title2
            assert rows1 == rows2
        assert result == titlerows


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_has_name,"def test_has_name():
    """"""py.test for has_name""""""
    soup = BeautifulSoup(SAMPLE_HTML, ""lxml"")
    # soup.p = <p><a href=""#toc"" style=""float: right"">Table of Contents</a></p>
    assert readhtml._has_name(soup.p) is True
    # soup.b = <b>EnergyPlus-Windows-OMP-32 7.2.0.006, YMD=2013.01.28 16:38</b>
    assert readhtml._has_name(soup.b) is True
    # soup.p.contents[0] = <a href=""#toc"" style=""float: right"">Table of Contents</a>
    assert readhtml._has_name(soup.p.contents[0]) is True
    # soup.b.contents[0] = u'EnergyPlus-Windows-OMP-32 7.2.0.006, YMD=2013.01.28 16:38'
    assert readhtml._has_name(soup.b.contents[0]) is False


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_lines_table,"def test_lines_table():
    """"""py.test for lines_table""""""
    # soup = BeautifulSoup(SAMPLE_HTML)
    result = readhtml.lines_table(SAMPLE_HTML, False)
    assert result == [
        [
            [
                ""Table of Contents"",
                ""Report: Annual Building Utility Performance Summary"",
                ""For: Entire Facility"",
                ""Timestamp: 2014-01-13\n    16:47:19"",
                ""Values gathered over      8760.00 hours"",
                ""Site and Source Energy"",
            ],
            [[""a"", ""2""], [""3"", ""4""]],
        ],
        [[""Site to Source Energy Conversion Factors""], [[""b"", ""6""], [""7"", ""8""]]],
        [
            [
                ""Report: COMPONENTS OF PEAK ELECTRICAL DEMAND"",
                ""For: Meter"",
                ""Timestamp: 2014-01-13\n    16:47:19"",
                ""Custom Monthly Report"",
            ],
            [[""c"", ""16""], [""17"", ""18""]],
        ],
        [
            [
                ""Report: COMPONENTS OF PEAK NET ELECTRICAL DEMAND"",
                ""For: Meter"",
                ""Timestamp: 2014-01-13\n    16:47:19"",
                ""Custom Monthly Report"",
            ],
            [[""d"", ""26""], [""27"", ""28""]],
        ],
    ]


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_readhtml.py,,test_make_ntgrid,"def test_make_ntgrid():
    """"""py.test make_ntgrid""""""
    grid = [
        ["""", ""a b"", ""b c"", ""c d""],
        [""x y"", 1, 2, 3],
        [""y z"", 4, 5, 6],
        [""z z"", 7, 8, 9],
    ]
    result = readhtml._make_ntgrid(grid)
    ntcol = collections.namedtuple(""ntcol"", ""x_y y_z z_z"")
    ntrow = collections.namedtuple(""ntrow"", ""a_b b_c c_d"")
    assert result == ntcol(
        x_y=ntrow(a_b=1, b_c=2, c_d=3),
        y_z=ntrow(a_b=4, b_c=5, c_d=6),
        z_z=ntrow(a_b=7, b_c=8, c_d=9),
    )
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_reproduce_bugs.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_reproduce_bugs.py,,test_reproduce_run_issue,"@pytest.mark.xfail
def test_reproduce_run_issue():
    """"""This is for use as a debugging tool.

    Add the files used in the run as reported/provided by a user.
    Make any additional changes required for reproducing/diagnosing the issue.
    """"""
    # update the following four lines if necessary
    ep_version = ""8-9-0""
    idffile = ""V8_9/smallfile.idf""
    iddfile = ""Energy+V8_9_0.idd""
    epwfile = ""USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.epw""

    _, eplus_home = paths_from_version(ep_version)
    idfname = os.path.join(IDF_FILES, idffile)
    iddfile = os.path.join(IDD_FILES, iddfile)
    epwfile = os.path.join(eplus_home, ""WeatherData"", epwfile)
    modeleditor.IDF.setiddname(iddfile, testing=True)
    idf = IDF(idfname, epwfile)
    # make any changes to the IDF here
    try:
        # Add any additional `run` kwargs here
        # `ep_version` kwarg is required due to buggy test isolation
        idf.run(output_directory=""test_dir"", ep_version=ep_version)
        # Add any tests for expected/unexpected outputs here
    except Exception:
        # Add any tests for expected/unexpected exceptions here
        raise
    finally:
        shutil.rmtree(""test_dir"", ignore_errors=True)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_version_reader,"def test_version_reader():
    """"""Test that get the expected idd_version when reading an IDF/IDD.
    """"""
    # We need to reload modeleditor since the IDF ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_thisdir_exists,"@pytest.mark.skipif(
    not do_integration_tests(), reason=""$EPPY_INTEGRATION env var not set""
)
class TestEnvironment(object):

    """"""
    Test that the environment has been correctly set up with EnergyPlus
    in the default location.

    """"""

    def test_thisdir_exists(self):
        """"""Make sure we are starting from the correct path.
        """"""
        assert os.path.isdir(THIS_DIR)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_iddfiles_exists,"def test_iddfiles_exists(self):
        """"""Test the IDD files are where we expect them.
        """"""
        assert os.path.isdir(IDD_FILES)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_idffiles_exists,"def test_idffiles_exists(self):
        """"""Test the test IDF files are where we expect them.
        """"""
        assert os.path.isdir(IDF_FILES)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_epw_exists,"def test_epw_exists(self):
        """"""Test the test EPW file is where we expect it to be.
        """"""
        f = os.path.join(eplus_weather, TEST_EPW)
        assert os.path.isfile(f)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_idf_exists,"def test_idf_exists(self):
        """"""Test the test IDF file is where we expect it to be.
        """"""
        f = os.path.join(IDF_FILES, TEST_IDF)
        assert os.path.isfile(f)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_idd_exists,"def test_idd_exists(self):
        """"""Test the test IDD file is where we expect it to be.
        """"""
        f = os.path.join(IDD_FILES, TEST_IDD)
        assert os.path.isfile(f)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_old_idd_exists,"def test_old_idd_exists(self):
        """"""Test the test old IDD file is where we expect it to be.
        """"""
        f = os.path.join(IDD_FILES, TEST_OLD_IDD)
        assert os.path.isfile(f)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_abs_paths,"def test_run_abs_paths(self):
        """"""
        Test that running works with absolute paths.
        Fails if no results are produced.

        """"""
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        epw = os.path.join(eplus_weather, TEST_EPW)
        run(fname1, epw, output_directory=""test_results"", ep_version=VERSION)
        assert len(os.listdir(""test_results"")) > 0
        for f in os.listdir(""test_results""):
            assert os.path.isfile(os.path.join(""test_results"", f))

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_weather_name_only,"def test_run_weather_name_only(self):
        """"""
        Test that running works with the name of a weather file that is
        in the Weather subdirectory of the EnergyPlus install directory.
        Fails if no results are produced.

        """"""
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        run(fname1, TEST_EPW, output_directory=""test_results"", ep_version=VERSION)
        assert len(os.listdir(""test_results"")) > 0
        for f in os.listdir(""test_results""):
            assert os.path.isfile(os.path.join(""test_results"", f))

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_missing_file_raises_error,"def test_run_missing_file_raises_error(self, capfd):
        """"""
        Test that a missing file produces the expected warning to std
        out.
        Fails if error message is not as expected.

        """"""
        fname1 = os.path.join(IDF_FILES, ""XXXXXXX_fake_file.idf"")
        with pytest.raises(EnergyPlusRunError):
            run(fname1, TEST_EPW, output_directory=""test_results"", ep_version=VERSION)
            out, _err = capfd.readouterr()
            assert ""ERROR: Could not find input data file:"" in out


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run,"def test_run(self, test_idf):
        """"""
        End to end test of idf.run function.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_readvars,"def test_run_readvars(self, test_idf):
        """"""
        End to end test of idf.run function with readvars set True.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(readvars=True, output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.rvaudit"", ""eplusout.csv""])
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_annual,"def test_run_annual(self, test_idf):
        """"""
        End to end test of idf.run function with annual set True.
        Fails on incorrect size of CSV output, severe errors or
        unexpected/missing output files.

        """"""
        test_idf.idfobjects[""RUNPERIOD""][0].End_Month = 1
        test_idf.run(annual=True, readvars=True, output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.rvaudit"", ""eplusout.csv""])
        assert set(files) == set(self.expected_files)
        assert self.num_rows_in_csv() == 35041  # 24 * 365 * 4 + 1 header row

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_output_directory,"def test_run_output_directory(self, test_idf):
        """"""
        End to end test of idf.run function with a specific output dir set.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_directory=""other_run_outputs"")
        assert not has_severe_errors(""other_run_outputs"")
        files = os.listdir(""other_run_outputs"")
        self.expected_files.extend([])
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_design_day,"def test_run_design_day(self, test_idf):
        """"""
        End to end test of idf.run function with design_day flag set True.
        Fails on incorrect size of CSV output, severe errors or
        unexpected/missing output files.

        """"""
        test_idf.run(design_day=True, readvars=True, output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.rvaudit"", ""eplusout.csv""])
        assert set(files) == set(self.expected_files)
        assert self.num_rows_in_csv() == 193  # 24 * 8 + 1 header row

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_epmacro,"def test_run_epmacro(self, test_idf):
        """"""
        End to end test of idf.run function with epmacro flag set True.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(epmacro=True, output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.epmdet"", ""eplusout.epmidf""])
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_expandobjects,"def test_run_expandobjects(self, test_idf):
        """"""
        End to end test of idf.run function with expandobjects flag set to
        True.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.newidfobject(
            ""HVACTEMPLATE:THERMOSTAT"",
            Name=""TestThermostat"",
            Cooling_Setpoint_Schedule_Name="""",
            Heating_Setpoint_Schedule_Name="""",
            Constant_Cooling_Setpoint=25,
            Constant_Heating_Setpoint=21,
        )
        test_idf.run(expandobjects=True, output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.expidf""])
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_expandobjects_no_flag,"def test_run_expandobjects_no_flag(self, test_idf):
        """"""
        End to end test of idf.run function with expandobjects flag unset.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.newidfobject(
            ""HVACTEMPLATE:THERMOSTAT"",
            Name=""TestThermostat"",
            Cooling_Setpoint_Schedule_Name="""",
            Heating_Setpoint_Schedule_Name="""",
            Constant_Cooling_Setpoint=25,
            Constant_Heating_Setpoint=21,
        )
        test_idf.run(output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([""eplusout.expidf""])
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_output_prefix,"def test_run_output_prefix(self, test_idf):
        """"""
        End to end test of idf.run function with output prefix set.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_prefix=""test"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        prefixed_files = [f.replace(""eplus"", ""test"") for f in self.expected_files]
        assert set(files) == set(prefixed_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_output_suffix_L,"def test_run_output_suffix_L(self, test_idf):
        """"""
        End to end test of idf.run function with output suffix set.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_suffix=""L"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_output_suffix_C,"def test_run_output_suffix_C(self, test_idf):
        """"""
        End to end test of idf.run function with output suffix set.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_suffix=""C"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        assert set(files) == set(self.expected_files_suffix_C)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_output_suffix_D,"def test_run_output_suffix_D(self, test_idf):
        """"""
        End to end test of idf.run function with output suffix set.
        Fails on severe errors or unexpected/missing output files.

        """"""
        test_idf.run(output_suffix=""D"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        assert set(files) == set(self.expected_files_suffix_D)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_run_IDD,"@pytest.mark.skipif(
        versiontuple(VERSION) >= (8, 9, 0),
        reason=""Only compiled IDD is used from v8.9.0"",
    )
    def test_run_IDD(self, test_idf):
        """"""
        End to end test of idf.run function with a different IDD set.
        We use an old IDD here since it throws an error we can see. Real uses
        of this option would include using an IDD with extra fields added
        extensible fields to allow larger objects.
        Fails if the expected IDD version is not listed in the error file.

        """"""
        other_idd = os.path.join(IDD_FILES, TEST_OLD_IDD)
        test_idf.run(idd=other_idd, output_directory=""run_outputs"")
        with open(""run_outputs/eplusout.err"", ""r"") as errors:
            assert ""IDD_Version 8.1.0.009"" in errors.readline()

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_version,"def test_version(self, capfd, test_idf):
        """"""
        End to end test of idf.run function with the version flag set True.
        Fails if the expected EnergyPlus version number is not returned.

        """"""
        test_idf.run(version=True)
        out, _err = capfd.readouterr()

        expected_version = VERSION.replace(""-"", ""."")
        version_string = ""EnergyPlus, Version {}"".format(expected_version)

        assert out.strip().startswith(version_string)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_help,"def test_help(self, capfd, test_idf):
        """"""
        Test of calling the `help` built-in function on an IDF object.
        Fails if the expected help output is not returned.

        """"""
        help(test_idf.run)
        out, _err = capfd.readouterr()
        expected = ""Help on method run in module eppy.modeleditor:""

        assert out.strip().startswith(expected)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_verbose,"def test_verbose(self, capfd, test_idf):
        """"""
        End to end test of idf.run function with the version flag set True.
        Fails on severe errors or unexpected/missing output files.
        Fails if no output received from EnergyPlus.

        """"""
        test_idf.run(verbose=""v"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([])
        assert set(files) == set(self.expected_files)
        out, _err = capfd.readouterr()
        assert len(out) > 0

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_quiet,"def test_quiet(self, capfd, test_idf):
        """"""
        End to end test of idf.run function with the version flag set True.
        Fails on severe errors or unexpected/missing output files.
        Fails if output received from EnergyPlus.

        """"""
        test_idf.run(verbose=""q"", output_directory=""run_outputs"")
        assert not has_severe_errors()
        files = os.listdir(""run_outputs"")
        self.expected_files.extend([])
        assert set(files) == set(self.expected_files)
        out, _err = capfd.readouterr()
        assert len(out) == 0

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_reset_cwd_on_failure,"def test_reset_cwd_on_failure(self, capfd, test_idf):
        cwd = os.getcwd()
        test_idf.idfobjects[""RUNPERIOD""][0].Begin_Month = ""Spamuary""
        with pytest.raises(EnergyPlusRunError):
            test_idf.run(output_directory=""run_outputs"")
        out, _err = capfd.readouterr()
        assert ""FATAL"" in out
        assert os.getcwd() == cwd

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_exception_message,"def test_exception_message(self, test_idf):
        test_idf.newidfobject(""HVACTemplate:Thermostat"", Name=""Thermostat"")
        with pytest.raises(EnergyPlusRunError) as exc_info:
            test_idf.run(output_directory=""run_outputs"")
        assert ""ExpandObjects program"" in str(exc_info.value)


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_sequential_run,"def test_sequential_run(self):
        """"""
        Test that we can run a sequence of runs using the signature:
            run([idf_path, epw], kwargs)
        Fails if expected output files are not in the expected output
        directories.

        """"""
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        runs = []
        for i in range(2):
            kwargs = {""output_directory"": ""results_%s"" % i, ""ep_version"": VERSION}
            runs.append([[fname1, TEST_EPW], kwargs])
        for r in runs:
            run(*r[0], **r[1])
        for results_dir in glob(""results_*""):
            assert not has_severe_errors(results_dir)
            files = os.listdir(results_dir)
            assert set(files) == set(self.expected_files)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_multiprocess_run,"def test_multiprocess_run(self):
        """"""
        Test that we can run a list of runs in parallel using the signature:
            run([idf_path, epw], kwargs)
        Fails if expected output files are not in the expected output
        directories.

        """"""
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        runs = []
        ep_version = ""-"".join(str(x) for x in modeleditor.IDF.idd_version[:3])
        assert ep_version == VERSION
        for i in range(2):
            kwargs = {""output_directory"": ""results_%s"" % i, ""ep_version"": ep_version}
            runs.append([[fname1, TEST_EPW], kwargs])
        pool = multiprocessing.Pool(2)
        pool.map(multirunner, runs)
        pool.close()

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_multiprocess_run_IDF,"def test_multiprocess_run_IDF(self):
        """"""
        Test that we can run a sequence of runs using the signature:
            runIDFs([[IDF, kwargs],...], num_CPUs)
        Fails if expected output files are not in the expected output
        directories.

        """"""
        iddfile = os.path.join(IDD_FILES, TEST_IDD)
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        modeleditor.IDF.setiddname(open(iddfile, ""r""), testing=True)
        ep_version = ""-"".join(str(x) for x in modeleditor.IDF.idd_version[:3])
        assert ep_version == VERSION
        runs = []
        for i in range(4):
            runs.append(
                [
                    modeleditor.IDF(open(fname1, ""r""), TEST_EPW),
                    {""output_directory"": ""results_%i"" % i, ""ep_version"": ep_version},
                ]
            )
        num_CPUs = 2
        runIDFs(runs, num_CPUs)

        num_CPUs = -1
        runIDFs(runs, num_CPUs)

    ",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_runner.py,,test_multiprocess_run_IDF_from_generator,"def test_multiprocess_run_IDF_from_generator(self):
        """"""
        Test that we can run a sequence passed as a generator of runs using
        the signature:
            runIDFs(([IDF, kwargs],...), num_CPUs)
        Fails if expected output files are not in the expected output
        directories.

        """"""
        iddfile = os.path.join(IDD_FILES, TEST_IDD)
        fname1 = os.path.join(IDF_FILES, TEST_IDF)
        modeleditor.IDF.setiddname(open(iddfile, ""r""), testing=True)
        ep_version = ""-"".join(str(x) for x in modeleditor.IDF.idd_version[:3])
        assert ep_version == VERSION
        runs = (
            (
                modeleditor.IDF(open(fname1, ""r""), TEST_EPW),
                {""output_directory"": ""results_%i"" % i, ""ep_version"": ep_version},
            )
            for i in range(4)
        )
        num_CPUs = 2
        runIDFs(runs, num_CPUs)

        num_CPUs = -1
        runIDFs(runs, num_CPUs)
",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_simpleread.py,,test_idf2txt,"def test_idf2txt():
    """"""py.test for idf2txt""""""
    data = (
        (
            """"""
        VERSION,
            7.3;                      !- Version Identifier

        SIMULATIONCONTROL,
            Yes,                      !- Do Zone Sizing Calculation
            Yes,                      !- Do System Sizing Calculation
            Yes,                      !- Do Plant Sizing Calculation
            No,                       !- Run Simulation for Sizing Periods
            Yes;                      !- Run Simulation for Weather File Run Periods

        BUILDING,
            Empire State Building,    !- Name
            30.0,                     !- North Axis
            City,                     !- Terrain
            0.04,                     !- Loads Convergence Tolerance Value
            0.4,                      !- Temperature Convergence Tolerance Value
            FullExterior,             !- Solar Distribution
            25,                       !- Maximum Number of Warmup Days
            6;                        !- Minimum Number of Warmup Days

        SITE:LOCATION,
            CHICAGO_IL_USA TMY2-94846,    !- Name
            41.78,                    !- Latitude
            -87.75,                   !- Longitude
            -6.0,                     !- Time Zone
            190.0;                    !- Elevation
        """""",
            """""";

BUILDING,
Empire State Building,
30.0,
City,
0.04,
0.4,
FullExterior,
25.0,
6.0;

SIMULATIONCONTROL,
Yes,
Yes,
Yes,
No,
Yes;

SITE:LOCATION,
CHICAGO_IL_USA TMY2-94846,
41.78,
-87.75,
-6.0,
190.0;

VERSION,
7.3;
"""""",
        ),  # intxt, outtxt
    )
    for intxt, outtxt in data:
        result = simpleread.idf2txt(intxt)
        assert result == outtxt


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_walk_hvac.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_walk_hvac.py,,test_nextnode,"def test_nextnode():
    """"""py.test for nextnode""""""
    edges = e1
    nexts = [
        ""Central_Chiller"",
        ""np1"",
        ""np2"",
        ""p_loop_supply_splitter"",
        ""sb1_pipe"",
        ""p_loop_supply_mixer"",
        ""sb4_pipe"",
    ]

    c = ""Central_Chiller""

    n = 0
    i = 0  # counter
    while n == 0:  # endless loop
        assert nexts[i] == c
        i += 1
        nextcs = walk_hvac.nextnode(edges, c)
        if len(nextcs) == 0:
            break
        c = nextcs[0]
    # test links that have no nodes - equipment in spaces
    edges = e2
    connections = (
        (""SPACE2-1 ATU"", ""SPACE2-1""),
        (""SPACE3-1 ATU"", ""SPACE3-1""),
        (""SPACE4-1 ATU"", ""SPACE4-1""),
        (""SPACE5-1 ATU"", ""SPACE5-1""),
        (""SPACE1-1 VAV Reheat"", ""SPACE1-1 ATU""),
        (""SPACE2-1 VAV Reheat"", ""SPACE2-1 ATU""),
        (""SPACE3-1 VAV Reheat"", ""SPACE3-1 ATU""),
        (""SPACE4-1 VAV Reheat"", ""SPACE4-1 ATU""),
        (""SPACE5-1 VAV Reheat"", ""SPACE5-1 ATU""),
    )
    for comp, nextcomp in connections:
        result = walk_hvac.nextnode(edges, comp)
        assert result == [nextcomp]


",False
-1,eppy,https://github.com/santoshphilip/eppy/blob/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_walk_hvac.py,https://raw.githubusercontent.com/santoshphilip/eppy/98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7/eppy/tests/test_walk_hvac.py,,test_prevnode,"def test_prevnode():
    """"""py.test for prevnode""""""
    edges = e1
    prevs = [
        ""sb4_pipe"",
        ""p_loop_supply_mixer"",
        ""sb1_pipe"",
        ""p_loop_supply_splitter"",
        ""np2"",
        ""np1"",
        ""Central_Chiller"",
    ]

    c = ""sb4_pipe""
    i = 0
    n = 0
    while n == 0:
        assert prevs[i] == c
        i += 1
        prevcs = walk_hvac.prevnode(edges, c)
        if len(prevcs) == 0:
            break
        c = prevcs[0]
    # test links that have no nodes - equipment in spaces
    edges = e2
    connections = (
        (""SPACE2-1 ATU"", ""SPACE2-1""),
        (""SPACE3-1 ATU"", ""SPACE3-1""),
        (""SPACE4-1 ATU"", ""SPACE4-1""),
        (""SPACE5-1 ATU"", ""SPACE5-1""),
        (""SPACE1-1 VAV Reheat"", ""SPACE1-1 ATU""),
        (""SPACE2-1 VAV Reheat"", ""SPACE2-1 ATU""),
        (""SPACE3-1 VAV Reheat"", ""SPACE3-1 ATU""),
        (""SPACE4-1 VAV Reheat"", ""SPACE4-1 ATU""),
        (""SPACE5-1 VAV Reheat"", ""SPACE5-1 ATU""),
    )
    for prevcomp, comp in connections:
        result = walk_hvac.prevnode(edges, comp)
        assert result == [prevcomp]
",False
1249,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,CurveTests,test_curve,"def test_curve(self):
        curve = Curve.parse(
            '(fp_curve (pts (xy 0 0) (xy 1 1) (xy 2 2) (xy 3 3)))')
        assert curve.start == (0, 0)
        assert curve.bezier1 == (1, 1)
        assert curve.bezier2 == (2, 2)
        assert curve.end == (3, 3)


",True
1250,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill,"def test_drill(self):
        drill = Drill.parse('(drill 0.8)')
        assert drill.size == 0.8
        assert Drill.parse(drill.to_string()) == drill

    ",True
1251,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill_offset,"def test_drill_offset(self):
        drill = Drill.parse('(drill 0.8 (offset 0.1 0.2))')
        assert drill.size == 0.8 and drill.offset == [0.1, 0.2]
        assert Drill.parse(drill.to_string()) == drill


",True
1252,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,DrillTests,test_drill_oval,"def test_drill_oval(self):
        drill = Drill.parse('(drill oval 0.6 0.8)')
        assert drill.size == [0.6, 0.8]
        assert Drill.parse(drill.to_string()) == drill

    ",True
1253,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,LineTests,test_line,"def test_line(self):
        line = Line.parse('(fp_line (start 0 0) (end 1 1) (layer layer))')
        assert line.start == [0.0, 0.0]
        assert line.end == [1.0, 1.0]
        assert line.layer == 'layer'
        assert Line.parse(line.to_string()) == line


",True
1254,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,ModelTests,test_model,"def test_model(self):
        model_string = (
            '(model path'
            '    (at (xyz 0 0 0))'
            '    (scale (xyz 0 0 0))'
            '    (rotate (xyz 0 0 0)))')
        model = Model.parse(model_string)
        assert model.at == (0, 0, 0)
        assert model.scale == (0, 0, 0)
        assert model.rotate == (0, 0, 0)
        assert Model.parse(model.to_string()) == model


",True
1255,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,ModuleTests,test_module,"def test_module(self):
        module_string = '(module name (layer F.Cu) %s)'
        module = Module.parse(module_string % '')
        assert module.name == 'name'
        assert module.layer == 'F.Cu'
        assert Module.parse(module.to_string()) == module

        pads = ''
        for i in range(2):
            pads += Pad(str(i + 1), drill=Drill(0.8)).to_string()

        module = Module.parse(module_string % pads)
        assert module.pads[0].name == '1'
        assert module.pads[0].drill.size == 0.8
        assert module.pads[1].name == '2'
        assert module.pads[1].drill.size == 0.8
        assert Module.parse(module.to_string()) == module


",True
1256,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,NetTests,test_net_auto_numbering,"def test_net_auto_numbering(self):
        n1, n2, n3 = Net(), Net(), Net()
        assert n1.code == 1
        assert n2.code == 2
        assert n3.code == 3
",True
1257,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad,"def test_pad(self):
        pad = Pad.parse(
            '(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) (layers F.Cu))')
        assert pad.name == '1'
        assert pad.type == 'smd'
        assert pad.shape == 'rect'
        assert pad.at == [0.1, 0.1]
        assert pad.size == [0.2, 0.2]
        assert pad.layers == ['F.Cu']
        assert Pad.parse(pad.to_string()) == pad

    ",True
1258,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad_with_drill,"def test_pad_with_drill(self):
        pad = Pad.parse('(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) '
                        '(layers F.Cu) (drill 0.8))')
        assert pad.drill.size == 0.8
        assert Pad.parse(pad.to_string()) == pad

    ",True
1259,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PadTests,test_pad_with_multiple_layers,"def test_pad_with_multiple_layers(self):
        pad = Pad.parse('(pad 1 smd rect (at 0.1 0.1) (size 0.2 0.2) '
                        '(layers F.Cu B.Cu))')
        assert pad.layers == ['F.Cu', 'B.Cu']
        assert Pad.parse(pad.to_string()) == pad


",True
1260,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,PolygonTests,test_polygon,"def test_polygon(self):
        poly = Polygon.parse('(fp_poly (pts (xy 0 0) (xy 1 0)) (width 0.01))')
        assert poly.pts == [(0, 0), (1, 0)]
        assert poly.width == 0.01
        assert Polygon.parse(poly.to_string()) == poly


",True
1261,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text,"def test_text(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer F.SilkS))')
        assert text.type == 'user'
        assert text.text == 'text'
        assert text.at == [0.0, 0.0]
        assert text.layer == 'F.SilkS'
        assert Text.parse(text.to_string()) == text

    ",True
1262,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_hide,"def test_text_with_hide(self):
        text = Text.parse(
            '(fp_text user text (at 0.0 0.0) (layer F.SilkS) hide)')
        assert text.hide == True
        assert Text.parse(text.to_string()) == text

    ",True
1263,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_justify,"def test_text_with_justify(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer layer) '
                          '(effects (justify mirror)))')
        assert text.justify == 'mirror'
        assert Text.parse(text.to_string()) == text


",True
1264,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_rotation,"def test_text_with_rotation(self):
        text = Text.parse(
            '(fp_text user text (at 0.0 0.0 0.0) (layer F.SilkS))')
        assert text.at == [0.0, 0.0, 0.0]
        assert text.hide == False
        assert Text.parse(text.to_string()) == text

    ",True
1265,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_module.py,TextTests,test_text_with_thickness,"def test_text_with_thickness(self):
        text = Text.parse('(fp_text user text (at 0.0 0.0) (layer F.SilkS) '
                          '(effects (font (size 0.1 0.1) (thickness 0.2))))')
        assert text.size == [0.1, 0.1]
        assert text.thickness == 0.2
        assert Text.parse(text.to_string()) == text

    ",True
1266,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_parse,"def test_parse(self):
        nc_string = ""(net_",True
1267,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_with_multiple_nets,"def test_with_multiple_nets(self):
        nc = NetClass('default')
        nc.nets += ['GND', 'VO']
        nc_str = nc.to_string()
        assert NetClass.parse(nc.to_string()) == nc


",True
1268,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_with_net,"def test_with_net(self):
        nc = NetClass('default')
        nc.nets.append('GND')
        assert NetClass.parse(nc.to_string()) == nc

    ",True
1269,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,NetClassTests,test_without_net,"def test_without_net(self):
        nc = NetClass('default')
        assert NetClass.parse(nc.to_string()) == nc

    ",True
1270,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_comment,"def test_comment(self):
        pcb = Pcb(comment1='hello world', comment2='bye world')
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1271,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_layers,"def test_layers(self):
        pcb = Pcb()
        pcb.layers.append(Layer('B.Cu'))
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.layers.append(Layer('F.Cu'))
        assert Pcb.parse(pcb.to_string()) == pcb
",True
1272,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_minimal_pcb,"def test_minimal_pcb(self):
        pcb_string = open('tests/minimal_pcb.kicad_pcb', 'r').read()
        pcb = Pcb.parse(pcb_string)
        assert pcb.version == 123
        assert pcb.host == ['pcbnew', 'version']
        assert len(pcb.nets) == 4
        assert len(pcb.modules) == 2
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1273,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_num_nets,"def test_num_nets(self):
        pcb = Pcb(num_nets=5)
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.nets.append(Net())
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1274,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_page,"def test_page(self):
        pcb = Pcb()
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.page_type = 'A4'
        assert Pcb.parse(pcb.to_string()) == pcb
        pcb.page_type = [200, 200]
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1275,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,PcbTests,test_single_module,"def test_single_module(self):
        pcb = Pcb()
        pcb.modules.append(Module(name='R'))
        assert Pcb.parse(pcb.to_string()) == pcb

    ",True
1276,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_pcb.py,ZoneTests,test_parse,"def test_parse(self):
        zone_string = '(zone (polygon (pts (xy 0 0) (xy 1 1))))'
        zone = Zone.parse(zone_string)
        assert zone.polygon[0] == (0, 0)
        assert zone.polygon[1] == (1, 1)
        assert Zone.parse(zone.to_string()) == zone


",True
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_unicode,"def test_unicode(self):
        AST.from_schema('sexpr', text)
        ast = AST.parse('(sexpr ü)')
        assert ast.sexpr == 'ü'
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_simple_leaf_tag,"def test_simple_leaf_tag(self):
        AST.from_schema('sexpr', number)
        ast = AST.parse('(sexpr 1)')
        assert ast.sexpr == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_composite_leaf_tag,"def test_composite_leaf_tag(self):
        AST.from_schema('sexpr', number + number)
        ast = AST.parse('(sexpr 1 2)')
        assert ast.sexpr == [1, 2]
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_nested_tags,"def test_nested_tags(self):
        AST.from_schema('sexpr', {'sexpr': number})
        ast = AST.parse('(sexpr (sexpr 1))')
        assert ast.sexpr == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_nested_tags_with_composite_leaf,"def test_nested_tags_with_composite_leaf(self):
        AST.from_schema('sexpr', {'sexpr': number + number})
        ast = AST.parse('(sexpr (sexpr 1 2))')
        assert ast.sexpr == [1, 2]
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_multiple_nested_tags,"def test_multiple_nested_tags(self):
        AST.from_schema('sexpr', {'zero': number, 'one': number})
        ast = AST.parse('(sexpr (zero 0) (one 1))')
        assert ast.zero == 0.0
        assert ast.one == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_tag_with_explicit_parser_attr,"def test_tag_with_explicit_parser_attr(self):
        AST.from_schema('sexpr', {'_parser': number})
        ast = AST.parse('(sexpr 1)')
        assert ast.sexpr == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_tag_with_named_positional,"def test_tag_with_named_positional(self):
        AST.from_schema('sexpr', {
            '0': {
                '_attr': 'zero',
                '_parser': number
            }
        })
        ast = AST.parse('(sexpr 1)')
        assert ast.zero == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_tag_with_multiple_named_positional,"def test_tag_with_multiple_named_positional(self):
        AST.from_schema('sexpr', {
            '0': {
                '_attr': 'zero',
                '_parser': number
            },
            '1': {
                '_attr': 'one',
                '_parser': number
            }
        })
        ast = AST.parse('(sexpr 0 1)')
        assert ast.zero == 0.0
        assert ast.one == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_optional_tag,"def test_optional_tag(self):
        AST.from_schema('sexpr', {
            '0': {
                '_attr': 'zero',
                '_parser': number
            },
            'sexpr': {
                '_parser': number,
                '_optional': True
            }
        })
        ast = AST.parse('(sexpr 1)')
        assert ast.zero == 1.0
        ast = AST.parse('(sexpr 1 (sexpr 2))')
        assert ast.zero == 1.0
        assert ast.sexpr == 2.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_ast,"def test_ast(self):
        AST.from_schema('pad', {
            'drill': {
                '_parser': Drill,
            }
        })
        ast = AST.parse('(pad (drill 0.8))')
        assert isinstance(ast.drill, Drill)
        assert ast.drill.size == 0.8
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_multiple,"def test_multiple(self):
        AST.from_schema('sexpr', {
            'drills': {
                '_parser': Drill,
                '_multiple': True,
            }
        })
        ast = AST.parse('(sexpr (drill 0.8) (drill 0.6))')
        assert ast.drills[0].size == 0.8
        assert ast.drills[1].size == 0.6
        assert AST.parse(ast.to_string()) == ast

        ast = AST.parse('(sexpr (drill 0.8))')
        assert ast.drills.size == 0.8
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_multiple_multiple,"def test_multiple_multiple(self):
        AST.from_schema('sexpr', {
            'drills': {
                '_parser': Drill,
                '_multiple': True,
            },
            'pad': {
                '_parser': number,
            }
        })
        ast = AST.parse('(sexpr (pad 1) (drill 1) (drill 2) (drill 3))')
        assert ast.pad == 1.0
        assert ast.drills[0].size == 1.0
        assert ast.drills[1].size == 2.0
        assert ast.drills[2].size == 3.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_positional_sexpr,"def test_positional_sexpr(self):
        AST.from_schema('sexpr', {
            '0': {
                '_tag': 'start',
                '_parser': number + number,
            },
            '1': {
                '_tag': 'end',
                '_parser': number + number
            }
        })
        ast = AST.parse('(sexpr (start 1 1) (end 2 2))')
        assert ast.start == [1.0, 1.0]
        assert ast.end == [2.0, 2.0]
        assert AST.parse(ast.to_string()) == ast

        with raises(ParseException):
            AST.parse('(sexpr (end 2 2) (start 1 1))')

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_tag_and_attr_schema,"def test_tag_and_attr_schema(self):
        AST.from_schema('sexpr', {
            '0': {
                '_tag': 'sexpr2',
                '_attr': 'attr',
                '_parser': number
            }
        })
        ast = AST.parse('(sexpr (sexpr2 1))')
        assert ast.attr == 1.0
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_positional_ast,"def test_positional_ast(self):
        AST.from_schema('sexpr', {
            '0': {
                '_attr': 'drill',
                '_parser': Drill,
                '_printer': Drill.to_string
            }
        })
        ast = AST.parse('(sexpr (drill 0.8))')
        assert ast.drill.size == 0.8
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_positional_multiple_ast,"def test_positional_multiple_ast(self):
        AST.from_schema('sexpr', {
            '0': {
                '_attr': 'drills',
                '_parser': Drill,
                '_printer': Drill.to_string,
                '_multiple': True
            }
        })
        ast = AST.parse('(sexpr (drill 0.6) (drill 0.8))')
        assert len(ast.drills) == 2
        assert AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_nested_with_same_name,"def test_nested_with_same_name(self):
        AST.from_schema('sexpr', {
            'a': {
                'b1': {
                    'c': {
                        '_parser': number,
                        '_attr': 'b1'
                    },
                },
                'b2': {
                    'c': {
                        '_parser': number,
                        '_attr': 'b2'
                    }
                }
            }
        })
        ast = AST.parse('(sexpr (a (b1 (c 1)) (b2 (c 2))))')
        assert ast.b1 == 1
        assert ast.b2 == 2
        AST.parse(ast.to_string()) == ast

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_nested_with_attr,"def test_nested_with_attr(self):
        AST.from_schema('sexpr', {
            'a': {
                'b': {
                    'c': {
                        '_parser': number,
                        '_attr': 'd'
                    }
                }
            }
        })
        ast = AST.parse('(sexpr (a (b (c 1))))')
        assert ast.d == 1

    ",False
-1,pykicad,https://github.com/dvc94ch/pykicad/blob/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,https://raw.githubusercontent.com/dvc94ch/pykicad/cdebcaeb4ab6c8903ebecfd0748f826ea406923f/tests/test_sexpr.py,,test_positional_nested,"def test_positional_nested(self):
        AST.from_schema('sexpr', {
            '0': {
                'a': number
            },
            '1': {
                'b': number
            }
        })
        ast = AST.parse('(sexpr (a 1) (b 2))')
        assert ast.a == 1
        assert ast.b == 2
",False
1279,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_simple.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/pubsub.py,SimplePubSubTest,test_event_serialization,"def test_event_serialization(self):
        called = threading.Event()

        ",True
1280,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_simple.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/pubsub.py,SimplePubSubTest,test_topic,"def test_topic(self):
        invocations = queue.Queue()

        ",True
1281,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_collection_types,"def test_queue_collection_types(self):
        q = pymq.queue('test_queue')

        q.put(('a', 1))
        v = q.get()
        self.assertIsInstance(v, tuple)
        self.assertIsInstance(v[0], str)
        self.assertIsInstance(v[1], int)

        q.put([1, 'v'])
        v = q.get()
        self.assertIsInstance(v, list)
        self.assertIsInstance(v[0], int)
        self.assertIsInstance(v[1], str)

        q.put({'a': 1, 'b': 'c'})
        v = q.get()
        self.assertIsInstance(v, dict)
        self.assertIsInstance(v['a'], int)
        self.assertIsInstance(v['b'], str)

    ",True
1282,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_complex_types,"def test_queue_complex_types(self):
        q = pymq.queue('test_queue')

        q.put(EventWithPayload(Payload('foo', 42)))
        v = q.get()
        self.assertIsInstance(v, EventWithPayload)
        self.assertIsInstance(v.payload, Payload)
        self.assertIsInstance(v.payload.name, str)
        self.assertIsInstance(v.payload.value, int)
",True
1283,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_get_blocking,"def test_queue_get_blocking(self):
        q = pymq.queue('test_queue')
        event = threading.Event()

        ",True
1284,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_get_nowait_timeout,"def test_queue_get_nowait_timeout(self):
        q = pymq.queue('test_queue')
        then = time.time()
        self.assertRaises(pymq.Empty, q.get_nowait)
        diff = time.time() - then
        self.assertAlmostEqual(0, diff, delta=0.3)

    @timeout_decorator.timeout(2)
    ",True
1285,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_primitive_types,"def test_queue_primitive_types(self):
        q = pymq.queue('test_queue')

        q.put('abc')
        self.assertIsInstance(q.get(), str)

        q.put(1)
        self.assertIsInstance(q.get(), int)

        q.put(1.1)
        self.assertIsInstance(q.get(), float)

    ",True
1286,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/queue.py,IpcQueueTest,test_queue_put_get,"def test_queue_put_get(self):
        q = pymq.queue('test_queue')
        q.put('elem1')
        q.put('elem2')

        self.assertEqual('elem1', q.get())
        self.assertEqual('elem2', q.get())

    @timeout_decorator.timeout(2)
    ",True
1287,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_echo_command_response_function,"def test_echo_command_response_function(self):
        pymq.expose(echo_command_response_function, channel='echo_command_response_function')

        stub = pymq.stub('echo_command_response_function')
        result = stub(EchoCommand('unittest'))

        self.assertIsInstance(result, EchoResponse)
        self.assertEqual(result.result, 'Hello unittest!')

    @timeout_decorator.timeout(5)
    ",True
1288,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_error_function,"def test_error_function(self):
        pymq.expose(error_function, channel='error_function')

        stub = pymq.stub('error_function')
        try:
            result = stub()
            self.fail('Should have thrown exception, but received result %s' % result)
        except RemoteInvocationError as e:
            self.assertIn('ValueError', str(e))
",True
1289,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_remote_decorator,"def test_remote_decorator(self):
        @pymq.remote
        ",True
1290,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_simple_function,"def test_simple_function(self):
        pymq.expose(simple_remote_function, channel='simple_remote_function')

        stub = pymq.stub('simple_remote_function')
        result = stub('unittest')
        self.assertEqual('Hello unittest!', result)

    @timeout_decorator.timeout(2)
    ",True
1291,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_simple_list_param_function,"def test_simple_list_param_function(self):
        pymq.expose(simple_list_param_function, channel='simple_list_param_function')

        stub = pymq.stub('simple_list_param_function')
        result = stub([2, 3, 4])
        self.assertEqual(9, result)

    @timeout_decorator.timeout(2)
    ",True
1292,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_simple_multiple_param_default_function,"def test_simple_multiple_param_default_function(self):
        pymq.expose(simple_multiple_param_default_function, channel='simple_multiple_param_default_function')

        stub = pymq.stub('simple_multiple_param_default_function')
        result = stub(2)
        self.assertEqual(6, result)

    @timeout_decorator.timeout(2)
    ",True
1293,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_simple_multiple_param_function,"def test_simple_multiple_param_function(self):
        pymq.expose(simple_multiple_param_function, channel='simple_multiple_param_function')

        stub = pymq.stub('simple_multiple_param_function')
        result = stub(2, 3)
        self.assertEqual(6, result)

    @timeout_decorator.timeout(2)
    ",True
1294,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_stateful_rpc,"def test_stateful_rpc(self):
        obj = RpcHolder()
        pymq.expose(obj.echo)

        stub = pymq.stub(RpcHolder.echo)
        result = stub(EchoCommand('unittest'))
        self.assertIsInstance(result, EchoResponse)
        self.assertEqual('Hello unittest!', result.result)

    @timeout_decorator.timeout(2)
    ",True
1295,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_timeout,"def test_timeout(self):
        pymq.expose(delaying_function, channel='delaying_function')
        stub = pymq.stub('delaying_function', timeout=1)
        self.assertRaises(RemoteInvocationError, stub)

    @timeout_decorator.timeout(2)
    ",True
1296,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,IpcRpcTest,test_void_function_error,"def test_void_function_error(self):
        pymq.expose(void_function, channel='void_function')

        stub = pymq.stub('void_function')
        self.assertRaises(RemoteInvocationError, stub, 1, 2, 3)

    @timeout_decorator.timeout(2)
    ",True
1297,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_simple.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/base/rpc.py,SimpleRpcTest,test_stateful_rpc,"def test_stateful_rpc(self):
        obj = RpcHolder()
        pymq.expose(obj.echo)

        stub = pymq.stub(RpcHolder.echo)
        result = stub(EchoCommand('unittest'))
        self.assertIsInstance(result, EchoResponse)
        self.assertEqual('Hello unittest!', result.result)

    @timeout_decorator.timeout(2)
    ",True
1298,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,RedisRpcTest,test_channel_expire,"def test_channel_expire(self):
        self.bus.rpc_channel_expire = 1
        called = threading.Event()

        ",True
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_ipc.py,,test_publish_pattern,"def test_publish_pattern(self):
        pass


del IpcEventBusTestBase

",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,,test_subscribe_before_init,"def test_subscribe_before_init(self):
        invocations = queue.Queue()

        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,,test_unsubscribe_before_init,"def test_unsubscribe_before_init(self):
        invocations = queue.Queue()

        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,,test_add_listener_creates_subscription_correctly,"def test_add_listener_creates_subscription_correctly(self):
        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_redis.py,,test_remove_listener_also_removes_redis_subscription,"def test_remove_listener_also_removes_redis_subscription(self):
        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_simple.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_provider_simple.py,,test_publish_pattern,"def test_publish_pattern(self):
        # TODO: pattern matching not implemented for simple eventbus
        pass


",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_queue_on_non_started_bus,"def test_queue_on_non_started_bus(self):
        self.assertRaises(ValueError, pymq.queue, 'foo')

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_stub_on_non_started_bus,"def test_stub_on_non_started_bus(self):
        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_start_without_init,"def test_start_without_init(self):
        self.assertRaises(ValueError, pymq.core.start)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_lazy_topic_publish,"def test_lazy_topic_publish(self):
        topic = pymq.topic('my_topic')

        self.assertEqual('my_topic', topic.name)
        self.assertFalse(topic.is_pattern)

        self.assertIsNone(topic.publish('does_nothing'))

        bus: MockedEventBus = pymq.init(MockedEventBus)

        try:
            topic.publish('some_event')

            self.assertEqual(1, len(bus.published_events), 'expected one event to be published')
            self.assertIn(('some_event', 'my_topic'), bus.published_events)
        finally:
            pymq.shutdown()

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_lazy_topic_subscribe,"def test_lazy_topic_subscribe(self):
        topic = pymq.topic('my_topic')

        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_pymq.py,,test_late_expose,"def test_late_expose(self):
        ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_to_dict,"def test_to_dict(self):
        doc = deep_to_dict(self.root)

        expected = {'some_int': 42, 'some_str': 'jaffa kree', 'simple_dict': {'a': 1, 'b': 2},
                    'complex_dict': {1: {'name': 'a', 'value': 1}, 2: {'name': 'b', 'value': 2}},
                    'complex_list': [{'nested_list': [{'name': 'a', 'value': 1}, {'name': 'b', 'value': 2}],
                                      'nested_tuple': (1, {'name': 'a', 'value': 1})},
                                     {'nested_list': [{'name': 'b', 'value': 2}, {'name': 'c', 'value': 3}],
                                      'nested_tuple': (2, {'name': 'b', 'value': 2})}]}

        self.assertEqual(expected, doc)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_to_dict_any,"def test_to_dict_any(self):
        t_int = ClassWithAny(1)
        self.assertEqual({'arg': 1}, deep_to_dict(t_int))

        t_dict = ClassWithAny({'a': 1, 'b': 2})
        self.assertEqual({'arg': {'a': 1, 'b': 2}}, deep_to_dict(t_dict))

        self.assertEqual({'arg': {'a': 1, 'b': 2}}, deep_to_dict(t_dict))

        t_nested = ClassWithAny(SimpleNested('foo', 42))
        self.assertEqual({'arg': {'name': 'foo', 'value': 42}}, deep_to_dict(t_nested))

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict_any,"def test_from_dict_any(self):
        t_int = deep_from_dict({'arg': 1}, ClassWithAny)
        self.assertEqual(1, t_int.arg)

        t_dict = deep_from_dict({'arg': {'a': 1, 'b': 2}}, ClassWithAny)
        self.assertEqual({'a': 1, 'b': 2}, t_dict.arg)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict_base_cases,"def test_from_dict_base_cases(self):
        self.assertEqual(1, deep_from_dict(1, int))
        self.assertEqual(1, deep_from_dict('1', int))
        self.assertEqual('a', deep_from_dict('a', str))
        self.assertEqual((1, 2), deep_from_dict((1, 2), tuple))
        self.assertEqual([1, 2], deep_from_dict([1, 2], list))
        self.assertEqual((1, 2), deep_from_dict([1, 2], tuple))
        self.assertEqual({1, 2}, deep_from_dict([1, 2], set))
        self.assertEqual({'1', '2'}, deep_from_dict(['1', '2'], set))

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict_generics,"def test_from_dict_generics(self):
        self.assertEqual({1, 2}, deep_from_dict(['1', '2'], Set[int]))
        self.assertEqual({1, 2}, deep_from_dict(['1', '2', '1'], Set[int]))
        self.assertEqual([(1, 'a'), (2, 'b')], deep_from_dict([['1', 'a'], ['2', 'b']], List[Tuple[int, str]]))

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict_simple_type,"def test_from_dict_simple_type(self):
        doc = {'name': 'a', 'value': '1'}
        obj = deep_from_dict(doc, SimpleNested)
        self.assertIsInstance(obj, SimpleNested)
        self.assertEqual('a', obj.name)
        self.assertEqual(1, obj.value)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict_constructor,"def test_from_dict_constructor(self):
        doc = {
            'req_a': 'a',
            'req_b': 1,
            'opt_c': True,
        }
        obj = deep_from_dict(doc, DataClass)
        self.assertIsInstance(obj, DataClass)
        self.assertEqual('a', obj.req_a)
        self.assertEqual(1, obj.req_b)
        self.assertEqual(True, obj.opt_c)
        self.assertIsNone(obj.opt_d)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_from_dict,"def test_from_dict(self):
        doc = {'some_int': 42, 'some_str': 'jaffa kree', 'simple_dict': {'a': 1, 'b': 2},
               'complex_dict': {1: {'name': 'a', 'value': 1}, 2: {'name': 'b', 'value': 2}},
               'complex_list': [{'nested_list': [{'name': 'a', 'value': 1}, {'name': 'b', 'value': 2}],
                                 'nested_tuple': (1, {'name': 'a', 'value': 1})},
                                {'nested_list': [{'name': 'b', 'value': 2}, {'name': 'c', 'value': 3}],
                                 'nested_tuple': (2, {'name': 'b', 'value': 2})}]}

        root: RootClass = deep_from_dict(doc, RootClass)

        self.assertEqualsRoot(root)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_encoding,"def test_encoding(self):
        doc = json.dumps(self.root, cls=DeepDictEncoder)
        expected = '{""some_int"": 42, ""some_str"": ""jaffa kree"", ""simple_dict"": {""a"": 1, ""b"": 2}, ""complex_dict"": {""1"": {""name"": ""a"", ""value"": 1}, ""2"": {""name"": ""b"", ""value"": 2}}, ""complex_list"": [{""nested_list"": [{""name"": ""a"", ""value"": 1}, {""name"": ""b"", ""value"": 2}], ""nested_tuple"": [1, {""name"": ""a"", ""value"": 1}]}, {""nested_list"": [{""name"": ""b"", ""value"": 2}, {""name"": ""c"", ""value"": 3}], ""nested_tuple"": [2, {""name"": ""b"", ""value"": 2}]}], ""__type"": ""%s""}' % fullname(
            RootClass)
        self.assertEqual(expected, doc)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_decoding,"def test_decoding(self):
        doc = '{""some_int"": 42, ""some_str"": ""jaffa kree"", ""simple_dict"": {""a"": 1, ""b"": 2}, ""complex_dict"": {""1"": {""name"": ""a"", ""value"": 1}, ""2"": {""name"": ""b"", ""value"": 2}}, ""complex_list"": [{""nested_list"": [{""name"": ""a"", ""value"": 1}, {""name"": ""b"", ""value"": 2}], ""nested_tuple"": [1, {""name"": ""a"", ""value"": 1}]}, {""nested_list"": [{""name"": ""b"", ""value"": 2}, {""name"": ""c"", ""value"": 3}], ""nested_tuple"": [2, {""name"": ""b"", ""value"": 2}]}], ""__type"": ""%s""}' % fullname(
            RootClass)
        root = json.loads(doc, cls=ModifiedDeepDictDecoder)

        self.assertEqualsRoot(root)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_normalize_type,"def test_normalize_type(self):
        self.assertEqual('unittest.case.TestCase', deep_to_dict(unittest.TestCase))
        self.assertEqual('unittest.case.TestCase.debug', deep_to_dict(unittest.TestCase.debug))
        self.assertEqual('TimeoutError', deep_to_dict(TimeoutError))

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_cast_type,"def test_cast_type(self):
        self.assertRaises(TypeError, deep_from_dict, 'unittest.case.TestCase', type)

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_normalize_exception,"def test_normalize_exception(self):
        self.assertEqual(('failed',), deep_to_dict(TimeoutError('failed')))
        self.assertEqual(('failed',), deep_to_dict(TimeoutError('failed')))

    ",False
-1,pymq,https://github.com/thrau/pymq/blob/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,https://raw.githubusercontent.com/thrau/pymq/101857bca2b705c328d3bda3b26797b51e8ffb70/tests/test_typing.py,,test_cast_exception,"def test_cast_exception(self):
        err = deep_from_dict(('failed',), TimeoutError)
        self.assertIsInstance(err, TimeoutError)
        self.assertEqual(('failed',), err.args)

        err = deep_from_dict('failed', TimeoutError)
        self.assertIsInstance(err, TimeoutError)
        self.assertEqual(('failed',), err.args)


",False
1379,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_cpu_only,"def test_have_cpu_only(self):
        assert 1 == self.count_checks(filters.have_cpu_only())

    ",True
1380,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_gpu_only,"def test_have_gpu_only(self):
        assert 2 == self.count_checks(filters.have_gpu_only())

    ",True
1381,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_name,"def test_have_name(self):
        assert 1 == self.count_checks(filters.have_name('check1'))
        assert 3 == self.count_checks(filters.have_name('check'))
        assert 2 == self.count_checks(filters.have_name(r'\S*1|\S*3'))
        assert 0 == self.count_checks(filters.have_name('Check'))
        assert 3 == self.count_checks(filters.have_name('(?i)Check'))
        assert 2 == self.count_checks(filters.have_name('(?i)check1|CHECK2'))

    ",True
1382,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_not_name,"def test_have_not_name(self):
        assert 2 == self.count_checks(filters.have_not_name('check1'))
        assert 1 == self.count_checks(filters.have_not_name('check1|check3'))
        assert 0 == self.count_checks(filters.have_not_name(
            'check1|check2|check3'))
        assert 3 == self.count_checks(filters.have_not_name('Check1'))
        assert 2 == self.count_checks(filters.have_not_name('(?i)Check1'))

    ",True
1383,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_prgenv,"def test_have_prgenv(self):
        assert 1 == self.count_checks(filters.have_prgenv('env1|env2'))
        assert 2 == self.count_checks(filters.have_prgenv('env3'))
        assert 1 == self.count_checks(filters.have_prgenv('env4'))
        assert 3 == self.count_checks(filters.have_prgenv('env1|env3'))

    @rt.switch_runtime(fixtures.TEST_CONFIG_FILE, 'testsys')
    ",True
1384,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_have_tags,"def test_have_tags(self):
        assert 2 == self.count_checks(filters.have_tag('a|c'))
        assert 0 == self.count_checks(filters.have_tag('p|q'))
        assert 2 == self.count_checks(filters.have_tag('z'))

    ",True
1385,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_invalid_regex,"def test_invalid_regex(self):
        # We need to explicitly call `evaluate` to make sure the exception
        # is triggered in all cases
        with pytest.raises(ReframeError):
            self.count_checks(filters.have_name('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_not_name('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_tag('*foo')).evaluate()

        with pytest.raises(ReframeError):
            self.count_checks(filters.have_prgenv('*foo')).evaluate()
",True
1386,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_check_filters.py,TestCheckFilters,test_partition,"def test_partition(self):
        p = fixtures.partition_by_name('gpu')
        assert 2 == self.count_checks(filters.have_partition([p]))
        p = fixtures.partition_by_name('login')
        assert 0 == self.count_checks(filters.have_partition([p]))

    ",True
1387,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_failure,"def test_check_failure(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'BadSetupCheck']
    )
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1388,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_kbd_interrupt,"def test_check_kbd_interrupt(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=[
            'unittests/resources/checks_unlisted/kbd_interrupt.py'
        ],
        more_options=['-t', 'KeyboardInterruptCheck'],
        local=False,
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1389,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_sanity_failure,"def test_check_sanity_failure(run_reframe, tmp_path):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck']
    )
    assert 'FAILED' in stdout

    # This is a normal failure, it should not raise any exception
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
    assert os.path.exists(
        tmp_path / 'stage' / 'generic' / 'default' /
        'builtin-gcc' / 'SanityFailureCheck'
    )


",False
1390,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_setup_failure,"def test_check_setup_failure(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'BadSetupCheckEarly'],
        local=False,

    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' in stdout
    assert returncode != 0


",False
1391,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_success,"def test_check_success(run_reframe, tmp_path, logfile):
    returncode, stdout, _ = run_reframe(more_options=['--save-log-files'])
    assert 'PASSED' in stdout
    assert 'FAILED' not in stdout
    assert returncode == 0
    assert os.path.exists(tmp_path / 'output' / logfile)
    assert os.path.exists(tmp_path / 'report.json')


",True
1392,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_checkpath_recursion,"def test_checkpath_recursion(run_reframe):
    _, stdout, _ = run_reframe(action='list', checkpath=[])
    num_checks_default = re.search(r'Found (\d+) check', stdout).group(1)

    _, stdout, _ = run_reframe(action='list',
                               checkpath=['checks/'],
                               more_options=['-R'])
    num_checks_in_checkdir = re.search(r'Found (\d+) check', stdout).group(1)
    assert num_checks_in_checkdir == num_checks_default

    _, stdout, _ = run_reframe(action='list',
                               checkpath=['checks/'],
                               more_options=[])
    num_checks_in_checkdir = re.search(r'Found (\d+) check', stdout).group(1)
    assert num_checks_in_checkdir == '0'


",False
1393,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_checkpath_symlink,"def test_checkpath_symlink(run_reframe, tmp_path):
    # FIXME: This should move to test_loader.py
    checks_symlink = tmp_path / 'checks_symlink'
    os.symlink(os.path.abspath('unittests/resources/checks'),
               checks_symlink)

    returncode, stdout, _ = run_reframe(
        action='list',
        more_options=['-R'],
        checkpath=['unittests/resources/checks', str(checks_symlink)]
    )
    num_checks_default = re.search(
        r'Found (\d+) check', stdout, re.MULTILINE).group(1)
    num_checks_in_checkdir = re.search(
        r'Found (\d+) check', stdout, re.MULTILINE).group(1)
    assert num_checks_in_checkdir == num_checks_default


",False
1394,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_dont_restage,"def test_dont_restage(run_reframe, tmp_path):
    run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck']
    )

    # Place a random file in the test's stage directory and rerun with
    # `--dont-restage` and `--max-retries`
    stagedir = (tmp_path / 'stage' / 'generic' / 'default' /
                'builtin-gcc' / 'SanityFailureCheck')
    (stagedir / 'foobar').touch()
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck',
                      '--dont-restage', '--max-retries=1']
    )
    assert os.path.exists(stagedir / 'foobar')
    assert not os.path.exists(f'{stagedir}_retry1')

    # And some standard assertions
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0


",False
1395,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_execution_modes,"def test_execution_modes(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=[],
        environs=[],
        local=False,
        mode='unittest'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 'FAILED' not in stdout
    assert 'PASSED' in stdout
    assert 'Ran 1 test case' in stdout


",False
1396,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_failure_stats,"def test_failure_stats(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'SanityFailureCheck', '--failure-stats']
    )
    assert r'FAILURE STATISTICS' in stdout
    assert r'sanity        1     [SanityFailureCheck' in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
",False
1397,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_check_with_empty_prgenvs,"def test_list_check_with_empty_prgenvs(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=['foo'],
        more_options=['-n', 'NoPrgEnvCheck']
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1398,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_empty_prgenvs_check_and_options,"def test_list_empty_prgenvs_check_and_options(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=[],
        more_options=['-n', 'NoPrgEnvCheck'],
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1399,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_empty_prgenvs_in_check_and_options,"def test_list_empty_prgenvs_in_check_and_options(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list',
        environs=[],
        more_options=['-n', 'NoPrgEnvCheck']
    )
    assert 'Found 0 check(s)' in stdout
    assert returncode == 0


",False
1400,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_no_ignore_check_conflicts,"def test_no_ignore_check_conflicts(run_reframe):
    returncode, *_ = run_reframe(
        checkpath=['unittests/resources/checks'],
        more_options=['-R'],
        ignore_check_conflicts=False,
        action='list'
    )
    assert returncode != 0


",False
1401,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_performance_check_failure,"def test_performance_check_failure(run_reframe, tmp_path, perflogdir):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'PerformanceFailureCheck']
    )
    assert 'FAILED' in stdout

    # This is a normal failure, it should not raise any exception
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode != 0
    assert os.path.exists(
        tmp_path / 'stage' / 'generic' / 'default' /
        'builtin-gcc' / 'PerformanceFailureCheck'
    )
    assert os.path.exists(perflogdir / 'generic' /
                          'default' / 'PerformanceFailureCheck.log')


",True
1402,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_performance_report,"def test_performance_report(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['-t', 'PerformanceFailureCheck', '--performance-report']
    )
    assert r'PERFORMANCE REPORT' in stdout
    assert r'perf: 10 Gflop/s' in stdout


",False
1403,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_report_file_with_sessionid,"def test_report_file_with_sessionid(run_reframe, tmp_path):
    returncode, stdout, _ = run_reframe(
        more_options=[
            f'--save-log-files',
            f'--report-file={tmp_path / ""rfm-report-{sessionid}.json""}'
        ]
    )
    assert returncode == 0
    assert os.path.exists(tmp_path / 'rfm-report-0.json')


",False
1404,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_same_output_stage_dir,"def test_same_output_stage_dir(run_reframe, tmp_path):
    output_dir = str(tmp_path / 'foo')
    returncode, *_ = run_reframe(
        more_options=['-o', output_dir, '-s', output_dir]
    )
    assert returncode == 1

    # Retry with --keep-stage-files
    returncode, *_ = run_reframe(
        more_options=['-o', output_dir, '-s', output_dir, '--keep-stage-files']
    )
    assert returncode == 0
    assert os.path.exists(output_dir)


",False
1405,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_sanity_of_checks,"def test_sanity_of_checks(run_reframe, tmp_path, logfile):
    # This test will effectively load all the tests in the checks path and
    # will force a syntactic and runtime check at least for the constructor
    # of the checks
    returncode, *_ = run_reframe(
        action='list',
        more_options=['--save-log-files'],
        checkpath=[]
    )
    assert returncode == 0
    os.path.exists(tmp_path / 'output' / logfile)


",False
1406,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_all,"def test_show_config_all(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config'],
        system='testsys'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1407,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_param,"def test_show_config_param(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config=systems'],
        system='testsys'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1408,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_show_config_unknown_param,"def test_show_config_unknown_param(run_reframe):
    # Just make sure that this option does not make the frontend crash
    returncode, stdout, stderr = run_reframe(
        more_options=['--show-config=foo'],
        system='testsys'
    )
    assert 'no such configuration parameter found' in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1409,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_skip_prgenv_check_option,"def test_skip_prgenv_check_option(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['--skip-prgenv-check', '-t', 'NoPrgEnvCheck']
    )
    assert 'PASSED' in stdout
    assert returncode == 0


",False
1410,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_skip_system_check_option,"def test_skip_system_check_option(run_reframe):
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        more_options=['--skip-system-check', '-t', 'NoSystemCheck']
    )
    assert 'PASSED' in stdout
    assert returncode == 0


",True
1411,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_timestamp_option,"def test_timestamp_option(run_reframe):
    from datetime import datetime

    timefmt = datetime.now().strftime('xxx_%F')
    returncode, stdout, _ = run_reframe(
        checkpath=['unittests/resources/checks'],
        ignore_check_conflicts=False,
        action='list',
        more_options=['-R', '--timestamp=xxx_%F']
    )
    assert returncode != 0
    assert timefmt in stdout


",False
1412,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_verbosity,"def test_verbosity(run_reframe):
    returncode, stdout, stderr = run_reframe(
        more_options=['-vvvvv'],
        system='testsys',
        action='list'
    )
    assert stdout != ''
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
1413,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_verbosity_with_check,"def test_verbosity_with_check(run_reframe):
    returncode, stdout, stderr = run_reframe(
        more_options=['-vvvvv'],
        system='testsys',
        checkpath=['unittests/resources/checks/hellocheck.py']
    )
    assert '' != stdout
    assert '--- Logging error ---' not in stdout
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert 0 == returncode


",False
1414,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_source_env,"def test_build_deps_unknown_source_env(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    test1 = find_check('Test1_default', checks)
    test1.depends_on('Test0', rfm.DEPEND_EXACT, {'eX': ['e0']})

    # Unknown source is ignored, because it might simply be that the test
    # is not executed for eX
    deps = dependency.build_deps(executors.generate_testcases(checks))
    assert num_deps(deps, 'Test1_default') == 4


",False
1415,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_target_env,"def test_build_deps_unknown_target_env(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    test1 = find_check('Test1_default', checks)
    test1.depends_on('Test0', rfm.DEPEND_EXACT, {'e0': ['eX']})
    with pytest.raises(DependencyError):
        dependency.build_deps(executors.generate_testcases(checks))


",False
1416,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_unknown_test,"def test_build_deps_unknown_test(loader, exec_ctx):
    checks = loader.load_all()

    # Add some inexistent dependencies
    test0 = find_check('Test0', checks)
    for depkind in ('default', 'fully', 'by_env', 'exact'):
        test1 = find_check('Test1_' + depkind, checks)
        if depkind == 'default':
            test1.depends_on('TestX')
        elif depkind == 'exact':
            test1.depends_on('TestX', rfm.DEPEND_EXACT, {'e0': ['e0']})
        elif depkind == 'fully':
            test1.depends_on('TestX', rfm.DEPEND_FULLY)
        elif depkind == 'by_env':
            test1.depends_on('TestX', rfm.DEPEND_BY_ENV)

        with pytest.raises(DependencyError):
            dependency.build_deps(executors.generate_testcases(checks))


",True
1417,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_cyclic_deps,"def test_cyclic_deps(make_test, exec_ctx):
    #
    #       t0       +-->t5<--+
    #       ^        |        |
    #       |        |        |
    #   +-->t1<--+   t6       t7
    #   |   |    |            ^
    #   t2  |    t3           |
    #   ^   |    ^            |
    #   |   v    |            t8
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t5 = make_test('t5')
    t6 = make_test('t6')
    t7 = make_test('t7')
    t8 = make_test('t8')
    t1.depends_on('t0')
    t1.depends_on('t4')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t4.depends_on('t2')
    t4.depends_on('t3')
    t6.depends_on('t5')
    t7.depends_on('t5')
    t8.depends_on('t7')
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4,
                                      t5, t6, t7, t8])
    )

    with pytest.raises(DependencyError) as exc_info:
        dependency.validate_deps(deps)

    assert ('t4->t2->t1->t4' in str(exc_info.value) or
            't2->t1->t4->t2' in str(exc_info.value) or
            't1->t4->t2->t1' in str(exc_info.value) or
            't1->t4->t3->t1' in str(exc_info.value) or
            't4->t3->t1->t4' in str(exc_info.value) or
            't3->t1->t4->t3' in str(exc_info.value))


",False
1418,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_cyclic_deps_by_env,"def test_cyclic_deps_by_env(make_test, exec_ctx):
    t0 = make_test('t0')
    t1 = make_test('t1')
    t1.depends_on('t0', rfm.DEPEND_EXACT, {'e0': ['e0']})
    t0.depends_on('t1', rfm.DEPEND_EXACT, {'e1': ['e1']})
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1])
    )
    with pytest.raises(DependencyError) as exc_info:
        dependency.validate_deps(deps)

    assert ('t1->t0->t1' in str(exc_info.value) or
            't0->t1->t0' in str(exc_info.value))


",False
1419,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_eq_hash,"def test_eq_hash(loader, exec_ctx):
    cases = executors.generate_testcases(loader.load_all())
    case0 = find_case('Test0', 'e0', cases)
    case1 = find_case('Test0', 'e1', cases)
    case0_copy = case0.clone()

    assert case0 == case0_copy
    assert hash(case0) == hash(case0_copy)
    assert case1 != case0
    assert hash(case1) != hash(case0)


",False
1420,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_toposort,"def test_toposort(make_test, exec_ctx):
    #
    #       t0       +-->t5<--+
    #       ^        |        |
    #       |        |        |
    #   +-->t1<--+   t6       t7
    #   |        |            ^
    #   t2<------t3           |
    #   ^        ^            |
    #   |        |            t8
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t5 = make_test('t5')
    t6 = make_test('t6')
    t7 = make_test('t7')
    t8 = make_test('t8')
    t1.depends_on('t0')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t3.depends_on('t2')
    t4.depends_on('t2')
    t4.depends_on('t3')
    t6.depends_on('t5')
    t7.depends_on('t5')
    t8.depends_on('t7')
    deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4,
                                      t5, t6, t7, t8])
    )
    cases = dependency.toposort(deps)
    assert_topological_order(cases, deps)


",False
1421,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_toposort_subgraph,"def test_toposort_subgraph(make_test, exec_ctx):
    #
    #       t0
    #       ^
    #       |
    #   +-->t1<--+
    #   |        |
    #   t2<------t3
    #   ^        ^
    #   |        |
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t1.depends_on('t0')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t3.depends_on('t2')
    t4.depends_on('t2')
    t4.depends_on('t3')
    full_deps = dependency.build_deps(
        executors.generate_testcases([t0, t1, t2, t3, t4])
    )
    partial_deps = dependency.build_deps(
        executors.generate_testcases([t3, t4]), full_deps
    )
    cases = dependency.toposort(partial_deps, is_subgraph=True)
    assert_topological_order(cases, partial_deps)
",True
1422,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_environ_snapshot,"def test_environ_snapshot(self):
        rt.loadenv(self.environ, self.environ_other)
        self.environ_save.restore()
        assert self.environ_save == env.snapshot()
        assert not rt.is_env_loaded(self.environ)
        assert not rt.is_env_loaded(self.environ_other)

    ",True
1423,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_immutability,"def test_immutability(self):
        # Check emit_load_commands()
        _, commands = rt.loadenv(self.environ)

        # Try to modify the returned list of commands
        commands.append('foo')
        assert 'foo' not in rt.loadenv(self.environ)[1]

        # Test ProgEnvironment
        prgenv = env.ProgEnvironment('foo_prgenv')
        assert isinstance(prgenv, env.Environment)
        with pytest.raises(AttributeError):
            prgenv.cc = 'gcc'

        with pytest.raises(AttributeError):
            prgenv.cxx = 'g++'

        with pytest.raises(AttributeError):
            prgenv.ftn = 'gfortran'

        with pytest.raises(AttributeError):
            prgenv.nvcc = 'clang'

        with pytest.raises(AttributeError):
            prgenv.cppflags = ['-DFOO']

        with pytest.raises(AttributeError):
            prgenv.cflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.cxxflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.fflags = ['-O1']

        with pytest.raises(AttributeError):
            prgenv.ldflags = ['-lm']

    @fixtures.switch_to_user_runtime
    ",True
1424,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_non_overlapping,"def test_load_non_overlapping(self):
        e0 = env.Environment(name='e0', variables=[('a', '1'), ('b', '2')])
        e1 = env.Environment(name='e1', variables=[('c', '3'), ('d', '4')])
        rt.loadenv(e0, e1)
        assert rt.is_env_loaded(e0)
        assert rt.is_env_loaded(e1)

    ",True
1425,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_overlapping,"def test_load_overlapping(self):
        e0 = env.Environment(name='e0', variables=[('a', '1'), ('b', '2')])
        e1 = env.Environment(name='e1', variables=[('b', '3'), ('c', '4')])
        rt.loadenv(e0, e1)
        assert not rt.is_env_loaded(e0)
        assert rt.is_env_loaded(e1)

    ",True
1426,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_load_restore,"def test_load_restore(self):
        snapshot, _ = rt.loadenv(self.environ)
        os.environ['_var0'] == 'val1'
        os.environ['_var1'] == 'val1'
        os.environ['_var2'] == 'val1'
        os.environ['_var3'] == 'val1'
        if fixtures.has_sane_modules_system():
            self.assertModulesLoaded(self.environ.modules)

        assert rt.is_env_loaded(self.environ)
        snapshot.restore()
        self.environ_save == env.snapshot()
        os.environ['_var0'], 'val0'
        if fixtures.has_sane_modules_system():
            assert not self.modules_system.is_module_loaded('testmod_foo')

        assert not rt.is_env_loaded(self.environ)

    @fixtures.switch_to_user_runtime
    ",True
1427,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,TestEnvironment,test_setup,"def test_setup(self):
        if fixtures.has_sane_modules_system():
            assert len(self.environ.modules) == 1
            assert 'testmod_foo' in self.environ.modules

        assert len(self.environ.variables.keys()) == 3
        assert self.environ.variables['_var0'] == 'val1'

        # No variable expansion, if environment is not loaded
        self.environ.variables['_var2'] == '$_var0'
        self.environ.variables['_var3'] == '${_var1}'

    ",True
1428,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_conflicted_checks,"def test_conflicted_checks(self):
        self.loader_with_path._ignore_conflicts = False
        with pytest.raises(NameConflictError):
            self.loader_with_path.load_all()

    ",True
1429,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_all,"def test_load_all(self):
        checks = self.loader_with_path.load_all()
        assert 11 == len(checks)

    ",True
1430,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_bad_init,"def test_load_bad_init(self):
        tests = self.loader.load_from_file(
            'unittests/resources/checks_unlisted/bad_init_check.py')
        assert 0 == len(tests)

    ",True
1431,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_file_absolute,"def test_load_file_absolute(self):
        checks = self.loader.load_from_file(
            os.path.abspath('unittests/resources/checks/emptycheck.py'))
        assert 1 == len(checks)
        assert checks[0].name == 'EmptyTest'

    ",True
1432,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_file_relative,"def test_load_file_relative(self):
        checks = self.loader.load_from_file(
            'unittests/resources/checks/emptycheck.py')
        assert 1 == len(checks)
        assert checks[0].name == 'EmptyTest'

    ",True
1433,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_new_syntax,"def test_load_new_syntax(self):
        checks = self.loader.load_from_file(
            'unittests/resources/checks_unlisted/good.py')
        assert 13 == len(checks)

    ",True
1434,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_load_recursive,"def test_load_recursive(self):
        checks = self.loader.load_from_dir('unittests/resources/checks',
                                           recurse=True)
        assert 12 == len(checks)

    ",True
1435,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,TestRegressionCheckLoader,test_special_test,"def test_special_test(self):
        with pytest.warns(ReframeDeprecationWarning):
            @rfm.simple_test
            ",False
1436,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_handler_noappend,"def test_handler_noappend(temp_runtime, logfile):
    runtime = temp_runtime(
        {
            'level': 'info',
            'handlers': [
                {
                    'type': 'file',
                    'name': logfile,
                    'level': 'warning',
                    'format': '[%(asctime)s] %(levelname)s: %(message)s',
                    'datefmt': '%F',
                    'append': False,
                }
            ],
            'handlers_perflog': []
        }

    )
    next(runtime)

    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('foo')
    _close_handlers()

    # Reload logger
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('bar')

    assert not _found_in_logfile('foo', logfile)
    assert _found_in_logfile('bar', logfile)


",False
1437,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_check_logger,"def test_check_logger(self):
        self.logger_with_check.info('foo')
        self.logger_with_check.verbose('bar')

        assert os.path.exists(self.logfile)
        assert self.found_in_logfile('info')
        assert self.found_in_logfile('verbose')
        assert self.found_in_logfile('_FakeCheck')

    ",True
1438,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_custom_handler_levels,"def test_custom_handler_levels(self):
        self.handler.setLevel('verbose')
        self.handler.setLevel(rlog.VERBOSE)

        self.logger_with_check.debug('foo')
        self.logger_with_check.verbose('bar')

        assert not self.found_in_logfile('foo')
        assert self.found_in_logfile('bar')

    ",True
1439,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_custom_loglevels,"def test_custom_loglevels(self):
        self.logger_without_check.info('foo')
        self.logger_without_check.verbose('bar')

        assert os.path.exists(self.logfile)
        assert self.found_in_logfile('info')
        assert self.found_in_logfile('verbose')
        assert self.found_in_logfile('reframe')

    ",True
1440,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_handler_types,"def test_handler_types(self):
        assert issubclass(logging.Handler, rlog.Handler)
        assert issubclass(logging.StreamHandler, rlog.Handler)
        assert issubclass(logging.FileHandler, rlog.Handler)
        assert issubclass(logging.handlers.RotatingFileHandler, rlog.Handler)

        # Try to instantiate rlog.Handler
        with pytest.raises(TypeError):
            rlog.Handler()

    ",True
1441,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_invalid_loglevel,"def test_invalid_loglevel(self):
        with pytest.raises(ValueError):
            self.logger.setLevel('level')

        with pytest.raises(ValueError):
            rlog.Logger('logger', 'level')

    ",True
1442,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_logger_levels,"def test_logger_levels(self):
        self.logger_with_check.setLevel('verbose')
        self.logger_with_check.setLevel(rlog.VERBOSE)

        self.logger_with_check.debug('bar')
        self.logger_with_check.verbose('foo')

        assert not self.found_in_logfile('bar')
        assert self.found_in_logfile('foo')

    ",True
1443,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_rfc3339_timezone_extension,"def test_rfc3339_timezone_extension(self):
        self.formatter = rlog.RFC3339Formatter(
            fmt=('[%(asctime)s] %(levelname)s: %(check_name)s: '
                 'ct:%(check_job_completion_time)s: %(message)s'),
            datefmt='%FT%T%:z')
        self.handler.setFormatter(self.formatter)
        self.logger_with_check.info('foo')
        self.logger_without_check.info('foo')
        assert not self.found_in_logfile(r'%%:z')
        assert self.found_in_logfile(r'\[.+(\+|-)\d\d:\d\d\]')
        assert self.found_in_logfile(r'ct:.+(\+|-)\d\d:\d\d')

    ",True
1444,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,TestLogger,test_rfc3339_timezone_wrong_directive,"def test_rfc3339_timezone_wrong_directive(self):
        self.formatter = rlog.RFC3339Formatter(
            fmt='[%(asctime)s] %(levelname)s: %(check_name)s: %(message)s',
            datefmt='%FT%T:z')
        self.handler.setFormatter(self.formatter)
        self.logger_without_check.info('foo')
        assert self.found_in_logfile(':z')


",True
1445,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_compile_hooks,"def test_compile_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1446,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_environ_setup,"def test_environ_setup(hellotest, local_exec_ctx):
    # Use test environment for the regression check
    hellotest.variables = {'_FOO_': '1', '_BAR_': '2'}
    hellotest.setup(*local_exec_ctx)
    for k in hellotest.variables.keys():
        assert k not in os.environ


",True
1447,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_extra_resources,"def test_extra_resources(testsys_system):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1448,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck_local,"def test_hellocheck_local(hellotest, local_exec_ctx):
    # Test also the prebuild/postbuild functionality
    hellotest.prebuild_cmds = ['touch prebuild', 'mkdir prebuild_dir']
    hellotest.postbuild_cmds = ['touch postbuild', 'mkdir postbuild_dir']
    hellotest.keep_files = ['prebuild', 'postbuild',
                            'prebuild_dir', 'postbuild_dir']

    # Force local execution of the test; just for testing .local
    hellotest.local = True
    _run(hellotest, *local_exec_ctx)
    must_keep = [
        hellotest.stdout.evaluate(),
        hellotest.stderr.evaluate(),
        hellotest.build_stdout.evaluate(),
        hellotest.build_stderr.evaluate(),
        hellotest.job.script_filename,
        *hellotest.keep_files
    ]
    for f in must_keep:
        assert os.path.exists(os.path.join(hellotest.outputdir, f))


",True
1449,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck_local_prepost_run,"def test_hellocheck_local_prepost_run(hellotest, local_exec_ctx):
    @sn.sanity_function
    ",True
1450,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_multiple_hooks,"def test_multiple_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
1451,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_compileonly_test,"def test_name_compileonly_test():
    ",True
1452,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_runonly_test,"def test_name_runonly_test():
    ",True
1453,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_name_user_inheritance,"def test_name_user_inheritance():
    ",True
1454,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_performance_var_evaluation,"def test_performance_var_evaluation(dummytest, sanity_file,
                                    perf_file, dummy_gpu_exec_ctx):
    # All performance values must be evaluated, despite the first one
    # failing To test this, we need an extract function that will have a
    # side effect when evaluated, whose result we will check after calling
    # `check_performance()`.
    logfile = 'perf.log'

    @sn.sanity_function
    ",False
1455,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_default,"def test_reference_default(dummytest, sanity_file,
                           perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        '*': {
            'value1': (1.4, -0.1, 0.1, None),
            'value2': (1.7, -0.1, 0.1, None),
            'value3': (3.1, -0.1, 0.1, None),
        }
    }
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
1456,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_unknown_tag,"def test_reference_unknown_tag(dummytest, sanity_file,
                               perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        'testsys': {
            'value1': (1.4, -0.1, 0.1, None),
            'value2': (1.7, -0.1, 0.1, None),
            'foo': (3.1, -0.1, 0.1, None),
        }
    }
    with pytest.raises(SanityError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
1457,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_registration_of_tests,"def test_registration_of_tests():
    import sys
    import unittests.resources.checks_unlisted.good as mod

    checks = mod._rfm_gettests()
    assert 13 == len(checks)
    assert [mod.MyBaseTest(0, 0),
            mod.MyBaseTest(0, 1),
            mod.MyBaseTest(1, 0),
            mod.MyBaseTest(1, 1),
            mod.MyBaseTest(2, 0),
            mod.MyBaseTest(2, 1),
            mod.AnotherBaseTest(0, 0),
            mod.AnotherBaseTest(0, 1),
            mod.AnotherBaseTest(1, 0),
            mod.AnotherBaseTest(1, 1),
            mod.AnotherBaseTest(2, 0),
            mod.AnotherBaseTest(2, 1),
            mod.MyBaseTest(10, 20)] == checks


",True
1458,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_regression_test_name,"def test_regression_test_name():
    ",True
1459,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_strange_test_names,"def test_strange_test_names():
    ",True
1460,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_supports_environ,"def test_supports_environ(hellotest, generic_system):
    hellotest.valid_prog_environs = ['*']
    assert hellotest.supports_environ('foo1')
    assert hellotest.supports_environ('foo-env')
    assert hellotest.supports_environ('*')


",True
1461,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_supports_system,"def test_supports_system(hellotest, testsys_system):
    hellotest.valid_systems = ['*']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['*:*']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys']
    assert hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:gpu']
    assert hellotest.supports_system('gpu')
    assert not hellotest.supports_system('login')
    assert hellotest.supports_system('testsys:gpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:login']
    assert not hellotest.supports_system('gpu')
    assert hellotest.supports_system('login')
    assert not hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['foo']
    assert not hellotest.supports_system('gpu')
    assert not hellotest.supports_system('login')
    assert not hellotest.supports_system('testsys:gpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['*:gpu']
    assert hellotest.supports_system('testsys:gpu')
    assert hellotest.supports_system('foo:gpu')
    assert not hellotest.supports_system('testsys:cpu')
    assert not hellotest.supports_system('testsys:login')

    hellotest.valid_systems = ['testsys:*']
    assert hellotest.supports_system('testsys:login')
    assert hellotest.supports_system('gpu')
    assert not hellotest.supports_system('foo:gpu')


",True
1462,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_limited,"def test_concurrency_limited(async_runner, make_cases, make_async_exec_ctx):
    # The number of checks must be <= 2*max_jobs.
    num_checks, max_jobs = 5, 3
    ctx = make_async_exec_ctx(max_jobs)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that maximum concurrency was reached as fast as possible
    assert max_jobs == max(monitor.num_tasks)
    assert max_jobs == monitor.num_tasks[max_jobs]

    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Ensure that the jobs after the first #max_jobs were each run after
    # one of the previous #max_jobs jobs had finished
    # (e.g. begin[max_jobs] > end[0]).
    # Note: we may ensure this strictly as we may ensure serial behaviour.
    begin_after_end = (b > e for b, e in zip(begin_stamps[max_jobs:],
                                             end_stamps[:-max_jobs]))
    assert all(begin_after_end)

    # NOTE: to ensure that these remaining jobs were also run
    # in parallel one could do the command hereafter; however, it would
    # require to substantially increase the sleep time (in SleepCheck),
    # because of the delays in rescheduling (1s, 2s, 3s, 1s, 2s,...).
    # We currently prefer not to do this last concurrency test to avoid an
    # important prolongation of the unit test execution time.
    # self.assertTrue(self.begin_stamps[-1] < self.end_stamps[max_jobs])

    # Warn if the first #max_jobs jobs were not run in parallel; the
    # corresponding strict check would be:
    # self.assertTrue(self.begin_stamps[max_jobs-1] <= self.end_stamps[0])
    if begin_stamps[max_jobs-1] > end_stamps[0]:
        pytest.skip('the system seems too loaded.')


",True
1463,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_none,"def test_concurrency_none(async_runner, make_cases, make_async_exec_ctx):
    num_checks = 3
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that a single task was running all the time
    assert 1 == max(monitor.num_tasks)

    # Read the timestamps sorted to permit simple concurrency tests.
    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Ensure that the jobs were run after the previous job had finished
    # (e.g. begin[1] > end[0]).
    begin_after_end = (b > e
                       for b, e in zip(begin_stamps[1:], end_stamps[:-1]))
    assert all(begin_after_end)


",False
1464,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_concurrency_unlimited,"def test_concurrency_unlimited(async_runner, make_cases, make_async_exec_ctx):
    num_checks = 3

    # Trigger evaluation of the execution context
    ctx = make_async_exec_ctx(num_checks)
    next(ctx)

    runner, monitor = async_runner
    runner.runall(make_cases([SleepCheck(.5) for i in range(num_checks)]))

    # Ensure that all tests were run and without failures.
    assert num_checks == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == len(runner.stats.failures())

    # Ensure that maximum concurrency was reached as fast as possible
    assert num_checks == max(monitor.num_tasks)
    assert num_checks == monitor.num_tasks[num_checks]
    begin_stamps, end_stamps = _read_timestamps(monitor.tasks)

    # Warn if not all tests were run in parallel; the corresponding strict
    # check would be:
    #
    #     assert begin_stamps[-1] <= end_stamps[0]
    #
    if begin_stamps[-1] > end_stamps[0]:
        pytest.skip('the system seems too much loaded.')


",True
1465,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies,"def test_dependencies(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1466,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies,"def test_dependencies(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1467,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies_with_retries,"def test_dependencies_with_retries(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1468,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_dependencies_with_retries,"def test_dependencies_with_retries(make_runner, dep_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(dep_cases)
    assert_dependency_run(runner)


",True
1469,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_in_wait_with_concurrency,"def test_kbd_interrupt_in_wait_with_concurrency(async_runner, make_cases,
                                                make_async_exec_ctx):
    ctx = make_async_exec_ctx(4)
    next(ctx)

    runner, _ = async_runner
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([
            KeyboardInterruptCheck(), SleepCheck(10),
            SleepCheck(10), SleepCheck(10)
        ]))

    assert_interrupted_run(runner)


",True
1470,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_within_test,"def test_kbd_interrupt_within_test(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    check = KeyboardInterruptCheck()
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([KeyboardInterruptCheck()]))

    stats = runner.stats
    assert 1 == len(stats.failures())
    assert_all_dead(runner)


",False
1471,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_within_test,"def test_kbd_interrupt_within_test(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    check = KeyboardInterruptCheck()
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([KeyboardInterruptCheck()]))

    stats = runner.stats
    assert 1 == len(stats.failures())
    assert_all_dead(runner)


",False
1472,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_pass_in_retries,"def test_pass_in_retries(make_runner, make_cases, tmp_path, common_exec_ctx):
    tmpfile = tmp_path / 'out.txt'
    tmpfile.write_text('0\n')
    runner = make_runner(max_retries=3)
    pass_run_no = 2
    runner.runall(make_cases([RetriesCheck(pass_run_no, tmpfile)]))

    # Ensure that the test passed after retries in run `pass_run_no`
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 1 == len(runner.stats.failures(run=0))
    assert pass_run_no == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",True
1473,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_pass_in_retries,"def test_pass_in_retries(make_runner, make_cases, tmp_path, common_exec_ctx):
    tmpfile = tmp_path / 'out.txt'
    tmpfile.write_text('0\n')
    runner = make_runner(max_retries=3)
    pass_run_no = 2
    runner.runall(make_cases([RetriesCheck(pass_run_no, tmpfile)]))

    # Ensure that the test passed after retries in run `pass_run_no`
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 1 == len(runner.stats.failures(run=0))
    assert pass_run_no == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",True
1474,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_bad_check,"def test_retries_bad_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([BadSetupCheck(), BadSetupCheckEarly()]))

    # Ensure that the test was retried #max_retries times and failed
    assert 2 == runner.stats.num_cases()
    assert_runall(runner)
    assert runner.max_retries == rt.runtime().current_run
    assert 2 == len(runner.stats.failures())

    # Ensure that the report does not raise any exception
    runner.stats.retry_report()


",True
1475,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_bad_check,"def test_retries_bad_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([BadSetupCheck(), BadSetupCheckEarly()]))

    # Ensure that the test was retried #max_retries times and failed
    assert 2 == runner.stats.num_cases()
    assert_runall(runner)
    assert runner.max_retries == rt.runtime().current_run
    assert 2 == len(runner.stats.failures())

    # Ensure that the report does not raise any exception
    runner.stats.retry_report()


",True
1476,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_retries_good_check,"def test_retries_good_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner(max_retries=2)
    runner.runall(make_cases([HelloTest()]))

    # Ensure that the test passed without retries.
    assert 1 == runner.stats.num_cases()
    assert_runall(runner)
    assert 0 == rt.runtime().current_run
    assert 0 == len(runner.stats.failures())


",False
1477,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall,"def test_runall(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    time_start = time.time()
    runner.runall(make_cases())
    time_end = time.time()
    assert 8 == runner.stats.num_cases()
    assert_runall(runner)
    assert 5 == len(runner.stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')

    # Create a run report and validate it
    run_stats = runner.stats.json()
    report = {
        'session_info': {
            'cmdline': ' '.join(sys.argv),
            'config_file': rt.runtime().site_config.filename,
            'data_version': '1.0',
            'hostname': socket.gethostname(),
            'num_cases': run_stats[0]['num_cases'],
            'num_failures': run_stats[-1]['num_failures'],
            'prefix_output': rt.runtime().output_prefix,
            'prefix_stage': rt.runtime().stage_prefix,
            'time_elapsed': time_end - time_start,
            'time_end': time.strftime(
                '%FT%T%z', time.localtime(time_end),
            ),
            'time_start': time.strftime(
                '%FT%T%z', time.localtime(time_start),
            ),
            'user': os_ext.osuser(),
            'version': os_ext.reframe_version(),
            'workdir': os.getcwd()
        },
        'runs': run_stats
    }
    _validate_runreport(report)


",True
1478,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall,"def test_runall(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    time_start = time.time()
    runner.runall(make_cases())
    time_end = time.time()
    assert 8 == runner.stats.num_cases()
    assert_runall(runner)
    assert 5 == len(runner.stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')

    # Create a run report and validate it
    run_stats = runner.stats.json()
    report = {
        'session_info': {
            'cmdline': ' '.join(sys.argv),
            'config_file': rt.runtime().site_config.filename,
            'data_version': '1.0',
            'hostname': socket.gethostname(),
            'num_cases': run_stats[0]['num_cases'],
            'num_failures': run_stats[-1]['num_failures'],
            'prefix_output': rt.runtime().output_prefix,
            'prefix_stage': rt.runtime().stage_prefix,
            'time_elapsed': time_end - time_start,
            'time_end': time.strftime(
                '%FT%T%z', time.localtime(time_end),
            ),
            'time_start': time.strftime(
                '%FT%T%z', time.localtime(time_start),
            ),
            'user': os_ext.osuser(),
            'version': os_ext.reframe_version(),
            'workdir': os.getcwd()
        },
        'runs': run_stats
    }
    _validate_runreport(report)


",True
1479,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_performance_check,"def test_runall_skip_performance_check(make_runner, make_cases,
                                       common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_performance_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 0 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1480,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_performance_check,"def test_runall_skip_performance_check(make_runner, make_cases,
                                       common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_performance_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 0 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1481,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_prgenv_check,"def test_runall_skip_prgenv_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_environ_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1482,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_prgenv_check,"def test_runall_skip_prgenv_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_environ_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1483,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_sanity_check,"def test_runall_skip_sanity_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_sanity_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 0 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1484,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_sanity_check,"def test_runall_skip_sanity_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.skip_sanity_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 4 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 0 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1485,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_system_check,"def test_runall_skip_system_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_system_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1486,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_runall_skip_system_check,"def test_runall_skip_system_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.runall(make_cases(skip_system_check=True))
    stats = runner.stats
    assert 9 == stats.num_cases()
    assert_runall(runner)
    assert 5 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 1 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1487,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_sigterm_handling,"def test_sigterm_handling(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    with pytest.raises(ReframeForceExitError,
                       match='received TERM signal'):
        runner.runall(make_cases([SelfKillCheck()]))

    assert_all_dead(runner)
    assert runner.stats.num_cases() == 1
    assert len(runner.stats.failures()) == 1


",True
1488,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_sigterm_handling,"def test_sigterm_handling(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    with pytest.raises(ReframeForceExitError,
                       match='received TERM signal'):
        runner.runall(make_cases([SelfKillCheck()]))

    assert_all_dead(runner)
    assert runner.stats.num_cases() == 1
    assert len(runner.stats.failures()) == 1


",False
1489,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_strict_performance_check,"def test_strict_performance_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.strict_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 6 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 2 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1490,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_strict_performance_check,"def test_strict_performance_check(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.strict_check = True
    runner.runall(make_cases())
    stats = runner.stats
    assert 8 == stats.num_cases()
    assert_runall(runner)
    assert 6 == len(stats.failures())
    assert 2 == num_failures_stage(runner, 'setup')
    assert 1 == num_failures_stage(runner, 'sanity')
    assert 2 == num_failures_stage(runner, 'performance')
    assert 1 == num_failures_stage(runner, 'cleanup')


",True
1491,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel,"def test_cancel(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job, 'sleep 30')
    t_job = datetime.now()
    minimal_job.submit()
    minimal_job.cancel()
    minimal_job.wait()
    t_job = datetime.now() - t_job
    assert minimal_job.finished()
    assert t_job.total_seconds() < 30

    # Additional scheduler-specific checks
    sched_name = minimal_job.scheduler.registered_name
    if sched_name in ('slurm', 'squeue'):
        assert minimal_job.state == 'CANCELLED'


",True
1492,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1493,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1494,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1495,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1496,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_before_submit,"def test_cancel_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.cancel()


",True
1497,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_term_ignore,"def test_cancel_term_ignore(minimal_job, scheduler, local_only):
    # This test emulates a descendant process of the spawned job that
    # ignores the SIGTERM signal:
    #
    #   reframe --- local job script --- sleep_deeply.sh --- sleep
    #                                      (TERM IGN)
    #
    #  Since the ""local job script"" does not ignore SIGTERM, it will be
    #  terminated immediately after we cancel the job. However, the deeply
    #  spawned sleep will ignore it. We need to make sure that our
    #  implementation grants the sleep process a grace period and then
    #  kills it.
    minimal_job.time_limit = '1m'
    minimal_job.scheduler._cancel_grace_period = 2
    prepare_job(minimal_job,
                command=os.path.join(fixtures.TEST_RESOURCES_CHECKS,
                                     'src', 'sleep_deeply.sh'),
                pre_run=[''],
                post_run=[''])
    minimal_job.submit()

    # Stall a bit here to let the the spawned process start and install its
    # signal handler for SIGTERM
    time.sleep(1)

    t_grace = datetime.now()
    minimal_job.cancel()
    t_grace = datetime.now() - t_grace
    minimal_job.wait()

    # Read pid of spawned sleep
    with open(minimal_job.stdout) as fp:
        sleep_pid = int(fp.read())

    assert t_grace.total_seconds() >= 2
    assert minimal_job.state == 'TIMEOUT'

    # Verify that the spawned sleep is killed, too
    assert_process_died(sleep_pid)


# Flexible node allocation tests


",True
1498,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_cancel_with_grace,"def test_cancel_with_grace(minimal_job, scheduler, local_only):
    # This test emulates a spawned process that ignores the SIGTERM signal
    # and also spawns another process:
    #
    #   reframe --- local job script --- sleep 10
    #                  (TERM IGN)
    #
    # We expect the job not to be cancelled immediately, since it ignores
    # the gracious signal we are sending it. However, we expect it to be
    # killed immediately after the grace period of 2 seconds expires.
    #
    # We also check that the additional spawned process is also killed.
    minimal_job.time_limit = '1m'
    minimal_job.scheduler._cancel_grace_period = 2
    prepare_job(minimal_job,
                command='sleep 5 &',
                pre_run=['trap -- """" TERM'],
                post_run=['echo $!', 'wait'])
    minimal_job.submit()

    # Stall a bit here to let the the spawned process start and install its
    # signal handler for SIGTERM
    time.sleep(1)

    t_grace = datetime.now()
    minimal_job.cancel()
    t_grace = datetime.now() - t_grace

    minimal_job.wait()
    # Read pid of spawned sleep
    with open(minimal_job.stdout) as fp:
        sleep_pid = int(fp.read())

    assert t_grace.total_seconds() >= 2
    assert t_grace.total_seconds() < 5
    assert minimal_job.state == 'TIMEOUT'

    # Verify that the spawned sleep is killed, too
    assert_process_died(sleep_pid)


",True
1499,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_constraint,"def test_combined_access_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['-C c2&c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c2&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2&c3)$', script_content) is None


",True
1500,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_constraint,"def test_combined_access_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['-C c2&c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c2&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2&c3)$', script_content) is None


",True
1501,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_multiple_constraints,"def test_combined_access_multiple_constraints(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['--constraint=c2', '-C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2|c3)$', script_content) is None


",True
1502,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_multiple_constraints,"def test_combined_access_multiple_constraints(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['--constraint=c2', '-C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1&c3$', script_content)
    assert re.search(r'(?m)--constraint=(c1|c2|c3)$', script_content) is None


",False
1503,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_verbatim_constraint,"def test_combined_access_verbatim_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['#SBATCH --constraint=c2', '#SBATCH -C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1$', script_content)
    assert re.search(r'(?m)^#SBATCH --constraint=c2$', script_content)
    assert re.search(r'(?m)^#SBATCH -C c3$', script_content)


",True
1504,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_combined_access_verbatim_constraint,"def test_combined_access_verbatim_constraint(make_job, slurm_only):
    job = make_job(sched_access=['--constraint=c1'])
    job.options = ['#SBATCH --constraint=c2', '#SBATCH -C c3']
    prepare_job(job)
    with open(job.script_filename) as fp:
        script_content = fp.read()

    assert re.search(r'(?m)--constraint=c1$', script_content)
    assert re.search(r'(?m)^#SBATCH --constraint=c2$', script_content)
    assert re.search(r'(?m)^#SBATCH -C c3$', script_content)


",False
1505,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_constraint_idle,"def test_flex_alloc_constraint_idle(make_flexible_job):
    job = make_flexible_job('idle')
    job.options = ['--constraint=f1']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1506,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_default_partition_all,"def test_flex_alloc_default_partition_all(make_flexible_job):
    job = make_flexible_job('all')
    prepare_job(job)
    assert job.num_tasks == 16


",True
1507,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_enough_nodes_constraint_partition,"def test_flex_alloc_enough_nodes_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    job.num_tasks = -4
    prepare_job(job)
    assert job.num_tasks == 4


",True
1508,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_exclude_nodes_cmd,"def test_flex_alloc_exclude_nodes_cmd(make_flexible_job):
    job = make_flexible_job('all',
                            sched_access=['--constraint=f1'],
                            sched_exclude_nodelist='nid00001')
    prepare_job(job)
    assert job.num_tasks == 8


",True
1509,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_exclude_nodes_opt,"def test_flex_alloc_exclude_nodes_opt(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--constraint=f1'])
    job.options = ['-x nid00001']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1510,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_constraint,"def test_flex_alloc_invalid_constraint(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--constraint=invalid']
    with pytest.raises(JobError):
        prepare_job(job)


",True
1511,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_partition_cmd,"def test_flex_alloc_invalid_partition_cmd(make_flexible_job):
    job = make_flexible_job('all', sched_partition='invalid')
    with pytest.raises(JobError):
        prepare_job(job)


",False
1512,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_invalid_partition_opt,"def test_flex_alloc_invalid_partition_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--partition=invalid']
    with pytest.raises(JobError):
        prepare_job(job)


",True
1513,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_maintenance_nodes,"def test_flex_alloc_maintenance_nodes(make_flexible_job):
    job = make_flexible_job('maint')
    job.options = ['--partition=p4']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1514,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_no_num_tasks_per_node,"def test_flex_alloc_no_num_tasks_per_node(make_flexible_job):
    job = make_flexible_job('all')
    job.num_tasks_per_node = None
    job.options = ['-C f1&f2', '--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 1


",True
1515,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_negative,"def test_flex_alloc_nodes_negative(make_flexible_job):
    job = make_flexible_job(-1, sched_access=['--constraint=f1'])
    with pytest.raises(JobError):
        prepare_job(job)


",True
1516,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_positive,"def test_flex_alloc_nodes_positive(make_flexible_job):
    job = make_flexible_job(12, sched_access=['--constraint=f1'])
    prepare_job(job)
    assert job.num_tasks == 48


",True
1517,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_nodes_zero,"def test_flex_alloc_nodes_zero(make_flexible_job):
    job = make_flexible_job(0, sched_access=['--constraint=f1'])
    with pytest.raises(JobError):
        prepare_job(job)


",False
1518,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_not_enough_idle_nodes,"def test_flex_alloc_not_enough_idle_nodes(make_flexible_job):
    job = make_flexible_job('idle')
    job.num_tasks = -12
    with pytest.raises(JobError):
        prepare_job(job)


",True
1519,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_not_enough_nodes_constraint_partition,"def test_flex_alloc_not_enough_nodes_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    job.num_tasks = -8
    with pytest.raises(JobError):
        prepare_job(job)


",True
1520,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_partition_idle,"def test_flex_alloc_partition_idle(make_flexible_job):
    job = make_flexible_job('idle', sched_partition='p2')
    with pytest.raises(JobError):
        prepare_job(job)


",True
1521,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_constraint_partition,"def test_flex_alloc_sched_access_constraint_partition(make_flexible_job):
    job = make_flexible_job(
        'all', sched_access=['--constraint=f1', '--partition=p2']
    )
    prepare_job(job)
    assert job.num_tasks == 4


",False
1522,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_idle,"def test_flex_alloc_sched_access_idle(make_flexible_job):
    job = make_flexible_job('idle', sched_access=['--constraint=f1'])
    prepare_job(job)
    assert job.num_tasks == 8


",True
1523,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_idle_sequence_view,"def test_flex_alloc_sched_access_idle_sequence_view(make_flexible_job):
    # Here we simulate passing a readonly 'sched_access' as returned
    # by a 'SystemPartition' instance.

    from reframe.utility import SequenceView

    job = make_flexible_job('idle',
                            sched_access=SequenceView(['--constraint=f3']),
                            sched_partition='p3')
    prepare_job(job)
    assert job.num_tasks == 4


",True
1524,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_sched_access_partition,"def test_flex_alloc_sched_access_partition(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--partition=p1'])
    prepare_job(job)
    assert job.num_tasks == 16


",True
1525,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_constraint_opt,"def test_flex_alloc_valid_constraint_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1']
    prepare_job(job)
    assert job.num_tasks == 12


",True
1526,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_constraint_partition,"def test_flex_alloc_valid_constraint_partition(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f2', '--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1527,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_multiple_constraints,"def test_flex_alloc_valid_multiple_constraints(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-C f1&f3']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1528,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_multiple_partitions,"def test_flex_alloc_valid_multiple_partitions(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['--partition=p1,p2']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1529,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_partition_cmd,"def test_flex_alloc_valid_partition_cmd(make_flexible_job):
    job = make_flexible_job('all', sched_partition='p2')
    prepare_job(job)
    assert job.num_tasks == 8


",True
1530,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_partition_opt,"def test_flex_alloc_valid_partition_opt(make_flexible_job):
    job = make_flexible_job('all')
    job.options = ['-p p2']
    prepare_job(job)
    assert job.num_tasks == 8


",True
1531,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_reservation_cmd,"def test_flex_alloc_valid_reservation_cmd(make_flexible_job):
    job = make_flexible_job('all',
                            sched_access=['--constraint=f2'],
                            sched_reservation='dummy')

    prepare_job(job)
    assert job.num_tasks == 4


",True
1532,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_flex_alloc_valid_reservation_option,"def test_flex_alloc_valid_reservation_option(make_flexible_job):
    job = make_flexible_job('all', sched_access=['--constraint=f2'])
    job.options = ['--reservation=dummy']
    prepare_job(job)
    assert job.num_tasks == 4


",True
1533,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",False
1534,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",False
1535,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1536,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1537,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_guess_num_tasks,"def test_guess_num_tasks(minimal_job, scheduler):
    minimal_job.num_tasks = 0
    if scheduler.registered_name == 'local':
        # We want to trigger bug #1087 (Github), that's why we set allocation
        # policy to idle.
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'idle'
        prepare_job(minimal_job)
        minimal_job.submit()
        minimal_job.wait()
        assert minimal_job.num_tasks == 1
    elif scheduler.registered_name in ('slurm', 'squeue'):
        minimal_job.num_tasks = 0
        minimal_job._sched_flex_alloc_nodes = 'all'

        # Monkey patch `allnodes()` to simulate extraction of
        # slurm nodes through the use of `scontrol show`
        minimal_job.scheduler.allnodes = lambda: set()

        # monkey patch `_get_default_partition()` to simulate extraction
        # of the default partition through the use of `scontrol show`
        minimal_job.scheduler._get_default_partition = lambda: 'pdef'
        assert minimal_job.guess_num_tasks() == 0
    else:
        with pytest.raises(NotImplementedError):
            minimal_job.guess_num_tasks()


",True
1538,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1539,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1540,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1541,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_no_empty_lines_in_preamble,"def test_no_empty_lines_in_preamble(minimal_job):
    for line in minimal_job.scheduler.emit_preamble(minimal_job):
        assert line != ''


",True
1542,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll,"def test_poll(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job, 'sleep 2')
    minimal_job.submit()
    assert not minimal_job.finished()
    minimal_job.wait()


",False
1543,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1544,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1545,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1546,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1547,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_poll_before_submit,"def test_poll_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.finished()


",True
1548,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1549,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1550,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1551,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1552,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare,"def test_prepare(fake_job):
    sched_name = fake_job.scheduler.registered_name
    if sched_name == 'pbs':
        fake_job.options += ['mem=100GB', 'cpu_type=haswell']
    elif sched_name == 'torque':
        fake_job.options += ['-l mem=100GB', 'haswell']

    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        found_directives = set(re.findall(r'^\#\w+ .*', fp.read(),
                                          re.MULTILINE))

    expected_directives = globals()[f'_expected_{sched_name}_directives']
    assert_job_script_sanity(fake_job)
    assert expected_directives(fake_job) == found_directives


",True
1553,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_exclusive,"def test_prepare_no_exclusive(make_job, slurm_only):
    job = make_job(sched_exclusive_access=False)
    prepare_job(job)
    with open(job.script_filename) as fp:
        assert re.search(r'--exclusive', fp.read()) is None


",True
1554,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_exclusive,"def test_prepare_no_exclusive(make_job, slurm_only):
    job = make_job(sched_exclusive_access=False)
    prepare_job(job)
    with open(job.script_filename) as fp:
        assert re.search(r'--exclusive', fp.read()) is None


",True
1555,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_smt,"def test_prepare_no_smt(fake_job, slurm_only):
    fake_job.use_smt = None
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint', fp.read()) is None


",False
1556,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_no_smt,"def test_prepare_no_smt(fake_job, slurm_only):
    fake_job.use_smt = None
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint', fp.read()) is None


",True
1557,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_with_smt,"def test_prepare_with_smt(fake_job, slurm_only):
    fake_job.use_smt = True
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=multithread', fp.read()) is not None


",True
1558,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_with_smt,"def test_prepare_with_smt(fake_job, slurm_only):
    fake_job.use_smt = True
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=multithread', fp.read()) is not None


",True
1559,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_without_smt,"def test_prepare_without_smt(fake_job, slurm_only):
    fake_job.use_smt = False
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=nomultithread', fp.read()) is not None


",False
1560,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_without_smt,"def test_prepare_without_smt(fake_job, slurm_only):
    fake_job.use_smt = False
    prepare_job(fake_job)
    with open(fake_job.script_filename) as fp:
        assert re.search(r'--hint=nomultithread', fp.read()) is not None


",True
1561,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit,"def test_submit(make_job, exec_ctx):
    minimal_job = make_job(sched_access=exec_ctx.access)
    prepare_job(minimal_job)
    assert minimal_job.nodelist is None
    minimal_job.submit()
    assert minimal_job.jobid is not None
    minimal_job.wait()

    # Additional scheduler-specific checks
    sched_name = minimal_job.scheduler.registered_name
    if sched_name == 'local':
        assert [socket.gethostname()] == minimal_job.nodelist
        assert 0 == minimal_job.exitcode
    elif sched_name == ('slurm', 'squeue', 'pbs', 'torque'):
        num_tasks_per_node = minimal_job.num_tasks_per_node or 1
        num_nodes = minimal_job.num_tasks // num_tasks_per_node
        assert num_nodes == len(minimal_job.nodelist)
        assert 0 == minimal_job.exitcode


",True
1562,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit_timelimit,"def test_submit_timelimit(minimal_job, local_only):
    minimal_job.time_limit = '2s'
    prepare_job(minimal_job, 'sleep 10')
    t_job = datetime.now()
    minimal_job.submit()
    assert minimal_job.jobid is not None
    minimal_job.wait()
    t_job = datetime.now() - t_job
    assert t_job.total_seconds() >= 2
    assert t_job.total_seconds() < 3
    with open(minimal_job.stdout) as fp:
        assert re.search('postrun', fp.read()) is None

    assert minimal_job.state == 'TIMEOUT'


",True
1563,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1564,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1565,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1566,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
1567,reframe,https://github.com/eth-cscs/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/eth-cscs/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_wait_before_submit,"def test_wait_before_submit(minimal_job):
    prepare_job(minimal_job, 'sleep 3')
    with pytest.raises(JobNotStartedError):
        minimal_job.wait()


",True
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,,test_arguments,"def test_arguments(argparser, foo_options):
    with pytest.raises(ValueError):
        foo_options.add_argument(action='store', default='FOO')

    foo_options.add_argument('--foo-bar', action='store_true')
    foo_options.add_argument('--alist', action='append', default=[])
    options = argparser.parse_args(['--foobar', '--foo-bar'])
    assert options.foobar
    assert options.foo_bar


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,,test_parsing,"def test_parsing(argparser, foo_options, bar_options):
    options = argparser.parse_args(
        '--foo name --foolist gag --barfoo --unfoo'.split()
    )
    assert 'name' == options.foo
    assert ['gag'] == options.foolist
    assert options.barfoo
    assert not options.unfoo

    # Check the defaults now
    assert not options.foobar
    assert 'BAR' == options.bar
    assert [] == options.barlist

    # Reparse based on the already loaded options
    options = argparser.parse_args(
        '--bar beer --foolist any'.split(), options
    )
    assert 'name' == options.foo
    assert ['any'] == options.foolist
    assert not options.foobar
    assert not options.unfoo
    assert 'beer' == options.bar
    assert [] == options.barlist
    assert options.barfoo


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,,test_option_precedence,"def test_option_precedence(extended_parser):
    with rt.temp_runtime(fixtures.BUILTIN_CONFIG_FILE):
        with rt.temp_environment(variables={
                'RFM_TIMESTAMP': '%F',
                'RFM_NON_DEFAULT_CRAYPE': 'yes',
                'RFM_MODULES_PRELOAD': 'a,b,c',
                'RFM_CHECK_SEARCH_PATH': 'x:y:z'

        }):
            options = extended_parser.parse_args(
                ['--timestamp=%FT%T', '--nocolor']
            )
            assert options.recursive is None
            assert options.timestamp == '%FT%T'
            assert options.non_default_craype is True
            assert options.config_file is None
            assert options.prefix is None
            assert options.stagedir == '/foo'
            assert options.module == ['a', 'b', 'c']
            assert options.check_path == ['x', 'y', 'z']
            assert options.colorize is False


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,,test_option_with_config,"def test_option_with_config(extended_parser):
    with rt.temp_runtime(fixtures.BUILTIN_CONFIG_FILE):
        with rt.temp_environment(variables={
                'RFM_TIMESTAMP': '%F',
                'RFM_NON_DEFAULT_CRAYPE': 'yes',
                'RFM_MODULES_PRELOAD': 'a,b,c',
                'RFM_KEEP_STAGE_FILES': 'no'
        }):
            site_config = rt.runtime().site_config
            options = extended_parser.parse_args(
                ['--timestamp=%FT%T', '--nocolor']
            )
            options.update_config(site_config)
            assert site_config.get('general/0/check_search_recursive') is False
            assert site_config.get('general/0/timestamp_dirs') == '%FT%T'
            assert site_config.get('general/0/non_default_craype') is True
            assert site_config.get('systems/0/prefix') == '.'
            assert site_config.get('general/0/colorize') is False
            assert site_config.get('general/0/keep_stage_files') is False

            # Defaults specified in parser override those in configuration file
            assert site_config.get('systems/0/stagedir') == '/foo'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_argparser.py,,test_option_envvar_conversion_error,"def test_option_envvar_conversion_error(extended_parser):
    with rt.temp_runtime(fixtures.BUILTIN_CONFIG_FILE):
        with rt.temp_environment(variables={
                'RFM_NON_DEFAULT_CRAYPE': 'foo',
        }):
            site_config = rt.runtime().site_config
            options = extended_parser.parse_args(['--nocolor'])
            errors = options.update_config(site_config)
            assert len(errors) == 1
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_env,"def test_emit_from_env(self):
        self.build_system.makefile = 'Makefile_foo'
        self.build_system.srcdir = 'foodir'
        self.build_system.options = ['FOO=1']
        self.build_system.max_concurrency = 32
        expected = [
            'make -f Makefile_foo -C foodir -j 32 CC=""gcc"" CXX=""g++"" '
            'FC=""gfortran"" NVCC=""nvcc"" CPPFLAGS=""-DNDEBUG"" '
            'CFLAGS=""-Wall -std=c99"" CXXFLAGS=""-Wall -std=c++11"" '
            'FCFLAGS=""-Wall"" LDFLAGS=""-dynamic"" FOO=1'
        ]
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_buildsystem,"def test_emit_from_buildsystem(self):
        super().setup_base_buildsystem()
        self.build_system.makefile = 'Makefile_foo'
        self.build_system.srcdir = 'foodir'
        self.build_system.options = ['FOO=1']
        self.build_system.max_concurrency = None
        expected = [
            'make -f Makefile_foo -C foodir -j CC=""cc"" CXX=""CC"" FC=""ftn"" '
            'NVCC=""clang"" CPPFLAGS=""-DFOO"" CFLAGS=""-Wall -std=c99 -O3"" '
            'CXXFLAGS=""-Wall -std=c++11 -O3"" FCFLAGS=""-Wall -O3"" '
            'LDFLAGS=""-static"" FOO=1'
        ]
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_no_env_defaults,"def test_emit_no_env_defaults(self):
        self.build_system.flags_from_environ = False
        assert (['make -j 1'] ==
                self.build_system.emit_build_commands(self.environ))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_env,"def test_emit_from_env(self):
        self.build_system.srcdir = 'src'
        self.build_system.builddir = 'build/foo'
        self.build_system.config_opts = ['-DFOO=1']
        self.build_system.make_opts = ['install']
        self.build_system.max_concurrency = 32
        expected = [
            'cd src',
            'mkdir -p build/foo',
            'cd build/foo',
            'cmake -DCMAKE_C_COMPILER=""gcc"" -DCMAKE_CXX_COMPILER=""g++"" '
            '-DCMAKE_Fortran_COMPILER=""gfortran"" '
            '-DCMAKE_CUDA_COMPILER=""nvcc"" '
            '-DCMAKE_C_FLAGS=""-DNDEBUG -Wall -std=c99"" '
            '-DCMAKE_CXX_FLAGS=""-DNDEBUG -Wall -std=c++11"" '
            '-DCMAKE_Fortran_FLAGS=""-DNDEBUG -Wall"" '
            '-DCMAKE_EXE_LINKER_FLAGS=""-dynamic"" -DFOO=1 ../..',
            'make -j 32 install'

        ]
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_buildsystem,"def test_emit_from_buildsystem(self):
        super().setup_base_buildsystem()
        self.build_system.builddir = 'build/foo'
        self.build_system.config_opts = ['-DFOO=1']
        self.build_system.max_concurrency = None
        expected = [
            'mkdir -p build/foo',
            'cd build/foo',
            'cmake -DCMAKE_C_COMPILER=""cc"" -DCMAKE_CXX_COMPILER=""CC"" '
            '-DCMAKE_Fortran_COMPILER=""ftn"" -DCMAKE_CUDA_COMPILER=""clang"" '
            '-DCMAKE_C_FLAGS=""-DFOO -Wall -std=c99 -O3"" '
            '-DCMAKE_CXX_FLAGS=""-DFOO -Wall -std=c++11 -O3"" '
            '-DCMAKE_Fortran_FLAGS=""-DFOO -Wall -O3"" '
            '-DCMAKE_EXE_LINKER_FLAGS=""-static"" -DFOO=1 ../..',
            'make -j'

        ]
        print(self.build_system.emit_build_commands(self.environ))
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_no_env_defaults,"def test_emit_no_env_defaults(self):
        self.build_system.flags_from_environ = False
        assert (['cmake .', 'make -j 1'] ==
                self.build_system.emit_build_commands(self.environ))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_env,"def test_emit_from_env(self):
        self.build_system.srcdir = 'src'
        self.build_system.builddir = 'build/foo'
        self.build_system.config_opts = ['FOO=1']
        self.build_system.make_opts = ['check']
        self.build_system.max_concurrency = 32
        expected = [
            'cd src',
            'mkdir -p build/foo',
            'cd build/foo',
            '../../configure CC=""gcc"" CXX=""g++"" FC=""gfortran"" '
            'CPPFLAGS=""-DNDEBUG"" CFLAGS=""-Wall -std=c99"" '
            'CXXFLAGS=""-Wall -std=c++11"" FCFLAGS=""-Wall"" '
            'LDFLAGS=""-dynamic"" FOO=1',
            'make -j 32 check'

        ]
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_buildsystem,"def test_emit_from_buildsystem(self):
        super().setup_base_buildsystem()
        self.build_system.builddir = 'build/foo'
        self.build_system.config_opts = ['FOO=1']
        self.build_system.max_concurrency = None
        expected = [
            'mkdir -p build/foo',
            'cd build/foo',
            '../../configure CC=""cc"" CXX=""CC"" FC=""ftn"" '
            'CPPFLAGS=""-DFOO"" CFLAGS=""-Wall -std=c99 -O3"" '
            'CXXFLAGS=""-Wall -std=c++11 -O3"" FCFLAGS=""-Wall -O3"" '
            'LDFLAGS=""-static"" FOO=1',
            'make -j'

        ]
        print(self.build_system.emit_build_commands(self.environ))
        assert expected == self.build_system.emit_build_commands(self.environ)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_no_env_defaults,"def test_emit_no_env_defaults(self):
        self.build_system.flags_from_environ = False
        assert (['./configure', 'make -j 1'] ==
                self.build_system.emit_build_commands(self.environ))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_from_env,"def test_emit_from_env(self):
        self.build_system.include_path = ['foodir/include', 'bardir/include']
        self.build_system.executable = 'foo.e'
        for lang, comp in self.compilers.items():
            self.build_system.srcfile = self.files[lang]
            if lang == 'CUDA':
                flags = self.flags['C++']
            else:
                flags = self.flags[lang]

            ldflags = '-dynamic'
            expected = [
                '%s -DNDEBUG -I foodir/include -I bardir/include %s %s '
                '-o foo.e %s' % (comp, flags,
                                 self.build_system.srcfile, ldflags)
            ]
            assert (expected ==
                    self.build_system.emit_build_commands(self.environ))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_buildsystems.py,,test_emit_no_env,"def test_emit_no_env(self):
        super().setup_base_buildsystem()
        self.compilers = {
            'C': 'cc',
            'C++': 'CC',
            'Fortran': 'ftn',
            'CUDA': 'clang',
        }

        self.flags = {
            'C': '-Wall -std=c99 -O3',
            'C++': '-Wall -std=c++11 -O3',
            'Fortran': '-Wall -O3',
        }
        self.build_system.include_path = ['foodir/include', 'bardir/include']
        self.build_system.executable = 'foo.e'
        for lang, comp in self.compilers.items():
            self.build_system.srcfile = self.files[lang]
            if lang == 'CUDA':
                flags = self.flags['C++']
            else:
                flags = self.flags[lang]

            ldflags = '-static'
            expected = [
                '%s -DFOO -I foodir/include -I bardir/include %s %s '
                '-o foo.e %s' % (comp, flags,
                                 self.build_system.srcfile, ldflags)
            ]
            assert (expected ==
                    self.build_system.emit_build_commands(self.environ))
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_check_submit_success,"def test_check_submit_success(run_reframe, remote_exec_ctx):
    # This test will run on the auto-detected system
    partition, environ = remote_exec_ctx
    returncode, stdout, _ = run_reframe(
        config_file=fixtures.USER_CONFIG_FILE,
        local=False,
        system=partition.fullname,
        # Pick up the programming environment of the partition
        # Prepend ^ and append $ so as to much exactly the given name
        environs=[f'^{environ.name}$']
    )

    assert 'FAILED' not in stdout
    assert 'PASSED' in stdout

    # Assert that we have run only one test case
    assert 'Ran 1 test case(s)' in stdout
    assert 0 == returncode


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_unknown_system,"def test_unknown_system(run_reframe):
    returncode, stdout, stderr = run_reframe(
        action='list',
        system='foo',
        checkpath=[]
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 1


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_sanity_of_optconfig,"def test_sanity_of_optconfig(run_reframe):
    # Test the sanity of the command line options configuration
    returncode, *_ = run_reframe(
        action='help',
        checkpath=[]
    )
    assert returncode == 0


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_list_with_details,"def test_list_with_details(run_reframe):
    returncode, stdout, stderr = run_reframe(
        checkpath=['unittests/resources/checks/frontend_checks.py'],
        action='list_detailed'
    )
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_cli.py,,test_unload_module,"def test_unload_module(run_reframe, user_exec_ctx):
    # This test is mostly for ensuring coverage. `run_reframe()` restores
    # the current environment, so it is not easy to verify that the modules
    # are indeed unloaded. However, this functionality is tested elsewhere
    # more exhaustively.

    ms = rt.runtime().modules_system
    if ms.name == 'nomod':
        pytest.skip('no modules system found')

    with rt.module_use('unittests/modules'):
        ms.load_module('testmod_foo')
        returncode, stdout, stderr = run_reframe(
            more_options=['-u testmod_foo'],
            action='list'
        )
        ms.unload_module('testmod_foo')

    assert stdout != ''
    assert 'Traceback' not in stdout
    assert 'Traceback' not in stderr
    assert returncode == 0


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_color.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_color.py,,test_color_rgb,"def test_color_rgb(self):
        c = color.ColorRGB(128, 0, 34)
        assert 128 == c.r
        assert 0 == c.g
        assert 34 == c.b
        with pytest.raises(ValueError):
            color.ColorRGB(-1, 0, 34)

        with pytest.raises(ValueError):
            color.ColorRGB(0, -1, 34)

        with pytest.raises(ValueError):
            color.ColorRGB(0, 28, -1)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_color.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_color.py,,test_colorize,"def test_colorize(self):
        s = color.colorize('hello', color.RED, palette='ANSI')
        assert '\033' in s
        assert '[3' in s
        assert '1m' in s
        with pytest.raises(ValueError):
            color.colorize('hello', color.RED, palette='FOO')

        with pytest.raises(ValueError):
            color.colorize('hello', color.ColorRGB(128, 0, 34), palette='ANSI')
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_fallback,"def test_load_config_fallback(monkeypatch):
    monkeypatch.setattr(config, '_find_config_file', lambda: None)
    site_config = config.load_config()
    assert site_config.filename == '<builtin>'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_python,"def test_load_config_python():
    config.load_config('reframe/core/settings.py')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_python_old_syntax,"def test_load_config_python_old_syntax():
    with pytest.raises(ReframeDeprecationWarning):
        site_config = config.load_config(
            'unittests/resources/settings_old_syntax.py'
        )


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_convert_old_config,"def test_convert_old_config():
    converted = config.convert_old_config(
        'unittests/resources/settings_old_syntax.py'
    )
    site_config = config.load_config(converted)
    site_config.validate()
    assert len(site_config.get('systems')) == 3
    assert len(site_config.get('logging')) == 2

    site_config.select_subconfig('testsys')
    assert len(site_config.get('systems/0/partitions')) == 2
    assert len(site_config.get('modes')) == 1
    assert len(site_config['environments']) == 6


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_python_invalid,"def test_load_config_python_invalid(tmp_path):
    pyfile = tmp_path / 'settings.py'
    pyfile.write_text('x = 1\n')
    with pytest.raises(ConfigError,
                       match=r'not a valid Python configuration file'):
        config.load_config(pyfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_json,"def test_load_config_json(tmp_path):
    import reframe.core.settings as settings

    json_file = tmp_path / 'settings.json'
    json_file.write_text(json.dumps(settings.site_configuration, indent=4))
    site_config = config.load_config(json_file)
    assert site_config.filename == json_file


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_json_invalid_syntax,"def test_load_config_json_invalid_syntax(tmp_path):
    json_file = tmp_path / 'settings.json'
    json_file.write_text('foo')
    with pytest.raises(ConfigError, match=r'invalid JSON syntax'):
        config.load_config(json_file)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_unknown_file,"def test_load_config_unknown_file(tmp_path):
    with pytest.raises(OSError):
        config.load_config(tmp_path / 'foo.json')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_import_error,"def test_load_config_import_error():
    # If the configuration file is relative to ReFrame and ImportError is
    # raised, which should be wrapped inside ConfigError
    with pytest.raises(ConfigError,
                       match=r'could not load Python configuration file'):
        config.load_config('reframe/core/foo.py')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_load_config_unknown_filetype,"def test_load_config_unknown_filetype(tmp_path):
    import reframe.core.settings as settings

    json_file = tmp_path / 'foo'
    json_file.write_text(json.dumps(settings.site_configuration, indent=4))
    with pytest.raises(ConfigError, match=r'unknown configuration file type'):
        config.load_config(json_file)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_validate_fallback_config,"def test_validate_fallback_config():
    site_config = config.load_config('reframe/core/settings.py')
    site_config.validate()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_validate_unittest_config,"def test_validate_unittest_config():
    site_config = config.load_config('unittests/resources/settings.py')
    site_config.validate()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_validate_config_invalid_syntax,"def test_validate_config_invalid_syntax():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['systems'][0]['name'] = 123
    with pytest.raises(ConfigError,
                       match=r'could not validate configuration file'):
        site_config.validate()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_validate_config_duplicate_systems,"def test_validate_config_duplicate_systems():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['systems'].append(site_config['systems'][0])
    with pytest.raises(ConfigError,
                       match=r""system 'generic' already defined""):
        site_config.validate()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_validate_config_duplicate_partitions,"def test_validate_config_duplicate_partitions():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['systems'][0]['partitions'].append(
        site_config['systems'][0]['partitions'][0]
    )
    with pytest.raises(ConfigError,
                       match=r""partition 'default' already defined""):
        site_config.validate()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_autodetect,"def test_select_subconfig_autodetect():
    site_config = config.load_config('reframe/core/settings.py')
    site_config.select_subconfig()
    assert site_config['systems'][0]['name'] == 'generic'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_autodetect_failure,"def test_select_subconfig_autodetect_failure():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['systems'][0]['hostnames'] = ['$^']
    with pytest.raises(
            ConfigError,
            match=(r'could not find a configuration entry '
                   'for the current system')
    ):
        site_config.select_subconfig()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_unknown_system,"def test_select_subconfig_unknown_system():
    site_config = config.load_config('reframe/core/settings.py')
    with pytest.raises(
            ConfigError,
            match=(r'could not find a configuration entry '
                   'for the requested system')
    ):
        site_config.select_subconfig('foo')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_unknown_partition,"def test_select_subconfig_unknown_partition():
    site_config = config.load_config('reframe/core/settings.py')
    with pytest.raises(
            ConfigError,
            match=(r'could not find a configuration entry '
                   'for the requested system/partition')
    ):
        site_config.select_subconfig('generic:foo')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_no_logging,"def test_select_subconfig_no_logging():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['logging'][0]['target_systems'] = ['foo']
    with pytest.raises(ConfigError, match=r""section 'logging' not defined""):
        site_config.select_subconfig()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_no_environments,"def test_select_subconfig_no_environments():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['environments'][0]['target_systems'] = ['foo']
    with pytest.raises(ConfigError,
                       match=r""section 'environments' not defined""):
        site_config.select_subconfig()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_undefined_environment,"def test_select_subconfig_undefined_environment():
    site_config = config.load_config('reframe/core/settings.py')
    site_config['systems'][0]['partitions'][0]['environs'] += ['foo', 'bar']
    with pytest.raises(
            ConfigError,
            match=r""environments ('foo', 'bar')|('bar', 'foo') are not defined""
    ):
        site_config.select_subconfig()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig,"def test_select_subconfig():
    site_config = config.load_config('unittests/resources/settings.py')
    site_config.select_subconfig('testsys')
    assert len(site_config['systems']) == 1
    assert len(site_config['systems'][0]['partitions']) == 2
    assert len(site_config['modes']) == 1
    assert site_config.get('systems/0/name') == 'testsys'
    assert site_config.get('systems/0/descr') == 'Fake system for unit tests'
    assert site_config.get('systems/0/hostnames') == ['testsys']
    assert site_config.get('systems/0/prefix') == '.rfm_testing'
    assert (site_config.get('systems/0/resourcesdir') ==
            '.rfm_testing/resources')
    assert site_config.get('systems/0/modules') == ['foo/1.0']
    assert site_config.get('systems/0/variables') == [['FOO_CMD', 'foobar']]
    assert site_config.get('systems/0/modules_system') == 'nomod'
    assert site_config.get('systems/0/outputdir') == ''
    assert site_config.get('systems/0/stagedir') == ''
    assert len(site_config.get('systems/0/partitions')) == 2
    assert site_config.get('systems/0/partitions/@gpu/max_jobs') == 10
    assert site_config.get('modes/0/name') == 'unittest'
    assert site_config.get('modes/@unittest/name') == 'unittest'
    assert len(site_config.get('logging/0/handlers')) == 2
    assert len(site_config.get('logging/0/handlers_perflog')) == 1
    assert site_config.get('logging/0/handlers/0/timestamp') is False
    assert site_config.get('logging/0/handlers/0/level') == 'debug'
    assert site_config.get('logging/0/handlers/1/level') == 'info'
    assert site_config.get('logging/0/handlers/2/level') is None

    site_config.select_subconfig('testsys:login')
    assert len(site_config.get('systems/0/partitions')) == 1
    assert site_config.get('systems/0/partitions/0/scheduler') == 'local'
    assert site_config.get('systems/0/partitions/0/launcher') == 'local'
    assert (site_config.get('systems/0/partitions/0/environs') ==
            ['PrgEnv-cray', 'PrgEnv-gnu', 'builtin-gcc'])
    assert site_config.get('systems/0/partitions/0/descr') == 'Login nodes'
    assert site_config.get('systems/0/partitions/0/resources') == []
    assert site_config.get('systems/0/partitions/0/access') == []
    assert site_config.get('systems/0/partitions/0/container_platforms') == []
    assert site_config.get('systems/0/partitions/0/modules') == []
    assert site_config.get('systems/0/partitions/0/variables') == []
    assert site_config.get('systems/0/partitions/0/max_jobs') == 8
    assert len(site_config['environments']) == 6
    assert site_config.get('environments/@PrgEnv-gnu/cc') == 'gcc'
    assert site_config.get('environments/0/cxx') == 'g++'
    assert site_config.get('environments/@PrgEnv-cray/cc') == 'cc'
    assert site_config.get('environments/1/cxx') == 'CC'
    assert (site_config.get('environments/@PrgEnv-cray/modules') ==
            ['PrgEnv-cray'])
    assert len(site_config.get('general')) == 1
    assert site_config.get('general/0/check_search_path') == ['a:b']

    site_config.select_subconfig('testsys:gpu')
    assert site_config.get('systems/0/partitions/@gpu/scheduler') == 'slurm'
    assert site_config.get('systems/0/partitions/0/launcher') == 'srun'
    assert (site_config.get('systems/0/partitions/0/environs') ==
            ['PrgEnv-gnu', 'builtin-gcc'])
    assert site_config.get('systems/0/partitions/0/descr') == 'GPU partition'
    assert len(site_config.get('systems/0/partitions/0/resources')) == 2
    assert (site_config.get('systems/0/partitions/0/resources/@gpu/name') ==
            'gpu')
    assert site_config.get('systems/0/partitions/0/modules') == ['foogpu']
    assert (site_config.get('systems/0/partitions/0/variables') ==
            [['FOO_GPU', 'yes']])
    assert site_config.get('systems/0/partitions/0/max_jobs') == 10
    assert len(site_config['environments']) == 6
    assert site_config.get('environments/@PrgEnv-gnu/cc') == 'cc'
    assert site_config.get('environments/0/cxx') == 'CC'
    assert site_config.get('general/0/check_search_path') == ['c:d']

    # Test default values for non-existent name-addressable objects
    # See https://github.com/eth-cscs/reframe/issues/1339
    assert site_config.get('modes/@foo/options') == []
    assert site_config.get('modes/10/options') == []

    # Test inexistent options
    site_config.select_subconfig('testsys')
    assert site_config.get('systems/1/name') is None
    assert site_config.get('systems/0/partitions/gpu/name') is None
    assert site_config.get('environments/0/foo') is None

    # Test misplaced slashes or empty option
    assert site_config.get('systems/0/partitions/@gpu/launcher/') == 'srun'
    assert site_config.get('/systems/0/partitions') is None
    assert site_config.get('', 'foo') == 'foo'
    assert site_config.get(None, 'foo') == 'foo'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_select_subconfig_optional_section_absent,"def test_select_subconfig_optional_section_absent():
    site_config = config.load_config('reframe/core/settings.py')
    site_config.select_subconfig()
    assert site_config.get('general/0/colorize') is True
    assert site_config.get('general/verbose') == 0


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_sticky_options,"def test_sticky_options():
    site_config = config.load_config('unittests/resources/settings.py')
    site_config.select_subconfig('testsys:login')
    site_config.add_sticky_option('environments/cc', 'clang')
    site_config.add_sticky_option('modes/options', ['foo'])
    assert site_config.get('environments/@PrgEnv-gnu/cc') == 'clang'
    assert site_config.get('environments/@PrgEnv-cray/cc') == 'clang'
    assert site_config.get('environments/@PrgEnv-cray/cxx') == 'CC'
    assert site_config.get('modes/0/options') == ['foo']

    # Remove the sticky options
    site_config.remove_sticky_option('environments/cc')
    site_config.remove_sticky_option('modes/options')
    assert site_config.get('environments/@PrgEnv-gnu/cc') == 'gcc'
    assert site_config.get('environments/@PrgEnv-cray/cc') == 'cc'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_config.py,,test_system_create,"def test_system_create():
    site_config = config.load_config('unittests/resources/settings.py')
    site_config.select_subconfig('testsys:gpu')
    system = System.create(site_config)
    assert system.name == 'testsys'
    assert system.descr == 'Fake system for unit tests'
    assert system.hostnames == ['testsys']
    assert system.modules_system.name == 'nomod'
    assert system.preload_environ.modules == ['foo/1.0']
    assert system.preload_environ.variables == {'FOO_CMD': 'foobar'}
    assert system.prefix == '.rfm_testing'
    assert system.stagedir == ''
    assert system.outputdir == ''
    assert system.resourcesdir == '.rfm_testing/resources'
    assert len(system.partitions) == 1

    partition = system.partitions[0]
    assert partition.name == 'gpu'
    assert partition.fullname == 'testsys:gpu'
    assert partition.descr == 'GPU partition'
    assert partition.scheduler.registered_name == 'slurm'
    assert partition.launcher.registered_name == 'srun'
    assert partition.access == []
    assert partition.container_environs == {}
    assert partition.local_env.modules == ['foogpu']
    assert partition.local_env.variables == {'FOO_GPU': 'yes'}
    assert partition.max_jobs == 10
    assert len(partition.environs) == 2
    assert partition.environment('PrgEnv-gnu').cc == 'cc'
    assert partition.environment('PrgEnv-gnu').cflags == []

    # Check resource instantiation
    resource_spec = partition.get_resource('gpu', num_gpus_per_node=16)
    assert resource_spec == ['--gres=gpu:16']

    resources_spec = partition.get_resource(
        'datawarp', capacity='100GB', stagein_src='/foo'
    )
    assert resources_spec == ['#DW jobdw capacity=100GB',
                              '#DW stage_in source=/foo']
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_mount_points,"def test_mount_points(self):
        self.container_platform.image = 'image:tag'
        self.container_platform.mount_points = [('/path/one', '/one'),
                                                ('/path/two', '/two')]
        self.container_platform.commands = ['cmd1', 'cmd2']
        self.container_platform.workdir = '/stagedir'
        assert (self.expected_cmd_mount_points ==
                self.container_platform.launch_command())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_missing_image,"def test_missing_image(self):
        self.container_platform.commands = ['cmd']
        with pytest.raises(ContainerError):
            self.container_platform.validate()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_missing_commands,"def test_missing_commands(self):
        self.container_platform.image = 'image:tag'
        with pytest.raises(ContainerError):
            self.container_platform.validate()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_prepare_command,"def test_prepare_command(self):
        self.container_platform.image = 'image:tag'
        assert (self.expected_cmd_prepare ==
                self.container_platform.emit_prepare_commands())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_run_opts,"def test_run_opts(self):
        self.container_platform.image = 'image:tag'
        self.container_platform.commands = ['cmd']
        self.container_platform.mount_points = [('/path/one', '/one')]
        self.container_platform.workdir = '/stagedir'
        self.container_platform.options = ['--foo', '--bar']
        assert (self.expected_cmd_with_run_opts ==
                self.container_platform.launch_command())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_prepare_command,"def test_prepare_command(self):
        self.container_platform.image = 'load/library/image:tag'
        assert (self.expected_cmd_prepare ==
                self.container_platform.emit_prepare_commands())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_containers.py,,test_prepare_command,"def test_prepare_command(self):
        self.container_platform.image = 'load/library/image:tag'
        assert (self.expected_cmd_prepare ==
                self.container_platform.emit_prepare_commands())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_defer,"def test_defer(self):
        from reframe.core.deferrable import _DeferredExpression

        a = sn.defer(3)
        assert isinstance(a, _DeferredExpression)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_evaluate,"def test_evaluate(self):
        a = sn.defer(3)
        assert 3 == a.evaluate()
        assert 3 == sn.evaluate(a)
        assert 3 == sn.evaluate(3)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_implicit_eval,"def test_implicit_eval(self):
        # Call to bool() on a deferred expression triggers its immediate
        # evaluation.
        a = sn.defer(3)
        assert 3 == a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_str,"def test_str(self):
        assert '[1, 2]' == str(sn.defer([1, 2]))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_iter,"def test_iter(self):
        l = [1, 2, 3]
        dl = sn.defer(l)
        l.append(4)
        for i, e in enumerate(dl, start=1):
            assert i == e


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_kwargs_passing,"def test_kwargs_passing(self):
        expr = self.add(a=4, b=2) / 3
        assert 2 == expr


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_eq,"def test_eq(self):
        expr = self.value == 2
        self._value = 2
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ne,"def test_ne(self):
        expr = self.value != 0
        self._value = 2
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_lt,"def test_lt(self):
        expr = self.value < 0
        self._value = -1
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_le,"def test_le(self):
        expr = self.value <= 0
        assert expr

        self._value = -1
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_gt,"def test_gt(self):
        expr = self.value > 1
        self._value = 2
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ge,"def test_ge(self):
        expr = self.value >= 1
        self._value = 1
        assert expr

        self._value = 2
        assert expr


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_list_getitem,"def test_list_getitem(self):
        l = [1, 2]
        expr = sn.defer(l)[1] == 3
        l[1] = 3
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_list_contains,"def test_list_contains(self):
        l = [1, 2]
        assert 2 in sn.defer(l)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_set_contains,"def test_set_contains(self):
        s = {1, 2}
        assert 2 in sn.defer(s)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_dict_contains,"def test_dict_contains(self):
        d = {1: 'a', 2: 'b'}
        assert 2 in sn.defer(d)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_add,"def test_add(self):
        a = sn.defer(1)
        assert 4 == a + 3
        assert 4 == 3 + a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_sub,"def test_sub(self):
        a = sn.defer(1)
        assert -2 == a - 3
        assert 2 == 3 - a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_mul,"def test_mul(self):
        a = sn.defer(1)
        assert 3 == a * 3
        assert 3 == 3 * a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_truediv,"def test_truediv(self):
        a = sn.defer(3)
        assert 1.5 == a / 2
        assert 2 / 3 == 2 / a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_floordiv,"def test_floordiv(self):
        a = sn.defer(3)
        assert 1 == a // 2
        assert 0 == 2 // a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_mod,"def test_mod(self):
        a = sn.defer(3)
        assert 1 == a % 2
        assert 2 == 2 % a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_divmod,"def test_divmod(self):
        a = sn.defer(3)
        q, r = divmod(a, 2)
        assert 1 == q
        assert 1 == r

        # Test rdivmod here
        q, r = divmod(2, a)
        assert 0 == q
        assert 2 == r

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_pow,"def test_pow(self):
        a = sn.defer(3)
        assert 9 == a**2
        assert 8 == 2**a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_lshift,"def test_lshift(self):
        a = sn.defer(1)
        assert 4 == a << 2
        assert 2 << 1 == 2 << a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_rshift,"def test_rshift(self):
        a = sn.defer(8)
        assert 1 == a >> 3
        assert 3 >> 8 == 3 >> a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_and,"def test_and(self):
        a = sn.defer(7)
        assert 2 == a & 2
        assert 2 == 2 & a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_xor,"def test_xor(self):
        a = sn.defer(7)
        assert 0 == a ^ 7
        assert 0 == 7 ^ a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_or,"def test_or(self):
        a = sn.defer(2)
        assert 7 == a | 5
        assert 7 == 5 | a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_expr_chaining,"def test_expr_chaining(self):
        a = sn.defer(2)
        assert 64 == a**((a + 1) * a)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_neg,"def test_neg(self):
        a = sn.defer(3)
        assert -3 == -a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_pos,"def test_pos(self):
        a = sn.defer(3)
        assert +3 == +a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_abs,"def test_abs(self):
        a = sn.defer(-3)
        assert 3 == abs(a)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_invert,"def test_invert(self):
        a = sn.defer(3)
        assert ~3 == ~a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_iadd,"def test_iadd(self):
        v = V(1)
        dv = sn.defer(v)
        dv += V(3)
        sn.evaluate(dv)
        assert 4 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_isub,"def test_isub(self):
        v = V(1)
        dv = sn.defer(v)
        dv -= V(3)
        sn.evaluate(dv)
        assert -2 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_imul,"def test_imul(self):
        v = V(1)
        dv = sn.defer(v)
        dv *= V(3)
        sn.evaluate(dv)
        assert 3 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_itruediv,"def test_itruediv(self):
        v = V(3)
        dv = sn.defer(v)
        dv /= V(2)
        sn.evaluate(dv)
        assert 1.5 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ifloordiv,"def test_ifloordiv(self):
        v = V(3)
        dv = sn.defer(v)
        dv //= V(2)
        sn.evaluate(dv)
        assert 1 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_imod,"def test_imod(self):
        v = V(3)
        dv = sn.defer(v)
        dv %= V(2)
        sn.evaluate(dv)
        assert 1 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ipow,"def test_ipow(self):
        v = V(3)
        dv = sn.defer(v)
        dv **= V(2)
        sn.evaluate(dv)
        assert 9 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ilshift,"def test_ilshift(self):
        v = V(1)
        dv = sn.defer(v)
        dv <<= V(2)
        sn.evaluate(dv)
        assert 4 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_irshift,"def test_irshift(self):
        v = V(8)
        dv = sn.defer(v)
        dv >>= V(3)
        sn.evaluate(dv)
        assert 1 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_iand,"def test_iand(self):
        v = V(7)
        dv = sn.defer(v)
        dv &= V(2)
        sn.evaluate(dv)
        assert 2 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ixor,"def test_ixor(self):
        v = V(7)
        dv = sn.defer(v)
        dv ^= V(7)
        sn.evaluate(dv)
        assert 0 == v._value

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_deferrable.py,,test_ior,"def test_ior(self):
        v = V(2)
        dv = sn.defer(v)
        dv |= V(5)
        sn.evaluate(dv)
        assert 7 == v._value
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps,"def test_build_deps(loader, exec_ctx):
    checks = loader.load_all()
    cases = executors.generate_testcases(checks)

    # Test calling getdep() before having built the graph
    t = find_check('Test1_exact', checks)
    with pytest.raises(DependencyError):
        t.getdep('Test0', 'e0')

    # Build dependencies and continue testing
    deps = dependency.build_deps(cases)
    dependency.validate_deps(deps)

    # Check DEPEND_FULLY dependencies
    assert num_deps(deps, 'Test1_fully') == 8
    for p in ['sys0:p0', 'sys0:p1']:
        for e0 in ['e0', 'e1']:
            for e1 in ['e0', 'e1']:
                assert has_edge(deps,
                                Node('Test1_fully', p, e0),
                                Node('Test0', p, e1))

    # Check DEPEND_BY_ENV
    assert num_deps(deps, 'Test1_by_env') == 4
    assert num_deps(deps, 'Test1_default') == 4
    for p in ['sys0:p0', 'sys0:p1']:
        for e in ['e0', 'e1']:
            assert has_edge(deps,
                            Node('Test1_by_env', p, e),
                            Node('Test0', p, e))
            assert has_edge(deps,
                            Node('Test1_default', p, e),
                            Node('Test0', p, e))

    # Check DEPEND_EXACT
    assert num_deps(deps, 'Test1_exact') == 6
    for p in ['sys0:p0', 'sys0:p1']:
        assert has_edge(deps,
                        Node('Test1_exact', p, 'e0'),
                        Node('Test0', p, 'e0'))
        assert has_edge(deps,
                        Node('Test1_exact', p, 'e0'),
                        Node('Test0', p, 'e1'))
        assert has_edge(deps,
                        Node('Test1_exact', p, 'e1'),
                        Node('Test0', p, 'e1'))

    # Check in-degree of Test0

    # 2 from Test1_fully,
    # 1 from Test1_by_env,
    # 1 from Test1_exact,
    # 1 from Test1_default
    assert in_degree(deps, Node('Test0', 'sys0:p0', 'e0')) == 5
    assert in_degree(deps, Node('Test0', 'sys0:p1', 'e0')) == 5

    # 2 from Test1_fully,
    # 1 from Test1_by_env,
    # 2 from Test1_exact,
    # 1 from Test1_default
    assert in_degree(deps, Node('Test0', 'sys0:p0', 'e1')) == 6
    assert in_degree(deps, Node('Test0', 'sys0:p1', 'e1')) == 6

    # Pick a check to test getdep()
    check_e0 = find_case('Test1_exact', 'e0', cases).check
    check_e1 = find_case('Test1_exact', 'e1', cases).check

    with pytest.raises(DependencyError):
        check_e0.getdep('Test0')

    # Set the current environment
    check_e0._current_environ = Environment('e0')
    check_e1._current_environ = Environment('e1')

    assert check_e0.getdep('Test0', 'e0').name == 'Test0'
    assert check_e0.getdep('Test0', 'e1').name == 'Test0'
    assert check_e1.getdep('Test0', 'e1').name == 'Test0'
    with pytest.raises(DependencyError):
        check_e0.getdep('TestX', 'e0')

    with pytest.raises(DependencyError):
        check_e0.getdep('Test0', 'eX')

    with pytest.raises(DependencyError):
        check_e1.getdep('Test0', 'e0')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_build_deps_empty,"def test_build_deps_empty(exec_ctx):
    assert {} == dependency.build_deps([])


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_valid_deps,"def test_valid_deps(make_test, exec_ctx):
    #
    #       t0       +-->t5<--+
    #       ^        |        |
    #       |        |        |
    #   +-->t1<--+   t6       t7
    #   |        |            ^
    #   t2<------t3           |
    #   ^        ^            |
    #   |        |            t8
    #   +---t4---+
    #
    t0 = make_test('t0')
    t1 = make_test('t1')
    t2 = make_test('t2')
    t3 = make_test('t3')
    t4 = make_test('t4')
    t5 = make_test('t5')
    t6 = make_test('t6')
    t7 = make_test('t7')
    t8 = make_test('t8')
    t1.depends_on('t0')
    t2.depends_on('t1')
    t3.depends_on('t1')
    t3.depends_on('t2')
    t4.depends_on('t2')
    t4.depends_on('t3')
    t6.depends_on('t5')
    t7.depends_on('t5')
    t8.depends_on('t7')
    dependency.validate_deps(
        dependency.build_deps(
            executors.generate_testcases([t0, t1, t2, t3, t4,
                                          t5, t6, t7, t8])
        )
    )


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_dependencies.py,,test_validate_deps_empty,"def test_validate_deps_empty(exec_ctx):
    dependency.validate_deps({})


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_temp_environment,"def test_temp_environment(self):
        self.setup_modules_system()
        with rt.temp_environment(
                ['testmod_foo'], {'_var0': 'val2', '_var3': 'val3'}
        ) as environ:
            assert rt.is_env_loaded(environ)

        assert not rt.is_env_loaded(environ)

    @fixtures.switch_to_user_runtime
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_load_already_present,"def test_load_already_present(self):
        self.setup_modules_system()
        self.modules_system.load_module('testmod_boo')
        snapshot, _ = rt.loadenv(self.environ)
        snapshot.restore()
        assert self.modules_system.is_module_loaded('testmod_boo')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_equal,"def test_equal(self):
        env1 = env.Environment('env1', modules=['foo', 'bar'])
        env2 = env.Environment('env1', modules=['bar', 'foo'])
        assert env1 == env2
        assert env2 == env1

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_not_equal,"def test_not_equal(self):
        env1 = env.Environment('env1', modules=['foo', 'bar'])
        env2 = env.Environment('env2', modules=['foo', 'bar'])
        assert env1 != env2

        # Variables are ordered, because they might depend on each other
        env1 = env.Environment('env1', variables=[('a', 1), ('b', 2)])
        env2 = env.Environment('env1', variables=[('b', 2), ('a', 1)])
        assert env1 != env2

    @fixtures.switch_to_user_runtime
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_conflicting_environments,"def test_conflicting_environments(self):
        self.setup_modules_system()
        envfoo = env.Environment(name='envfoo',
                                 modules=['testmod_foo', 'testmod_boo'])
        envbar = env.Environment(name='envbar', modules=['testmod_bar'])
        rt.loadenv(envfoo, envbar)
        for m in envbar.modules:
            assert self.modules_system.is_module_loaded(m)

        for m in envfoo.modules:
            assert not self.modules_system.is_module_loaded(m)

    @fixtures.switch_to_user_runtime
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_conflict_environ_after_module_load,"def test_conflict_environ_after_module_load(self):
        self.setup_modules_system()
        self.modules_system.load_module('testmod_foo')
        envfoo = env.Environment(name='envfoo', modules=['testmod_foo'])
        snapshot, _ = rt.loadenv(envfoo)
        snapshot.restore()
        assert self.modules_system.is_module_loaded('testmod_foo')

    @fixtures.switch_to_user_runtime
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_conflict_environ_after_module_force_load,"def test_conflict_environ_after_module_force_load(self):
        self.setup_modules_system()
        self.modules_system.load_module('testmod_foo')
        envbar = env.Environment(name='envbar', modules=['testmod_bar'])
        snapshot, _ = rt.loadenv(envbar)
        snapshot.restore()
        assert self.modules_system.is_module_loaded('testmod_foo')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_emit_load_commands,"def test_emit_load_commands(self):
        self.setup_modules_system()
        ms = rt.runtime().modules_system
        expected_commands = [
            ms.emit_load_commands('testmod_foo')[0],
            'export _var0=val1',
            'export _var2=$_var0',
            'export _var3=${_var1}',
        ]
        assert expected_commands == rt.emit_loadenv_commands(self.environ)

    @fixtures.switch_to_user_runtime
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_environments.py,,test_emit_load_commands_with_confict,"def test_emit_load_commands_with_confict(self):
        self.setup_modules_system()

        # Load a conflicting module
        self.modules_system.load_module('testmod_bar')
        ms = rt.runtime().modules_system
        expected_commands = [
            ms.emit_unload_commands('testmod_bar')[0],
            ms.emit_load_commands('testmod_foo')[0],
            'export _var0=val1',
            'export _var2=$_var0',
            'export _var3=${_var1}',
        ]
        assert expected_commands == rt.emit_loadenv_commands(self.environ)
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_soft_error,"def test_soft_error(self):
        with pytest.raises(exc.ReframeError, match=r'random error'):
            raise_exc(exc.ReframeError('random error'))

        self.assert_args(exc.ReframeError, 'error msg')
        self.assert_args(exc.ReframeError, 'error msg', 'another arg')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_reraise_soft_error,"def test_reraise_soft_error(self):
        try:
            try:
                raise ValueError('random value error')
            except ValueError as e:
                # reraise as ReframeError
                raise exc.ReframeError('soft error') from e
        except exc.ReframeError as e:
            assert 'soft error: random value error' == str(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_fatal_error,"def test_fatal_error(self):
        try:
            raise exc.ReframeFatalError('fatal error')
        except Exception:
            pytest.fail('fatal error should not derive from Exception')
        except BaseException:
            pass

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_reraise_fatal_error,"def test_reraise_fatal_error(self):
        try:
            try:
                raise ValueError('random value error')
            except ValueError as e:
                # reraise as ReframeError
                raise exc.ReframeFatalError('fatal error') from e
        except exc.ReframeFatalError as e:
            assert 'fatal error: random value error' == str(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_error,"def test_spawned_process_error(self):
        exc_args = ('foo bar', 'partial output', 'error message', 1)
        e = exc.SpawnedProcessError(*exc_args)
        with pytest.raises(
                exc.ReframeError,
                match=(r""command 'foo bar' failed with exit code 1:\n""
                       r""=== STDOUT ===\n""
                       r'partial output\n'
                       r""=== STDERR ===\n""
                       r""error message"")
        ):
            raise_exc(e)

        assert exc_args == e.args

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_error_list_args,"def test_spawned_process_error_list_args(self):
        exc_args = (['foo', 'bar'], 'partial output', 'error message', 1)
        e = exc.SpawnedProcessError(*exc_args)
        with pytest.raises(
                exc.ReframeError,
                match=(r""command 'foo bar' failed with exit code 1:\n""
                       r""=== STDOUT ===\n""
                       r'partial output\n'
                       r""=== STDERR ===\n""
                       r""error message"")
        ):
            raise_exc(e)

        assert exc_args == e.args

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_error_nostdout,"def test_spawned_process_error_nostdout(self):
        exc_args = ('foo bar', '', 'error message', 1)
        e = exc.SpawnedProcessError(*exc_args)
        with pytest.raises(
                exc.ReframeError,
                match=(r""command 'foo bar' failed with exit code 1:\n""
                       r""=== STDOUT ===\n""
                       r""=== STDERR ===\n""
                       r""error message"")
        ):
            raise_exc(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_error_nostderr,"def test_spawned_process_error_nostderr(self):
        exc_args = ('foo bar', 'partial output', '', 1)
        e = exc.SpawnedProcessError(*exc_args)
        with pytest.raises(
                exc.ReframeError,
                match=(r""command 'foo bar' failed with exit code 1:\n""
                       r""=== STDOUT ===\n""
                       r'partial output\n'
                       r""=== STDERR ==="")
        ):
            raise_exc(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_timeout,"def test_spawned_process_timeout(self):
        exc_args = ('foo bar', 'partial output', 'partial error', 10)
        e = exc.SpawnedProcessTimeout(*exc_args)
        with pytest.raises(exc.ReframeError,
                           match=(r""command 'foo bar' timed out after 10s:\n""
                                  r""=== STDOUT ===\n""
                                  r'partial output\n'
                                  r""=== STDERR ===\n""
                                  r""partial error"")):
            raise_exc(e)

        assert exc_args == e.args

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_timeout_nostdout,"def test_spawned_process_timeout_nostdout(self):
        exc_args = ('foo bar', '', 'partial error', 10)
        e = exc.SpawnedProcessTimeout(*exc_args)
        with pytest.raises(exc.ReframeError,
                           match=(r""command 'foo bar' timed out after 10s:\n""
                                  r""=== STDOUT ===\n""
                                  r""=== STDERR ===\n""
                                  r""partial error"")):
            raise_exc(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_spawned_process_timeout_nostderr,"def test_spawned_process_timeout_nostderr(self):
        exc_args = ('foo bar', 'partial output', '', 10)
        e = exc.SpawnedProcessTimeout(*exc_args)
        with pytest.raises(exc.ReframeError,
                           match=(r""command 'foo bar' timed out after 10s:\n""
                                  r""=== STDOUT ===\n""
                                  r'partial output\n'
                                  r""=== STDERR ==="")):
            raise_exc(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_job_error,"def test_job_error(self):
        exc_args = ('some error',)
        e = exc.JobError(*exc_args, jobid=1234)
        assert 1234 == e.jobid
        with pytest.raises(exc.JobError, match=r'\[jobid=1234\] some error'):
            raise_exc(e)

        assert exc_args == e.args

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_reraise_job_error,"def test_reraise_job_error(self):
        try:
            try:
                raise ValueError('random value error')
            except ValueError as e:
                raise exc.JobError('some error', jobid=1234) from e
        except exc.JobError as e:
            assert '[jobid=1234] some error: random value error' == str(e)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_exceptions.py,,test_reraise_job_error_no_message,"def test_reraise_job_error_no_message(self):
        try:
            try:
                raise ValueError('random value error')
            except ValueError as e:
                raise exc.JobError(jobid=1234) from e
        except exc.JobError as e:
            assert '[jobid=1234]: random value error' == str(e)
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_not_set_attribute,"def test_not_set_attribute(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_copy_on_write_field,"def test_copy_on_write_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_constant_field,"def test_constant_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_typed_field,"def test_typed_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_timer_field,"def test_timer_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_proxy_field,"def test_proxy_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_deprecated_field,"def test_deprecated_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_absolute_path_field,"def test_absolute_path_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_fields.py,,test_scoped_dict_field,"def test_scoped_dict_field(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_launchers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_launchers.py,,test_run_command,"def test_run_command(self):
        emitted_command = self.run_command(self.job)
        assert self.expected_command == emitted_command

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_launchers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_launchers.py,,test_run_minimal_command,"def test_run_minimal_command(self):
        emitted_command = self.run_command(self.minimal_job)
        assert self.expected_minimal_command == emitted_command


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,,test_load_error,"def test_load_error(self):
        with pytest.raises(OSError):
            self.loader.load_from_file('unittests/resources/checks/foo.py')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_loader.py,,test_load_bad_required_version,"def test_load_bad_required_version(self):
        with pytest.raises(ValueError):
            self.loader.load_from_file('unittests/resources/checks_unlisted/'
                                       'no_required_version.py')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_valid_level,"def test_valid_level(basic_config):
    rlog.configure_logging(rt.runtime().site_config)
    assert rlog.INFO == rlog.getlogger().getEffectiveLevel()


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_handler_level,"def test_handler_level(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().info('foo')
    rlog.getlogger().warning('bar')
    assert not _found_in_logfile('foo', logfile)
    assert _found_in_logfile('bar', logfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_handler_append,"def test_handler_append(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('foo')
    _close_handlers()

    # Reload logger
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('bar')

    assert _found_in_logfile('foo', logfile)
    assert _found_in_logfile('bar', logfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_date_format,"def test_date_format(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('foo')
    assert _found_in_logfile(datetime.now().strftime('%F'), logfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_stream_handler,"def test_stream_handler(temp_runtime, logfile, stream):
    runtime = temp_runtime({
        'level': 'info',
        'handlers': [{'type': 'stream', 'name': stream}],
        'handlers_perflog': []
    })
    next(runtime)
    rlog.configure_logging(rt.runtime().site_config)
    raw_logger = rlog.getlogger().logger
    assert len(raw_logger.handlers) == 1
    handler = raw_logger.handlers[0]

    assert isinstance(handler, logging.StreamHandler)
    stream = sys.stdout if stream == 'stdout' else sys.stderr
    assert handler.stream == stream


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_multiple_handlers,"def test_multiple_handlers(temp_runtime, logfile):
    runtime = temp_runtime({
        'level': 'info',
        'handlers': [
            {'type': 'stream', 'name': 'stderr'},
            {'type': 'file', 'name': logfile},
            {'type': 'syslog', 'address': '/dev/log'}
        ],
        'handlers_perflog': []
    })
    next(runtime)
    rlog.configure_logging(rt.runtime().site_config)
    assert len(rlog.getlogger().logger.handlers) == 3


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_file_handler_timestamp,"def test_file_handler_timestamp(temp_runtime, logfile):
    runtime = temp_runtime({
        'level': 'info',
        'handlers': [
            {
                'type': 'file',
                'name': logfile,
                'level': 'warning',
                'format': '[%(asctime)s] %(levelname)s: '
                '%(check_name)s: %(message)s',
                'datefmt': '%F',
                'timestamp': '%F',
                'append': True,
            },
        ],
        'handlers_perflog': []
    })
    next(runtime)
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().warning('foo')
    base, ext = os.path.splitext(logfile)
    filename = f""{base}_{datetime.now().strftime('%F')}.log""
    assert os.path.exists(filename)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_syslog_handler,"def test_syslog_handler(temp_runtime):
    import platform

    if platform.system() == 'Linux':
        addr = '/dev/log'
    elif platform.system() == 'Darwin':
        addr = '/var/run/syslog'
    else:
        pytest.skip('unknown system platform')

    runtime = temp_runtime({
        'level': 'info',
        'handlers': [{'type': 'syslog', 'address': addr}],
        'handlers_perflog': []
    })
    next(runtime)
    rlog.configure_logging(rt.runtime().site_config)
    rlog.getlogger().info('foo')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_syslog_handler_tcp_port_noint,"def test_syslog_handler_tcp_port_noint(temp_runtime):
    runtime = temp_runtime({
        'level': 'info',
        'handlers': [{
            'type': 'syslog',
            'address': 'foo.server.org:bar',
        }],
        'handlers_perflog': []
    })
    next(runtime)
    with pytest.raises(ConfigError, match=""not an integer: 'bar'""):
        rlog.configure_logging(rt.runtime().site_config)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_global_noconfig,"def test_global_noconfig():
    # This is to test the case when no configuration is set, but since the
    # order the unit tests are invoked is arbitrary, we emulate the
    # 'no-config' state by passing `None` to `configure_logging()`

    rlog.configure_logging(None)
    assert rlog.getlogger() is rlog.null_logger


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_global_config,"def test_global_config(basic_config):
    rlog.configure_logging(rt.runtime().site_config)
    assert rlog.getlogger() is not rlog.null_logger


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_logging_context,"def test_logging_context(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    with rlog.logging_context() as logger:
        assert logger is rlog.getlogger()
        assert logger is not rlog.null_logger
        rlog.getlogger().error('error from context')

    assert _found_in_logfile('reframe', logfile)
    assert _found_in_logfile('error from context', logfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_logging_context_check,"def test_logging_context_check(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    with rlog.logging_context(check=_FakeCheck()):
        rlog.getlogger().error('error from context')

    rlog.getlogger().error('error outside context')
    assert _found_in_logfile(f'_FakeCheck: {sys.argv[0]}: error from context',
                             logfile)
    assert _found_in_logfile(f'reframe: {sys.argv[0]}: error outside context',
                             logfile)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_logging.py,,test_logging_context_error,"def test_logging_context_error(basic_config, logfile):
    rlog.configure_logging(rt.runtime().site_config)
    try:
        with rlog.logging_context(level=rlog.ERROR):
            raise ReframeError('error from context')

        pytest.fail('logging_context did not propagate the exception')
    except ReframeError:
        pass

    assert _found_in_logfile('reframe', logfile)
    assert _found_in_logfile('error from context', logfile)
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_searchpath,"def test_searchpath(self):
        assert TEST_MODULES in self.modules_system.searchpath

        self.modules_system.searchpath_remove(TEST_MODULES)
        assert TEST_MODULES not in self.modules_system.searchpath

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_load,"def test_module_load(self):
        with pytest.raises(EnvironError):
            self.modules_system.load_module('foo')

        assert not self.modules_system.is_module_loaded('foo')
        assert 'foo' not in self.modules_system.loaded_modules()

        self.modules_system.load_module('testmod_foo')
        assert self.modules_system.is_module_loaded('testmod_foo')
        assert 'testmod_foo' in self.modules_system.loaded_modules()
        assert 'TESTMOD_FOO' in os.environ

        self.modules_system.unload_module('testmod_foo')
        assert not self.modules_system.is_module_loaded('testmod_foo')
        assert 'testmod_foo' not in self.modules_system.loaded_modules()
        assert 'TESTMOD_FOO' not in os.environ

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_load_force,"def test_module_load_force(self):
        self.modules_system.load_module('testmod_foo')

        unloaded = self.modules_system.load_module('testmod_foo', force=True)
        assert 0 == len(unloaded)
        assert self.modules_system.is_module_loaded('testmod_foo')

        unloaded = self.modules_system.load_module('testmod_bar', force=True)
        assert self.modules_system.is_module_loaded('testmod_bar')
        assert not self.modules_system.is_module_loaded('testmod_foo')
        assert 'testmod_foo' in unloaded
        assert 'TESTMOD_BAR' in os.environ

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_unload_all,"def test_module_unload_all(self):
        self.modules_system.load_module('testmod_base')
        self.modules_system.unload_all()
        assert 0 == len(self.modules_system.loaded_modules())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_list,"def test_module_list(self):
        self.modules_system.load_module('testmod_foo')
        assert 'testmod_foo' in self.modules_system.loaded_modules()
        self.modules_system.unload_module('testmod_foo')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_conflict_list,"def test_module_conflict_list(self):
        conflict_list = self.modules_system.conflicted_modules('testmod_bar')
        assert 'testmod_foo' in conflict_list
        assert 'testmod_boo' in conflict_list

    @abc.abstractmethod
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_emit_load_commands,"def test_emit_load_commands(self):
        self.modules_system.module_map = {
            'm0': ['m1', 'm2']
        }
        assert ([self.expected_load_instr('foo')] ==
                self.modules_system.emit_load_commands('foo'))
        assert ([self.expected_load_instr('foo/1.2')] ==
                self.modules_system.emit_load_commands('foo/1.2'))
        assert ([self.expected_load_instr('m1'),
                 self.expected_load_instr('m2')] ==
                self.modules_system.emit_load_commands('m0'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_emit_unload_commands,"def test_emit_unload_commands(self):
        self.modules_system.module_map = {
            'm0': ['m1', 'm2']
        }
        assert ([self.expected_unload_instr('foo')] ==
                self.modules_system.emit_unload_commands('foo'))
        assert ([self.expected_unload_instr('foo/1.2')] ==
                self.modules_system.emit_unload_commands('foo/1.2'))
        assert ([self.expected_unload_instr('m2'),
                 self.expected_unload_instr('m1')] ==
                self.modules_system.emit_unload_commands('m0'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_searchpath,"def test_searchpath(self):
        # Simply test that no exceptions are thrown
        self.modules_system.searchpath_remove(TEST_MODULES)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_load,"def test_module_load(self):
        self.modules_system.load_module('foo')
        self.modules_system.unload_module('foo')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_load_force,"def test_module_load_force(self):
        self.modules_system.load_module('foo', force=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_unload_all,"def test_module_unload_all(self):
        self.modules_system.unload_all()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_list,"def test_module_list(self):
        assert 0 == len(self.modules_system.loaded_modules())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_module_conflict_list,"def test_module_conflict_list(self):
        assert 0 == len(self.modules_system.conflicted_modules('foo'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_invalid_initialization,"def test_invalid_initialization(self):
        with pytest.raises(ValueError):
            modules.Module('')

        with pytest.raises(ValueError):
            modules.Module(' ')

        with pytest.raises(TypeError):
            modules.Module(None)

        with pytest.raises(TypeError):
            modules.Module(23)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_name_version,"def test_name_version(self):
        assert self.module.name == 'foo'
        assert self.module.version == '1.2'

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_equal,"def test_equal(self):
        assert modules.Module('foo') == modules.Module('foo')
        assert modules.Module('foo/1.2') == modules.Module('foo/1.2')
        assert modules.Module('foo') == modules.Module('foo/1.2')
        assert hash(modules.Module('foo')) == hash(modules.Module('foo'))
        assert (hash(modules.Module('foo/1.2')) ==
                hash(modules.Module('foo/1.2')))
        assert hash(modules.Module('foo')) == hash(modules.Module('foo/1.2'))
        assert modules.Module('foo/1.2') != modules.Module('foo/1.3')
        assert modules.Module('foo') != modules.Module('bar')
        assert modules.Module('foo') != modules.Module('foobar')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_simple,"def test_mapping_simple(self):
        #
        # m0 -> m1
        #
        self.modules_system.module_map = {'m0': ['m1']}
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert ['m1'] == self.modules_system.backend.load_seq

        # Unload module
        self.modules_system.unload_module('m1')
        assert not self.modules_system.is_module_loaded('m0')
        assert not self.modules_system.is_module_loaded('m1')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_chain,"def test_mapping_chain(self):
        #
        # m0 -> m1 -> m2
        #
        self.modules_system.module_map = {
            'm0': ['m1'],
            'm1': ['m2']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert ['m2'] == self.modules_system.backend.load_seq

        # Unload module
        self.modules_system.unload_module('m1')
        assert not self.modules_system.is_module_loaded('m0')
        assert not self.modules_system.is_module_loaded('m1')
        assert not self.modules_system.is_module_loaded('m2')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_n_to_one,"def test_mapping_n_to_one(self):
        #
        # m0 -> m2 <- m1
        #
        self.modules_system.module_map = {
            'm0': ['m2'],
            'm1': ['m2']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert ['m2'] == self.modules_system.backend.load_seq

        # Unload module
        self.modules_system.unload_module('m0')
        assert not self.modules_system.is_module_loaded('m0')
        assert not self.modules_system.is_module_loaded('m1')
        assert not self.modules_system.is_module_loaded('m2')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_one_to_n,"def test_mapping_one_to_n(self):
        #
        # m2 <- m0 -> m1
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert ['m1', 'm2'] == self.modules_system.backend.load_seq

        # m0 is loaded only if m1 and m2 are.
        self.modules_system.unload_module('m2')
        assert not self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_deep_dfs_order,"def test_mapping_deep_dfs_order(self):
        #
        #    -- > m1 ---- > m3
        #   /       \
        # m0         \
        #   \         \
        #    -- > m2   -- > m4
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
            'm1': ['m3', 'm4']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert self.modules_system.is_module_loaded('m3')
        assert self.modules_system.is_module_loaded('m4')
        assert ['m3', 'm4', 'm2'] == self.modules_system.backend.load_seq

        # Test unloading
        self.modules_system.unload_module('m2')
        assert not self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert not self.modules_system.is_module_loaded('m2')
        assert self.modules_system.is_module_loaded('m3')
        assert self.modules_system.is_module_loaded('m4')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_deep_dfs_unload_order,"def test_mapping_deep_dfs_unload_order(self):
        #
        #    -- > m1 ---- > m3
        #   /       \
        # m0         \
        #   \         \
        #    -- > m2   -- > m4
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
            'm1': ['m3', 'm4']
        }
        self.modules_system.load_module('m0')
        self.modules_system.unload_module('m0')
        assert ['m2', 'm4', 'm3'] == self.modules_system.backend.unload_seq

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_multiple_paths,"def test_mapping_multiple_paths(self):
        #
        #    -- > m1
        #   /     ^
        # m0      |
        #   \     |
        #    -- > m2
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
            'm2': ['m1'],
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert ['m1'] == self.modules_system.backend.load_seq

        # Test unloading
        self.modules_system.unload_module('m2')
        assert not self.modules_system.is_module_loaded('m0')
        assert not self.modules_system.is_module_loaded('m1')
        assert not self.modules_system.is_module_loaded('m2')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_deep_multiple_paths,"def test_mapping_deep_multiple_paths(self):
        #
        #    -- > m1 ---- > m3
        #   /     ^ \
        # m0      |  \
        #   \     |   \
        #    -- > m2   -- > m4
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
            'm1': ['m3', 'm4'],
            'm2': ['m1']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert self.modules_system.is_module_loaded('m3')
        assert self.modules_system.is_module_loaded('m4')
        assert ['m3', 'm4'] == self.modules_system.backend.load_seq

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_cycle_simple,"def test_mapping_cycle_simple(self):
        #
        # m0 -> m1 -> m0
        #
        self.modules_system.module_map = {
            'm0': ['m1'],
            'm1': ['m0'],
        }
        with pytest.raises(EnvironError):
            self.modules_system.load_module('m0')

        with pytest.raises(EnvironError):
            self.modules_system.load_module('m1')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_single_module_self_loop,"def test_mapping_single_module_self_loop(self):
        #
        # m0 -> m0
        #
        self.modules_system.module_map = {
            'm0': ['m0'],
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert ['m0'] == self.modules_system.backend.load_seq

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_deep_cycle,"def test_mapping_deep_cycle(self):
        #
        #    -- > m1 ---- > m3
        #   /     ^         |
        # m0      |         |
        #   \     |         .
        #    -- > m2 < ---- m4
        #
        self.modules_system.module_map = {
            'm0': ['m1', 'm2'],
            'm1': ['m3'],
            'm2': ['m1'],
            'm3': ['m4'],
            'm4': ['m2']
        }
        with pytest.raises(EnvironError, match='m0->m1->m3->m4->m2->m1'):
            self.modules_system.load_module('m0')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_simple,"def test_mapping_from_file_simple(self):
        with self.mapping_file:
            self.mapping_file.write('m1:m2  m3   m3\n'
                                    'm2 : m4 \n'
                                    ' #m5: m6\n'
                                    '\n'
                                    ' m2: m7 m8\n'
                                    'm9: m10 # Inline comment')

        reference_map = {
            'm1': ['m2', 'm3'],
            'm2': ['m7', 'm8'],
            'm9': ['m10']
        }
        self.modules_system.load_mapping_from_file(self.mapping_file.name)
        assert reference_map == self.modules_system.module_map

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_missing_key_separator,"def test_mapping_from_file_missing_key_separator(self):
        with self.mapping_file:
            self.mapping_file.write('m1 m2')

        with pytest.raises(ConfigError):
            self.modules_system.load_mapping_from_file(self.mapping_file.name)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_empty_value,"def test_mapping_from_file_empty_value(self):
        with self.mapping_file:
            self.mapping_file.write('m1: # m2')

        with pytest.raises(ConfigError):
            self.modules_system.load_mapping_from_file(self.mapping_file.name)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_multiple_key_separators,"def test_mapping_from_file_multiple_key_separators(self):
        with self.mapping_file:
            self.mapping_file.write('m1 : m2 : m3')

        with pytest.raises(ConfigError):
            self.modules_system.load_mapping_from_file(self.mapping_file.name)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_empty_key,"def test_mapping_from_file_empty_key(self):
        with self.mapping_file:
            self.mapping_file.write(' :  m2')

        with pytest.raises(ConfigError):
            self.modules_system.load_mapping_from_file(self.mapping_file.name)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_from_file_missing_file,"def test_mapping_from_file_missing_file(self):
        with pytest.raises(OSError):
            self.modules_system.load_mapping_from_file('foo')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_with_self_loop,"def test_mapping_with_self_loop(self):
        self.modules_system.module_map = {
            'm0': ['m1', 'm0', 'm2'],
            'm1': ['m4', 'm3']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert self.modules_system.is_module_loaded('m3')
        assert self.modules_system.is_module_loaded('m4')
        assert ['m4', 'm3', 'm0', 'm2'] == self.modules_system.backend.load_seq

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_modules.py,,test_mapping_with_self_loop_and_duplicate_modules,"def test_mapping_with_self_loop_and_duplicate_modules(self):
        self.modules_system.module_map = {
            'm0': ['m0', 'm0', 'm1', 'm1'],
            'm1': ['m2', 'm3']
        }
        self.modules_system.load_module('m0')
        assert self.modules_system.is_module_loaded('m0')
        assert self.modules_system.is_module_loaded('m1')
        assert self.modules_system.is_module_loaded('m2')
        assert self.modules_system.is_module_loaded('m3')
        assert ['m0', 'm2', 'm3'] == self.modules_system.backend.load_seq
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,testsys_system,"@pytest.fixture
def testsys_system(temp_runtime):
    yield from temp_runtime(fixtures.TEST_CONFIG_FILE, 'testsys')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck,"def test_hellocheck(hellotest, remote_exec_ctx):
    _run(hellotest, *remote_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_hellocheck_make,"def test_hellocheck_make(remote_exec_ctx):
    test = load_test('unittests/resources/checks/hellocheck_make.py')[0]
    _run(test, *remote_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_run_only_sanity,"def test_run_only_sanity(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_run_only_no_srcdir,"def test_run_only_no_srcdir(local_exec_ctx):
    @fixtures.custom_prefix('foo/bar/')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_compile_only_failure,"def test_compile_only_failure(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_compile_only_warning,"def test_compile_only_warning(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcesdir_none,"def test_sourcesdir_none(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcesdir_build_system,"def test_sourcesdir_build_system(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcesdir_none_generated_sources,"def test_sourcesdir_none_generated_sources(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcesdir_none_compile_only,"def test_sourcesdir_none_compile_only(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcesdir_none_run_only,"def test_sourcesdir_none_run_only(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcepath_abs,"def test_sourcepath_abs(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sourcepath_upref,"def test_sourcepath_upref(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_setup_hooks,"def test_setup_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_run_hooks,"def test_run_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_stacked_hooks,"def test_stacked_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_inherited_hooks,"def test_inherited_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_overriden_hooks,"def test_overriden_hooks(local_exec_ctx):
    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_require_deps,"def test_require_deps(local_exec_ctx):
    import reframe.frontend.dependency as dependency
    import reframe.frontend.executors as executors

    @fixtures.custom_prefix('unittests/resources/checks')
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sanity_success,"def test_sanity_success(dummytest, sanity_file, perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sanity_failure,"def test_sanity_failure(dummytest, sanity_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = failure\n')
    with pytest.raises(SanityError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx, skip_perf=True)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sanity_failure_noassert,"def test_sanity_failure_noassert(dummytest, sanity_file, dummy_gpu_exec_ctx):
    dummytest.sanity_patterns = sn.findall(r'result = success', sanity_file)
    sanity_file.write_text('result = failure\n')
    with pytest.raises(SanityError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx, skip_perf=True)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sanity_multiple_patterns,"def test_sanity_multiple_patterns(dummytest, sanity_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result1 = success\n'
                           'result2 = success\n')

    # Simulate a pure sanity test; reset the perf_patterns
    dummytest.perf_patterns = None
    dummytest.sanity_patterns = sn.assert_eq(
        sn.count(sn.findall(r'result\d = success', sanity_file)), 2
    )
    _run_sanity(dummytest, *dummy_gpu_exec_ctx, skip_perf=True)

    # Require more patterns to be present
    dummytest.sanity_patterns = sn.assert_eq(
        sn.count(sn.findall(r'result\d = success', sanity_file)), 3
    )
    with pytest.raises(SanityError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx, skip_perf=True)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_sanity_multiple_files,"def test_sanity_multiple_files(dummytest, tmp_path, dummy_gpu_exec_ctx):
    file0 = tmp_path / 'out1.txt'
    file1 = tmp_path / 'out2.txt'
    file0.write_text('result = success\n')
    file1.write_text('result = success\n')
    dummytest.sanity_patterns = sn.all([
        sn.assert_found(r'result = success', file0),
        sn.assert_found(r'result = success', file1)
    ])
    _run_sanity(dummytest, *dummy_gpu_exec_ctx, skip_perf=True)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_performance_failure,"def test_performance_failure(dummytest, sanity_file,
                             perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.0\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    with pytest.raises(PerformanceError):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_unknown_system,"def test_reference_unknown_system(dummytest, sanity_file,
                                  perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        'testsys:login': {
            'value1': (1.4, -0.1, 0.1, None),
            'value3': (3.1, -0.1, 0.1, None),
        },
        'testsys:login2': {
            'value2': (1.7, -0.1, 0.1, None)
        }
    }
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_empty,"def test_reference_empty(dummytest, sanity_file,
                         perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {}
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_reference_tag_resolution,"def test_reference_tag_resolution(dummytest, sanity_file,
                                  perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = 1.8\n'
                         'perf3 = 3.3\n')
    dummytest.reference = {
        'testsys': {
            'value1': (1.4, -0.1, 0.1, None),
            'value2': (1.7, -0.1, 0.1, None),
        },
        '*': {
            'value3': (3.1, -0.1, 0.1, None),
        }
    }
    _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_performance_invalid_value,"def test_performance_invalid_value(dummytest, sanity_file,
                                   perf_file, dummy_gpu_exec_ctx):
    sanity_file.write_text('result = success\n')
    perf_file.write_text('perf1 = 1.3\n'
                         'perf2 = foo\n'
                         'perf3 = 3.3\n')
    dummytest.perf_patterns = {
        'value1': sn.extractsingle(r'perf1 = (\S+)', perf_file, 1, float),
        'value2': sn.extractsingle(r'perf2 = (\S+)', perf_file, 1, str),
        'value3': sn.extractsingle(r'perf3 = (\S+)', perf_file, 1, float)
    }
    with pytest.raises(SanityError, match='not a number'):
        _run_sanity(dummytest, *dummy_gpu_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_with_singularity,"def test_with_singularity(container_test, container_remote_exec_ctx):
    cle_version = _cray_cle_version()
    if cle_version is not None and cle_version.startswith('6.0'):
        pytest.skip('test not supported on Cray CLE6')

    _run(container_test('Singularity', 'docker://ubuntu:18.04'),
         *container_remote_exec_ctx('Singularity'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_with_shifter,"def test_with_shifter(container_test, container_remote_exec_ctx):
    _run(container_test('Shifter', 'ubuntu:18.04'),
         *container_remote_exec_ctx('Shifter'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_with_sarus,"def test_with_sarus(container_test, container_remote_exec_ctx):
    _run(container_test('Sarus', 'ubuntu:18.04'),
         *container_remote_exec_ctx('Sarus'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_with_docker,"def test_with_docker(container_test, container_local_exec_ctx):
    _run(container_test('Docker', 'ubuntu:18.04'),
         *container_local_exec_ctx('Docker'))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_unknown_container_platform,"def test_unknown_container_platform(container_test, local_exec_ctx):
    with pytest.raises(ValueError):
        _run(container_test('foo', 'ubuntu:18.04'), *local_exec_ctx)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_pipeline.py,,test_not_configured_container_platform,"def test_not_configured_container_platform(container_test, local_exec_ctx):
    partition, environ = local_exec_ctx
    platform = None
    for cp in ['Docker', 'Singularity', 'Sarus', 'ShifterNG']:
        if cp not in partition.container_environs.keys():
            platform = cp
            break

    if platform is None:
        pytest.skip('cannot find a supported platform that is not configured')

    with pytest.raises(PipelineError):
        _run(container_test(platform, 'ubuntu:18.04'), *local_exec_ctx)
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_force_local_execution,"def test_force_local_execution(make_runner, make_cases, common_exec_ctx):
    runner = make_runner()
    runner.policy.force_local = True
    runner.runall(make_cases([HelloTest()]))
    assert_runall(runner)
    stats = runner.stats
    for t in stats.tasks():
        assert t.check.local


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_system_exit_within_test,"def test_system_exit_within_test(make_runner, make_cases, common_exec_ctx):
    # This should not raise and should not exit
    runner = make_runner()
    runner.runall(make_cases([SystemExitCheck()]))
    stats = runner.stats
    assert 1 == len(stats.failures())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_in_wait_with_limited_concurrency,"def test_kbd_interrupt_in_wait_with_limited_concurrency(
        async_runner, make_cases, make_async_exec_ctx):
    # The general idea for this test is to allow enough time for all the
    # four checks to be submitted and at the same time we need the
    # KeyboardInterruptCheck to finish first (the corresponding wait should
    # trigger the failure), so as to make the framework kill the remaining
    # three.
    ctx = make_async_exec_ctx(2)
    next(ctx)

    runner, _ = async_runner
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([
            KeyboardInterruptCheck(), SleepCheck(10),
            SleepCheck(10), SleepCheck(10)
        ]))
        # FIXME: Dump everything in case Github #1369 appears
        print(util.repr(runner))
        print(runner.stats.failure_report())
        print(util.repr(rt.runtime().site_config))

    assert_interrupted_run(runner)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_in_setup_with_concurrency,"def test_kbd_interrupt_in_setup_with_concurrency(async_runner, make_cases,
                                                 make_async_exec_ctx):
    ctx = make_async_exec_ctx(4)
    next(ctx)

    runner, _ = async_runner
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([
            SleepCheck(1), SleepCheck(1), SleepCheck(1),
            KeyboardInterruptCheck(phase='setup')
        ]))

    assert_interrupted_run(runner)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_kbd_interrupt_in_setup_with_limited_concurrency,"def test_kbd_interrupt_in_setup_with_limited_concurrency(
        async_runner, make_cases, make_async_exec_ctx):
    ctx = make_async_exec_ctx(2)
    next(ctx)

    runner, _ = async_runner
    with pytest.raises(KeyboardInterrupt):
        runner.runall(make_cases([
            SleepCheck(1), SleepCheck(1), SleepCheck(1),
            KeyboardInterruptCheck(phase='setup')
        ]))

    assert_interrupted_run(runner)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_poll_fails_main_loop,"def test_poll_fails_main_loop(async_runner, make_cases,
                              make_async_exec_ctx):
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, _ = async_runner
    num_checks = 3
    runner.runall(make_cases([SleepCheckPollFail(10)
                              for i in range(num_checks)]))

    stats = runner.stats
    assert num_checks == stats.num_cases()
    assert_runall(runner)
    assert num_checks == len(stats.failures())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_poll_fails_busy_loop,"def test_poll_fails_busy_loop(async_runner, make_cases,
                              make_async_exec_ctx):
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, _ = async_runner
    num_checks = 3
    runner.runall(make_cases([SleepCheckPollFailLate(1/i)
                              for i in range(1, num_checks+1)]))

    stats = runner.stats
    assert num_checks == stats.num_cases()
    assert_runall(runner)
    assert num_checks == len(stats.failures())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_compile_fail_reschedule_main_loop,"def test_compile_fail_reschedule_main_loop(async_runner, make_cases,
                                           make_async_exec_ctx):
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, _ = async_runner
    num_checks = 2
    runner.runall(make_cases([SleepCheckPollFail(.1), CompileFailureCheck()]))

    stats = runner.stats
    assert num_checks == stats.num_cases()
    assert_runall(runner)
    assert num_checks == len(stats.failures())


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_policies.py,,test_compile_fail_reschedule_busy_loop,"def test_compile_fail_reschedule_busy_loop(async_runner, make_cases,
                                           make_async_exec_ctx):
    ctx = make_async_exec_ctx(1)
    next(ctx)

    runner, _ = async_runner
    num_checks = 2
    runner.runall(
        make_cases([SleepCheckPollFailLate(1.5), CompileFailureCheck()])
    )
    stats = runner.stats
    assert num_checks == stats.num_cases()
    assert_runall(runner)
    assert num_checks == len(stats.failures())
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_abs,"def test_abs(self):
        assert 1.0 == sn.abs(1.0)
        assert 0.0 == sn.abs(0.0)
        assert 1.0 == sn.abs(-1.0)
        assert 2.0 == sn.abs(sn.defer(-2.0))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_and,"def test_and(self):
        expr = sn.and_(self.a, self.b)
        self._a = 1
        self._b = 1

        assert expr
        assert not sn.not_(expr)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_or,"def test_or(self):
        expr = sn.or_(self.a, self.b)
        self._a = 0
        self._b = 0
        assert not expr
        assert sn.not_(expr)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_all,"def test_all(self):
        l = [1, 1, 0]
        expr = sn.all(l)
        l[2] = 1
        assert expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_allx,"def test_allx(self):
        assert sn.allx([1, 1, 1])
        assert not sn.allx([1, 0])
        assert not sn.allx([])
        assert not sn.allx(i for i in range(0))
        assert sn.allx(i for i in range(1, 2))
        with pytest.raises(TypeError):
            sn.evaluate(sn.allx(None))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_any,"def test_any(self):
        l = [0, 0, 1]
        expr = sn.any(l)
        l[2] = 0
        assert not expr

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_enumerate,"def test_enumerate(self):
        de = sn.enumerate(sn.defer([1, 2]), start=1)
        for i, e in de:
            assert i == e

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_filter,"def test_filter(self):
        df = sn.filter(lambda x: x if x % 2 else None,
                       sn.defer([1, 2, 3, 4, 5]))

        for i, x in sn.enumerate(df, start=1):
            assert 2*i - 1 == x

        # Alternative testing
        assert [1, 3, 5] == list(sn.evaluate(df))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_hasattr,"def test_hasattr(self):
        e = sn.hasattr(self, '_c')
        assert not e

        self._c = 1
        assert e

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_len,"def test_len(self):
        l = [1, 2]
        dl = sn.defer(l)
        assert 2 == sn.len(dl)

        l.append(3)
        assert 3 == sn.len(dl)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_map,"def test_map(self):
        l = [1, 2, 3]
        dm = sn.map(lambda x: 2*x + 1, l)
        for i, x in sn.enumerate(dm, start=1):
            assert 2*i + 1 == x

        # Alternative test
        assert [3, 5, 7] == list(sn.evaluate(dm))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_max,"def test_max(self):
        l = [1, 2]
        dl = sn.defer(l)
        assert 2 == sn.max(dl)

        l.append(3)
        assert 3 == sn.max(dl)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_min,"def test_min(self):
        l = [1, 2]
        dl = sn.defer(l)
        assert 1 == sn.min(dl)

        l.append(0)
        assert 0 == sn.min(dl)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_print_stdout,"def test_print_stdout(self):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            x, y = sn.evaluate(sn.print(1, sn.defer(2)))

        assert stdout.getvalue() == '1 2\n'
        assert x == 1
        assert y == 2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_print_stderr,"def test_print_stderr(self):
        stderr = io.StringIO()
        with contextlib.redirect_stderr(stderr):
            x, y = sn.evaluate(sn.print(1, sn.defer(2), file=sys.stderr))

        assert stderr.getvalue() == '1 2\n'
        assert x == 1
        assert y == 2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_print_separator,"def test_print_separator(self):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            x, y = sn.evaluate(sn.print(1, sn.defer(2), sep='|'))

        assert stdout.getvalue() == '1|2\n'
        assert x == 1
        assert y == 2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_print_end,"def test_print_end(self):
        stdout = io.StringIO()
        with contextlib.redirect_stdout(stdout):
            x, y = sn.evaluate(sn.print(1, sn.defer(2), end=''))

        assert stdout.getvalue() == '1 2'
        assert x == 1
        assert y == 2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_reversed,"def test_reversed(self):
        l = [1, 2, 3]
        dr = sn.reversed(l)
        assert [3, 2, 1] == list(sn.evaluate(dr))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_round,"def test_round(self):
        assert 1.0 == sn.round(sn.defer(1.4))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_setattr,"def test_setattr(self):
        dset = sn.setattr(self, '_a', 5)
        assert 0 == self._a
        sn.evaluate(dset)
        assert 5 == self._a

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_sorted,"def test_sorted(self):
        l = [2, 3, 1]
        ds = sn.sorted(l)
        assert [1, 2, 3] == list(sn.evaluate(ds))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_sum,"def test_sum(self):
        assert 3 == sn.sum([1, 1, 1])
        assert 3 == sn.sum(sn.defer([1, 1, 1]))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_zip,"def test_zip(self):
        la = [1, 2, 3]
        lb = sn.defer(['a', 'b', 'c'])

        la_new = []
        lb_new = []
        for a, b in sn.zip(la, lb):
            la_new.append(a)
            lb_new.append(b)

        assert [1, 2, 3] == la_new
        assert ['a', 'b', 'c'] == lb_new


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_true,"def test_assert_true(self):
        assert sn.assert_true(True)
        assert sn.assert_true(1)
        assert sn.assert_true([1])
        assert sn.assert_true(range(1))
        with pytest.raises(SanityError, match='False is not True'):
            sn.evaluate(sn.assert_true(False))

        with pytest.raises(SanityError, match='0 is not True'):
            sn.evaluate(sn.assert_true(0))

        with pytest.raises(SanityError, match=r'\[\] is not True'):
            sn.evaluate(sn.assert_true([]))

        with pytest.raises(SanityError, match=r'range\(.+\) is not True'):
            sn.evaluate(sn.assert_true(range(0)))

        with pytest.raises(SanityError, match='not true'):
            sn.evaluate(sn.assert_true(0, msg='not true'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_true_with_deferrables,"def test_assert_true_with_deferrables(self):
        assert sn.assert_true(sn.defer(True))
        assert sn.assert_true(sn.defer(1))
        assert sn.assert_true(sn.defer([1]))
        with pytest.raises(SanityError, match='False is not True'):
            sn.evaluate(sn.assert_true(sn.defer(False)))

        with pytest.raises(SanityError, match='0 is not True'):
            sn.evaluate(sn.assert_true(sn.defer(0)))

        with pytest.raises(SanityError, match=r'\[\] is not True'):
            sn.evaluate(sn.assert_true(sn.defer([])))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_false,"def test_assert_false(self):
        assert sn.assert_false(False)
        assert sn.assert_false(0)
        assert sn.assert_false([])
        assert sn.assert_false(range(0))
        with pytest.raises(SanityError, match='True is not False'):
            sn.evaluate(sn.assert_false(True))

        with pytest.raises(SanityError, match='1 is not False'):
            sn.evaluate(sn.assert_false(1))

        with pytest.raises(SanityError, match=r'\[1\] is not False'):
            sn.evaluate(sn.assert_false([1]))

        with pytest.raises(SanityError, match=r'range\(.+\) is not False'):
            sn.evaluate(sn.assert_false(range(1)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_false_with_deferrables,"def test_assert_false_with_deferrables(self):
        assert sn.assert_false(sn.defer(False))
        assert sn.assert_false(sn.defer(0))
        assert sn.assert_false(sn.defer([]))
        with pytest.raises(SanityError, match='True is not False'):
            sn.evaluate(sn.assert_false(sn.defer(True)))

        with pytest.raises(SanityError, match='1 is not False'):
            sn.evaluate(sn.assert_false(sn.defer(1)))

        with pytest.raises(SanityError, match=r'\[1\] is not False'):
            sn.evaluate(sn.assert_false(sn.defer([1])))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_eq,"def test_assert_eq(self):
        assert sn.assert_eq(1, 1)
        assert sn.assert_eq(1, True)
        with pytest.raises(SanityError, match='1 != 2'):
            sn.evaluate(sn.assert_eq(1, 2))

        with pytest.raises(SanityError, match='1 != False'):
            sn.evaluate(sn.assert_eq(1, False))

        with pytest.raises(SanityError, match='1 is not equals to 2'):
            sn.evaluate(sn.assert_eq(1, 2, '{0} is not equals to {1}'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_eq_with_deferrables,"def test_assert_eq_with_deferrables(self):
        assert sn.assert_eq(1, sn.defer(1))
        assert sn.assert_eq(sn.defer(1), True)
        with pytest.raises(SanityError, match='1 != 2'):
            sn.evaluate(sn.assert_eq(sn.defer(1), 2))

        with pytest.raises(SanityError, match='1 != False'):
            sn.evaluate(sn.assert_eq(sn.defer(1), False))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_ne,"def test_assert_ne(self):
        assert sn.assert_ne(1, 2)
        assert sn.assert_ne(1, False)
        with pytest.raises(SanityError, match='1 == 1'):
            sn.evaluate(sn.assert_ne(1, 1))

        with pytest.raises(SanityError, match='1 == True'):
            sn.evaluate(sn.assert_ne(1, True))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_ne_with_deferrables,"def test_assert_ne_with_deferrables(self):
        assert sn.assert_ne(1, sn.defer(2))
        assert sn.assert_ne(sn.defer(1), False)
        with pytest.raises(SanityError, match='1 == 1'):
            sn.evaluate(sn.assert_ne(sn.defer(1), 1))

        with pytest.raises(SanityError, match='1 == True'):
            sn.evaluate(sn.assert_ne(sn.defer(1), True))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_gt,"def test_assert_gt(self):
        assert sn.assert_gt(3, 1)
        with pytest.raises(SanityError, match='1 <= 3'):
            sn.evaluate(sn.assert_gt(1, 3))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_gt_with_deferrables,"def test_assert_gt_with_deferrables(self):
        assert sn.assert_gt(3, sn.defer(1))
        with pytest.raises(SanityError, match='1 <= 3'):
            sn.evaluate(sn.assert_gt(1, sn.defer(3)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_ge,"def test_assert_ge(self):
        assert sn.assert_ge(3, 1)
        assert sn.assert_ge(3, 3)
        with pytest.raises(SanityError, match='1 < 3'):
            sn.evaluate(sn.assert_ge(1, 3))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_ge_with_deferrables,"def test_assert_ge_with_deferrables(self):
        assert sn.assert_ge(3, sn.defer(1))
        assert sn.assert_ge(3, sn.defer(3))
        with pytest.raises(SanityError, match='1 < 3'):
            sn.evaluate(sn.assert_ge(1, sn.defer(3)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_lt,"def test_assert_lt(self):
        assert sn.assert_lt(1, 3)
        with pytest.raises(SanityError, match='3 >= 1'):
            sn.evaluate(sn.assert_lt(3, 1))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_lt_with_deferrables,"def test_assert_lt_with_deferrables(self):
        assert sn.assert_lt(1, sn.defer(3))
        with pytest.raises(SanityError, match='3 >= 1'):
            sn.evaluate(sn.assert_lt(3, sn.defer(1)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_le,"def test_assert_le(self):
        assert sn.assert_le(1, 1)
        assert sn.assert_le(3, 3)
        with pytest.raises(SanityError, match='3 > 1'):
            sn.evaluate(sn.assert_le(3, 1))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_le_with_deferrables,"def test_assert_le_with_deferrables(self):
        assert sn.assert_le(1, sn.defer(3))
        assert sn.assert_le(3, sn.defer(3))
        with pytest.raises(SanityError, match='3 > 1'):
            sn.evaluate(sn.assert_le(3, sn.defer(1)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_in,"def test_assert_in(self):
        assert sn.assert_in(1, [1, 2, 3])
        with pytest.raises(SanityError, match=r'0 is not in \[1, 2, 3\]'):
            sn.evaluate(sn.assert_in(0, [1, 2, 3]))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_in_with_deferrables,"def test_assert_in_with_deferrables(self):
        assert sn.assert_in(1, sn.defer([1, 2, 3]))
        with pytest.raises(SanityError, match=r'0 is not in \[1, 2, 3\]'):
            sn.evaluate(sn.assert_in(0, sn.defer([1, 2, 3])))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_not_in,"def test_assert_not_in(self):
        assert sn.assert_not_in(0, [1, 2, 3])
        with pytest.raises(SanityError, match=r'1 is in \[1, 2, 3\]'):
            sn.evaluate(sn.assert_not_in(1, [1, 2, 3]))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_not_in_with_deferrables,"def test_assert_not_in_with_deferrables(self):
        assert sn.assert_not_in(0, sn.defer([1, 2, 3]))
        with pytest.raises(SanityError, match=r'1 is in \[1, 2, 3\]'):
            sn.evaluate(sn.assert_not_in(1, sn.defer([1, 2, 3])))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_bounded,"def test_assert_bounded(self):
        assert sn.assert_bounded(1, -1.5, 1.5)
        assert sn.assert_bounded(1, upper=1.5)
        assert sn.assert_bounded(1, lower=-1.5)
        assert sn.assert_bounded(1)
        with pytest.raises(SanityError,
                           match=r'value 1 not within bounds -0\.5\.\.0\.5'):
            sn.evaluate(sn.assert_bounded(1, -0.5, 0.5))

        with pytest.raises(SanityError,
                           match=r'value 1 not within bounds -inf\.\.0\.5'):
            sn.evaluate(sn.assert_bounded(1, upper=0.5))

        with pytest.raises(SanityError,
                           match=r'value 1 not within bounds 1\.5\.\.inf'):
            sn.evaluate(sn.assert_bounded(1, lower=1.5))

        with pytest.raises(SanityError, match='value 1 is out of bounds'):
            sn.evaluate(sn.assert_bounded(
                1, -0.5, 0.5, 'value {0} is out of bounds'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_reference,"def test_assert_reference(self):
        assert sn.assert_reference(0.9, 1, -0.2, 0.1)
        assert sn.assert_reference(0.9, 1, upper_thres=0.1)
        assert sn.assert_reference(0.9, 1, lower_thres=-0.2)
        assert sn.assert_reference(0.9, 1)

        # Check negatives
        assert sn.assert_reference(-0.9, -1, -0.2, 0.1)
        assert sn.assert_reference(-0.9, -1, -0.2)
        assert sn.assert_reference(-0.9, -1, upper_thres=0.1)
        assert sn.assert_reference(-0.9, -1)

        # Check upper threshold values greater than 1
        assert sn.assert_reference(20.0, 10.0, None, 3.0)
        assert sn.assert_reference(-50.0, -20.0, -2.0, 0.5)
        with pytest.raises(SanityError,
                           match=r'0\.5 is beyond reference value 1 '
                                 r'\(l=0\.8, u=1\.1\)'):
            sn.evaluate(sn.assert_reference(0.5, 1, -0.2, 0.1))

        with pytest.raises(SanityError,
                           match=r'0\.5 is beyond reference value 1 '
                                 r'\(l=0\.8, u=inf\)'):
            sn.evaluate(sn.assert_reference(0.5, 1, -0.2))

        with pytest.raises(SanityError,
                           match=r'1\.5 is beyond reference value 1 '
                                 r'\(l=0\.8, u=1\.1\)'):
            sn.evaluate(sn.assert_reference(1.5, 1, -0.2, 0.1))

        with pytest.raises(SanityError,
                           match=r'1\.5 is beyond reference value 1 '
                                 r'\(l=-inf, u=1\.1\)'):
            sn.evaluate(sn.assert_reference(1.5, 1, lower_thres=None,
                                            upper_thres=0.1))

        with pytest.raises(SanityError,
                           match=r'-0\.8 is beyond reference value -1 '
                                 r'\(l=-1\.2, u=-0\.9\)'):
            sn.evaluate(sn.assert_reference(-0.8, -1, -0.2, 0.1))

        # Check invalid thresholds
        with pytest.raises(SanityError,
                           match=r'invalid high threshold value: -0\.1'):
            sn.evaluate(sn.assert_reference(0.9, 1, -0.2, -0.1))

        with pytest.raises(SanityError,
                           match=r'invalid low threshold value: 0\.2'):
            sn.evaluate(sn.assert_reference(0.9, 1, 0.2, 0.1))

        with pytest.raises(SanityError,
                           match=r'invalid low threshold value: 1\.2'):
            sn.evaluate(sn.assert_reference(0.9, 1, 1.2, 0.1))

        # check invalid thresholds greater than 1
        with pytest.raises(SanityError,
                           match=r'invalid low threshold value: -2\.0'):
            sn.evaluate(sn.assert_reference(0.9, 1, -2.0, 0.1))

        with pytest.raises(SanityError,
                           match=r'invalid high threshold value: 1\.5'):
            sn.evaluate(sn.assert_reference(-1.5, -1, -0.5, 1.5))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_found,"def test_assert_found(self):
        tempfile = self._write_tempfile()
        assert sn.assert_found(r'Step: \d+', tempfile)
        assert sn.assert_found(
            r'Step: \d+', sn.defer(tempfile))
        with pytest.raises(SanityError):
            sn.evaluate(sn.assert_found(r'foo: \d+', tempfile))

        os.remove(tempfile)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_found_encoding,"def test_assert_found_encoding(self):
        assert sn.assert_found('Odyssey', self.utf16_file, encoding='utf-16')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_not_found,"def test_assert_not_found(self):
        tempfile = self._write_tempfile()
        assert sn.assert_not_found(r'foo: \d+', tempfile)
        assert sn.assert_not_found(r'foo: \d+', sn.defer(tempfile))
        with pytest.raises(SanityError):
            sn.evaluate(sn.assert_not_found(r'Step: \d+', tempfile))

        os.remove(tempfile)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_assert_not_found_encoding,"def test_assert_not_found_encoding(self):
        assert sn.assert_not_found(r'Iliad', self.utf16_file,
                                   encoding='utf-16')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_getitem,"def test_getitem(self):
        l = [1, 2, 3]
        d = {'a': 1, 'b': 2, 'c': 3}

        assert 2 == sn.getitem(l, 1)
        assert 2 == sn.getitem(d, 'b')
        with pytest.raises(SanityError, match='index out of bounds: 10'):
            sn.evaluate(sn.getitem(l, 10))

        with pytest.raises(SanityError, match='key not found: k'):
            sn.evaluate(sn.getitem(d, 'k'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_getitem_with_deferrables,"def test_getitem_with_deferrables(self):
        l = sn.defer([1, 2, 3])
        d = sn.defer({'a': 1, 'b': 2, 'c': 3})

        assert 2 == sn.getitem(l, 1)
        assert 2 == sn.getitem(d, 'b')
        with pytest.raises(SanityError, match='index out of bounds: 10'):
            sn.evaluate(sn.getitem(l, 10))

        with pytest.raises(SanityError, match='key not found: k'):
            sn.evaluate(sn.getitem(d, 'k'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_count,"def test_count(self):
        # Use a custom generator for testing
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_count_uniq,"def test_count_uniq(self):
        # Use a custom generator for testing
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_glob,"def test_glob(self):
        filepatt = os.path.join(TEST_RESOURCES_CHECKS, '*.py')
        assert sn.glob(filepatt)
        assert sn.glob(sn.defer(filepatt))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_iglob,"def test_iglob(self):
        filepatt = os.path.join(TEST_RESOURCES_CHECKS, '*.py')
        assert sn.count(sn.iglob(filepatt))
        assert sn.count(sn.iglob(sn.defer(filepatt)))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_chain,"def test_chain(self):
        list1 = ['A', 'B', 'C']
        list2 = ['D', 'E', 'F']
        chain1 = sn.evaluate(sn.chain(sn.defer(list1), list2))
        chain2 = itertools.chain(list1, list2)
        assert all((a == b for a, b in zip(chain1, chain2)))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_findall,"def test_findall(self):
        res = sn.evaluate(sn.findall(r'Step: \d+', self.tempfile))
        assert 3 == len(res)

        res = sn.evaluate(sn.findall('Step:.*', self.tempfile))
        assert 3 == len(res)

        res = sn.evaluate(sn.findall('Step: [12]', self.tempfile))
        assert 2 == len(res)

        # Check the matches
        for expected, match in zip(['Step: 1', 'Step: 2'], res):
            assert expected == match.group(0)

        # Check groups
        res = sn.evaluate(sn.findall(r'Step: (?P<no>\d+)', self.tempfile))
        for step, match in enumerate(res, start=1):
            assert step == int(match.group(1))
            assert step == int(match.group('no'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_findall_encoding,"def test_findall_encoding(self):
        res = sn.evaluate(
            sn.findall('Odyssey', self.utf16_file, encoding='utf-16')
        )
        assert 1 == len(res)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_findall_error,"def test_findall_error(self):
        with pytest.raises(SanityError):
            sn.evaluate(sn.findall(r'Step: \d+', 'foo.txt'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractall,"def test_extractall(self):
        # Check numeric groups
        res = sn.evaluate(sn.extractall(
            r'Step: (?P<no>\d+)', self.tempfile, 1))
        for expected, v in enumerate(res, start=1):
            assert str(expected) == v

        # Check named groups
        res = sn.evaluate(sn.extractall(
            r'Step: (?P<no>\d+)', self.tempfile, 'no'))
        for expected, v in enumerate(res, start=1):
            assert str(expected) == v

        # Check convert function
        res = sn.evaluate(sn.extractall(r'Step: (?P<no>\d+)',
                                        self.tempfile, 'no', int))
        for expected, v in enumerate(res, start=1):
            assert expected == v

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractall_multiple_tags,"def test_extractall_multiple_tags(self):
        # Check multiple numeric groups
        res = sn.evaluate(sn.extractall(
            r'Number: (\d+) (\d+)', self.tempfile, (1, 2)))
        for expected, v in enumerate(res, start=1):
            assert str(expected) == v[0]
            assert str(2*expected) == v[1]

        # Check multiple named groups
        res = sn.evaluate(sn.extractall(
            r'Number: (?P<no1>\d+) (?P<no2>\d+)', self.tempfile,
            ('no1', 'no2')))
        for expected, v in enumerate(res, start=1):
            assert str(expected) == v[0]
            assert str(2*expected) == v[1]

        # Check single convert function
        res = sn.evaluate(sn.extractall(r'Number: (?P<no1>\d+) (?P<no2>\d+)',
                                        self.tempfile, ('no1', 'no2'), int))
        for expected, v in enumerate(res, start=1):
            assert expected == v[0]
            assert 2 * expected == v[1]

        # Check multiple convert functions
        res = sn.evaluate(sn.extractall(r'Number: (?P<no1>\d+) (?P<no2>\d+)',
                                        self.tempfile, ('no1', 'no2'),
                                        (int, float)))
        for expected, v in enumerate(res, start=1):
            assert expected == v[0]
            assert 2 * expected == v[1]
            assert isinstance(v[1], float)

        # Check more conversion functions than tags
        res = sn.evaluate(sn.extractall(r'Number: (?P<no1>\d+) (?P<no2>\d+)',
                                        self.tempfile, ('no1', 'no2'),
                                        [int, float, float, float]))
        for expected, v in enumerate(res, start=1):
            assert expected == v[0]
            assert 2 * expected == v[1]

        # Check fewer convert functions than tags
        res = sn.evaluate(sn.extractall(r'Number: (?P<no1>\d+) (?P<no2>\d+)',
                                        self.tempfile, ('no1', 'no2'),
                                        [int]))
        for expected, v in enumerate(res, start=1):
            assert expected == v[0]
            assert 2 * expected == v[1]

        # Check multiple conversion functions and a single tag
        with pytest.raises(SanityError):
            res = sn.evaluate(sn.extractall(
                r'Number: (?P<no>\d+) \d+', self.tempfile, 'no', [int, float])
            )

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractall_encoding,"def test_extractall_encoding(self):
        res = sn.evaluate(
            sn.extractall('Odyssey', self.utf16_file, encoding='utf-16')
        )
        assert 1 == len(res)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractall_error,"def test_extractall_error(self):
        with pytest.raises(SanityError):
            sn.evaluate(sn.extractall(r'Step: (\d+)', 'foo.txt', 1))

        with pytest.raises(SanityError):
            sn.evaluate(sn.extractall(r'Step: (?P<no>\d+)',
                        self.tempfile, conv=int))

        with pytest.raises(SanityError):
            sn.evaluate(sn.extractall(r'Step: (\d+)', self.tempfile, 2))

        with pytest.raises(SanityError):
            sn.evaluate(sn.extractall(r'Step: (?P<no>\d+)', self.tempfile,
                                      'foo'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractall_custom_conv,"def test_extractall_custom_conv(self):
        res = sn.evaluate(sn.extractall(r'Step: (\d+)', self.tempfile, 1,
                                        lambda x: int(x)))
        for expected, v in enumerate(res, start=1):
            assert expected == v

        # Check error in custom function
        with pytest.raises(SanityError):
            sn.evaluate(sn.extractall(r'Step: (\d+)', self.tempfile,
                                      conv=lambda x: int(x)))

        # Check error with a callable object
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractsingle,"def test_extractsingle(self):
        for i in range(1, 4):
            assert i == sn.extractsingle(r'Step: (\d+)', self.tempfile, 1, int,
                                         i-1)

        # Test out of bounds access
        with pytest.raises(SanityError):
            sn.evaluate(sn.extractsingle(r'Step: (\d+)', self.tempfile, 1, int,
                                         100))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_extractsingle_encoding,"def test_extractsingle_encoding(self):
        res = sn.evaluate(
            sn.extractsingle(r'Odyssey', self.utf16_file, encoding='utf-16')
        )
        assert -1 != res.find('Odyssey')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_safe_format,"def test_safe_format(self):
        from reframe.utility.sanity import _format

        s = 'There is {0} and {1}.'
        assert s == _format(s)
        assert s == _format(s, 'bacon')
        assert 'There is egg and spam.' == _format(s, 'egg', 'spam')
        assert 'There is egg and bacon.' == _format(s, 'egg', 'bacon', 'spam')

        s = 'no placeholders'
        assert s == _format(s)
        assert s == _format(s, 'bacon')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_sanity_functions.py,,test_avg,"def test_avg(self):
        res = sn.evaluate(sn.avg([1, 2, 3, 4]))
        assert 2.5 == res

        # Check result when passing a generator
        res = sn.evaluate(sn.avg(range(1, 5)))
        assert 2.5 == res

        # Check with single element container
        res = sn.evaluate(sn.avg(range(1, 2)))
        assert 1 == res

        # Check with empty container
        with pytest.raises(SanityError):
            sn.evaluate(sn.avg([]))
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_prepare_nodes_option,"def test_prepare_nodes_option(temp_runtime, make_job, slurm_only):
    rt = temp_runtime(fixtures.TEST_CONFIG_FILE, 'generic',
                      {'schedulers/use_nodes_option': True})
    next(rt)
    job = make_job()
    job.num_tasks = 16
    job.num_tasks_per_node = 2
    prepare_job(job)
    with open(job.script_filename) as fp:
        assert re.search(r'--nodes=8', fp.read()) is not None


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit_job_array,"def test_submit_job_array(make_job, slurm_only, exec_ctx):
    job = make_job(sched_access=exec_ctx.access)
    job.options = ['--array=0-1']
    prepare_job(job, command='echo ""Task id: ${SLURM_ARRAY_TASK_ID}""')
    job.submit()
    job.wait()
    assert job.exitcode == 0
    with open(job.stdout) as fp:
        output = fp.read()
        assert all([re.search('Task id: 0', output),
                    re.search('Task id: 1', output)])


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_submit_max_pending_time,"def test_submit_max_pending_time(make_job, exec_ctx, scheduler):
    if scheduler.registered_name in ('local', 'pbs'):
        pytest.skip(f""max_pending_time not supported by the ""
                    f""'{scheduler.registered_name}' scheduler"")

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_noname,"def test_slurm_node_noname():
    with pytest.raises(JobError):
        _SlurmNode(
            'Arch=x86_64 CoresPerSocket=12 '
            'CPUAlloc=0 CPUErr=0 CPUTot=24 CPULoad=0.00 '
            'AvailableFeatures=f1,f2 ActiveFeatures=f1,f2 '
            'Gres=gpu_mem:16280,gpu:1 NodeAddr=nid00001 '
            'NodeHostName=nid00001 Version=10.00 OS=Linux '
            'RealMemory=32220 AllocMem=0 FreeMem=10000 '
            'Sockets=1 Boards=1 State=IDLE+DRAIN '
            'ThreadsPerCore=2 TmpDisk=0 Weight=1 Owner=N/A '
            'MCS_label=N/A Partitions=p1,p2 '
            'BootTime=01 Jan 2018 '
            'SlurmdStartTime=01 Jan 2018 '
            'CfgTRES=cpu=24,mem=32220M '
            'AllocTRES= CapWatts=n/a CurrentWatts=100 '
            'LowestJoules=100000000 ConsumedJoules=0 '
            'ExtSensorsJoules=n/s ExtSensorsWatts=0 '
            'ExtSensorsTemp=n/s Reason=Foo/ '
            'failed [reframe_user@01 Jan 2018]'
        )


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_states,"def test_slurm_node_states(slurm_node_allocated,
                           slurm_node_idle,
                           slurm_node_drained):
    assert slurm_node_allocated.states == {'ALLOCATED'}
    assert slurm_node_idle.states == {'IDLE'}
    assert slurm_node_drained.states == {'IDLE', 'DRAIN'}


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_equals,"def test_slurm_node_equals(slurm_node_allocated, slurm_node_idle):
    assert slurm_node_allocated == _SlurmNode(slurm_node_allocated.descr)
    assert slurm_node_allocated != slurm_node_idle


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_attributes,"def test_slurm_node_attributes(slurm_node_allocated, slurm_node_nopart):
    assert slurm_node_allocated.name == 'nid00001'
    assert slurm_node_allocated.partitions == {'p1', 'p2'}
    assert slurm_node_allocated.active_features == {'f1', 'f2'}
    assert slurm_node_nopart.name == 'nid00004'
    assert slurm_node_nopart.partitions == set()
    assert slurm_node_nopart.active_features == {'f1', 'f2'}


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_hash,"def test_hash(slurm_node_allocated):
    assert (hash(slurm_node_allocated) ==
            hash(_SlurmNode(slurm_node_allocated.descr)))


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_str,"def test_str(slurm_node_allocated):
    assert 'nid00001' == str(slurm_node_allocated)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_in_state,"def test_slurm_node_in_state(slurm_node_allocated,
                             slurm_node_idle,
                             slurm_node_drained,
                             slurm_node_nopart):
    assert slurm_node_allocated.in_state('allocated')
    assert slurm_node_idle.in_state('Idle')
    assert slurm_node_drained.in_state('IDLE+Drain')
    assert slurm_node_drained.in_state('IDLE')
    assert slurm_node_drained.in_state('idle')
    assert slurm_node_drained.in_state('DRAIN')
    assert not slurm_node_nopart.in_state('IDLE')


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_schedulers.py,,test_slurm_node_is_down,"def test_slurm_node_is_down(slurm_node_allocated,
                            slurm_node_idle,
                            slurm_node_nopart):
    assert not slurm_node_allocated.is_down()
    assert not slurm_node_idle.is_down()
    assert slurm_node_nopart.is_down()
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_generate,"def test_generate(self):
        with shell.generate_script(self.script_file.name) as gen:
            gen.write_prolog('# this is a test script')
            gen.write_prolog('# another comment')
            gen.write('v1=10')
            gen.write_prolog('export v2=20')
            gen.write_body('((v3 = v1 + v2))')
            gen.write_body('echo hello $v3')
            gen.write('unset v2')
            gen.write_epilog('echo foo')
            gen.write_epilog('unset v1')

        expected_output = '''#!/bin/bash
# this is a test script
# another comment
export v2=20
v1=10
((v3 = v1 + v2))
echo hello $v3
unset v2
echo foo
unset v1
'''
        with open(self.script_file.name) as fp:
            assert expected_output == fp.read()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_generate_login,"def test_generate_login(self):
        with shell.generate_script(self.script_file.name, login=True) as gen:
            gen.write('echo hello')

        expected_output = '''#!/bin/bash -l
echo hello
'''
        with open(self.script_file.name) as fp:
            assert expected_output == fp.read()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_write_types,"def test_write_types(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_trap_error,"def test_trap_error(self):
        with shell.generate_script(self.script_file.name,
                                   trap_errors=True) as gen:
            gen.write('false')
            gen.write('echo hello')

        with pytest.raises(SpawnedProcessError) as cm:
            os_ext.run_command(self.script_file.name, check=True)

        exc = cm.value
        assert 'hello' not in exc.stdout
        assert 1 == exc.exitcode
        assert ""-reframe: command `false' failed (exit code: 1)"" in exc.stdout

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_trap_exit,"def test_trap_exit(self):
        with shell.generate_script(self.script_file.name,
                                   trap_exit=True) as gen:
            gen.write('echo hello')

        completed = os_ext.run_command(self.script_file.name, check=True)
        assert 'hello' in completed.stdout
        assert 0 == completed.returncode
        assert '-reframe: script exiting with exit code: 0' in completed.stdout

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_shell.py,,test_trap_signal,"def test_trap_signal(self):
        with shell.generate_script(self.script_file.name,
                                   trap_signals=True) as gen:
            gen.write('sleep 10')
            gen.write('echo hello')

        f_stdout = tempfile.NamedTemporaryFile(mode='w+', delete=False)
        proc = os_ext.run_command_async(self.script_file.name,
                                        stdout=f_stdout,
                                        start_new_session=True)

        # Yield for some time to allow the script to start
        time.sleep(1)

        # We kill the whole spawned process group (we are launching a shell)
        os.killpg(proc.pid, 15)
        proc.wait()

        f_stdout.flush()
        f_stdout.seek(0)
        stdout = f_stdout.read()
        assert 'hello' not in stdout
        assert 143 == proc.returncode
        assert '-reframe: script caught signal: 15' in stdout
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_list_type,"def test_list_type(self):
        l = [1, 2]
        ll = [[1, 2], [3, 4]]
        assert isinstance(l, types.List)
        assert isinstance(l, types.List[int])
        assert not isinstance(l, types.List[float])

        assert isinstance(ll, types.List)
        assert isinstance(ll, types.List[types.List[int]])
        self._test_type_hierarchy(list, types.List)

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.List[3]

        with pytest.raises(TypeError):
            types.List[int, float]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_set_type,"def test_set_type(self):
        s = {1, 2}
        ls = [{1, 2}, {3, 4}]
        assert isinstance(s, types.Set)
        assert isinstance(s, types.Set[int])
        assert not isinstance(s, types.Set[float])

        assert isinstance(ls, types.List)
        assert isinstance(ls, types.List[types.Set[int]])
        self._test_type_hierarchy(set, types.Set)

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.Set[3]

        with pytest.raises(TypeError):
            types.Set[int, float]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_uniform_tuple_type,"def test_uniform_tuple_type(self):
        t = (1, 2)
        tl = ([1, 2], [3, 4])
        lt = [(1, 2), (3, 4)]
        assert isinstance(t, types.Tuple)
        assert isinstance(t, types.Tuple[int])
        assert not isinstance(t, types.Tuple[float])

        assert isinstance(tl, types.Tuple)
        assert isinstance(tl, types.Tuple[types.List[int]])

        assert isinstance(lt, types.List)
        assert isinstance(lt, types.List[types.Tuple[int]])
        self._test_type_hierarchy(tuple, types.Tuple)

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.Set[3]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_non_uniform_tuple_type,"def test_non_uniform_tuple_type(self):
        t = (1, 2.3, '4', ['a', 'b'])
        assert isinstance(t, types.Tuple)
        assert isinstance(t, types.Tuple[int, float, str, types.List[str]])
        assert not isinstance(t, types.Tuple[float, int, str])
        assert not isinstance(t, types.Tuple[float, int, str, int])

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.Set[int, 3]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_mapping_type,"def test_mapping_type(self):
        d = {'one': 1, 'two': 2}
        dl = {'one': [1, 2], 'two': [3, 4]}
        ld = [{'one': 1, 'two': 2}, {'three': 3}]
        assert isinstance(d, types.Dict)
        assert isinstance(d, types.Dict[str, int])
        assert not isinstance(d, types.Dict[int, int])

        assert isinstance(dl, types.Dict)
        assert isinstance(dl, types.Dict[str, types.List[int]])
        assert isinstance(ld, types.List[types.Dict[str, int]])

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.Dict[int]

        with pytest.raises(TypeError):
            types.Dict[int, 3]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_str_type,"def test_str_type(self):
        s = '123'
        ls = ['1', '23', '456']
        assert isinstance(s, types.Str)
        assert isinstance(s, types.Str[r'\d+'])
        assert isinstance(ls, types.List[types.Str[r'\d+']])
        assert not isinstance(s, types.Str[r'a.*'])
        assert not isinstance(ls, types.List[types.Str[r'a.*']])
        assert not isinstance('hello, world', types.Str[r'\S+'])

        # Test invalid arguments
        with pytest.raises(TypeError):
            types.Str[int]

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_type_names,"def test_type_names(self):
        assert 'List' == types.List.__name__
        assert 'List[int]' == types.List[int].__name__
        assert ('Dict[str,List[int]]' ==
                types.Dict[str, types.List[int]].__name__)
        assert ('Tuple[int,Set[float],str]' ==
                types.Tuple[int, types.Set[float], str].__name__)
        assert r""List[Str[r'\d+']]"" == types.List[types.Str[r'\d+']].__name__

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_typecheck.py,,test_custom_types,"def test_custom_types(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_command_success,"def test_command_success(self):
        completed = os_ext.run_command('echo foobar')
        assert completed.returncode == 0
        assert completed.stdout == 'foobar\n'

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_command_error,"def test_command_error(self):
        with pytest.raises(SpawnedProcessError,
                           match=r""command 'false' failed with exit code 1""):
            os_ext.run_command('false', check=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_command_timeout,"def test_command_timeout(self):
        with pytest.raises(
                SpawnedProcessTimeout,
                match=r""command 'sleep 3' timed out after 2s""
        ) as exc_info:
            os_ext.run_command('sleep 3', timeout=2)

        assert exc_info.value.timeout == 2

        # Try to get the string repr. of the exception: see bug #658
        s = str(exc_info.value)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_command_async,"def test_command_async(self):
        from datetime import datetime

        t_launch = datetime.now()
        t_sleep  = t_launch
        proc = os_ext.run_command_async('sleep 1')
        t_launch = datetime.now() - t_launch

        proc.wait()
        t_sleep = datetime.now() - t_sleep

        # Now check the timings
        assert t_launch.seconds < 1
        assert t_sleep.seconds >= 1

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_copytree,"def test_copytree(self):
        dir_src = tempfile.mkdtemp()
        dir_dst = tempfile.mkdtemp()
        os_ext.copytree(dir_src, dir_dst, dirs_exist_ok=True)
        shutil.rmtree(dir_src)
        shutil.rmtree(dir_dst)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_copytree_src_parent_of_dst,"def test_copytree_src_parent_of_dst(self):
        dst_path = tempfile.mkdtemp()
        src_path = os.path.abspath(os.path.join(dst_path, '..'))

        with pytest.raises(ValueError):
            os_ext.copytree(src_path, dst_path)

        shutil.rmtree(dst_path)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_rmtree,"def test_rmtree(self):
        self._test_rmtree()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_rmtree_onerror,"def test_rmtree_onerror(self):
        self._test_rmtree(onerror=lambda *args: None)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_rmtree_error,"def test_rmtree_error(self):
        # Try to remove an inexistent directory
        testdir = tempfile.mkdtemp()
        os.rmdir(testdir)
        with pytest.raises(OSError):
            os_ext.rmtree(testdir)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_inpath,"def test_inpath(self):
        assert os_ext.inpath('/foo/bin', '/bin:/foo/bin:/usr/bin')
        assert not os_ext.inpath('/foo/bin', '/bin:/usr/local/bin')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_subdirs,"def test_subdirs(self):
        prefix = tempfile.mkdtemp()
        self._make_testdirs(prefix)

        # Try to fool the algorithm by adding normal files
        open(os.path.join(prefix, 'foo', 'bar', 'file.txt'), 'w').close()
        open(os.path.join(prefix, 'loo', 'file.txt'), 'w').close()

        expected_subdirs = {prefix,
                            os.path.join(prefix, 'foo'),
                            os.path.join(prefix, 'foo', 'bar'),
                            os.path.join(prefix, 'foo', 'bar', 'boo'),
                            os.path.join(prefix, 'foo', 'goo'),
                            os.path.join(prefix, 'loo'),
                            os.path.join(prefix, 'loo', 'bar')}

        returned_subdirs = os_ext.subdirs(prefix)
        assert [prefix] == returned_subdirs

        returned_subdirs = os_ext.subdirs(prefix, recurse=True)
        assert expected_subdirs == set(returned_subdirs)
        shutil.rmtree(prefix)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_samefile,"def test_samefile(self):
        # Create a temporary directory structure
        prefix = tempfile.mkdtemp()
        self._make_testdirs(prefix)

        # Try to fool the algorithm by adding symlinks
        os.symlink(os.path.join(prefix, 'foo'),
                   os.path.join(prefix, 'foolnk'))
        os.symlink(os.path.join(prefix, 'foolnk'),
                   os.path.join(prefix, 'foolnk1'))

        # Create a broken link on purpose
        os.symlink('/foo', os.path.join(prefix, 'broken'))
        os.symlink(os.path.join(prefix, 'broken'),
                   os.path.join(prefix, 'broken1'))

        assert os_ext.samefile('/foo', '/foo')
        assert os_ext.samefile('/foo', '/foo/')
        assert os_ext.samefile('/foo/bar', '/foo//bar/')
        assert os_ext.samefile(os.path.join(prefix, 'foo'),
                               os.path.join(prefix, 'foolnk'))
        assert os_ext.samefile(os.path.join(prefix, 'foo'),
                               os.path.join(prefix, 'foolnk1'))
        assert not os_ext.samefile('/foo', '/bar')
        assert os_ext.samefile('/foo', os.path.join(prefix, 'broken'))
        assert os_ext.samefile(os.path.join(prefix, 'broken'),
                               os.path.join(prefix, 'broken1'))
        shutil.rmtree(prefix)

    # FIXME: This should be changed in order to use the `monkeypatch`
    # fixture of `pytest` instead of creating an instance of `MonkeyPatch`
    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_is_interactive,"def test_is_interactive(self):
        from _pytest.monkeypatch import MonkeyPatch  # noqa: F401, F403

        monkey = MonkeyPatch()
        with monkey.context() as c:
            # Set `sys.ps1` to immitate an interactive session
            c.setattr(sys, 'ps1', 'rfm>>> ', raising=False)
            assert os_ext.is_interactive()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_is_url,"def test_is_url(self):
        repo_https = 'https://github.com/eth-cscs/reframe.git'
        repo_ssh = 'git@github.com:eth-cscs/reframe.git'
        assert os_ext.is_url(repo_https)
        assert not os_ext.is_url(repo_ssh)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_git_repo_hash,"def test_git_repo_hash(self):
        # A git branch hash consists of 8(short) or 40 characters.
        assert len(os_ext.git_repo_hash()) == 8
        assert len(os_ext.git_repo_hash(short=False)) == 40
        assert os_ext.git_repo_hash(branch='invalid') is None
        assert os_ext.git_repo_hash(branch='') is None

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_git_repo_exists,"def test_git_repo_exists(self):
        assert os_ext.git_repo_exists(
            'https://github.com/eth-cscs/reframe.git', timeout=3)
        assert not os_ext.git_repo_exists('reframe.git', timeout=3)
        assert not os_ext.git_repo_exists(
            'https://github.com/eth-cscs/xxx', timeout=3)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_force_remove_file,"def test_force_remove_file(self):
        with tempfile.NamedTemporaryFile(delete=False) as fp:
            pass

        assert os.path.exists(fp.name)
        os_ext.force_remove_file(fp.name)
        assert not os.path.exists(fp.name)

        # Try to remove a non-existent file
        os_ext.force_remove_file(fp.name)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_expandvars_dollar,"def test_expandvars_dollar(self):
        text = 'Hello, $(echo World)'
        assert 'Hello, World' == os_ext.expandvars(text)

        # Test nested expansion
        text = '$(echo Hello, $(echo World))'
        assert 'Hello, World' == os_ext.expandvars(text)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_expandvars_backticks,"def test_expandvars_backticks(self):
        text = 'Hello, `echo World`'
        assert 'Hello, World' == os_ext.expandvars(text)

        # Test nested expansion
        text = '`echo Hello, `echo World``'
        assert 'Hello, World' == os_ext.expandvars(text)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_expandvars_mixed_syntax,"def test_expandvars_mixed_syntax(self):
        text = '`echo Hello, $(echo World)`'
        assert 'Hello, World' == os_ext.expandvars(text)

        text = '$(echo Hello, `echo World`)'
        assert 'Hello, World' == os_ext.expandvars(text)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_expandvars_error,"def test_expandvars_error(self):
        text = 'Hello, $(foo)'
        with pytest.raises(SpawnedProcessError):
            os_ext.expandvars(text)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_strange_syntax,"def test_strange_syntax(self):
        text = 'Hello, $(foo`'
        assert 'Hello, $(foo`' == os_ext.expandvars(text)

        text = 'Hello, `foo)'
        assert 'Hello, `foo)' == os_ext.expandvars(text)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_expandvars_nocmd,"def test_expandvars_nocmd(self):
        os.environ['FOO'] = 'World'
        text = 'Hello, $FOO'
        assert 'Hello, World' == os_ext.expandvars(text)

        text = 'Hello, ${FOO}'
        assert 'Hello, World' == os_ext.expandvars(text)
        del os.environ['FOO']


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_nolinks,"def test_virtual_copy_nolinks(self):
        os_ext.copytree_virtual(self.prefix, self.target, dirs_exist_ok=True)
        self.verify_target_directory()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_nolinks_dirs_exist,"def test_virtual_copy_nolinks_dirs_exist(self):
        with pytest.raises(FileExistsError):
            os_ext.copytree_virtual(self.prefix, self.target)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_valid_links,"def test_virtual_copy_valid_links(self):
        file_links = ['bar/', 'foo/bar.txt', 'foo.txt']
        os_ext.copytree_virtual(self.prefix, self.target,
                                file_links, dirs_exist_ok=True)
        self.verify_target_directory(file_links)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_inexistent_links,"def test_virtual_copy_inexistent_links(self):
        file_links = ['foobar/', 'foo/bar.txt', 'foo.txt']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_absolute_paths,"def test_virtual_copy_absolute_paths(self):
        file_links = [os.path.join(self.prefix, 'bar'),
                      'foo/bar.txt', 'foo.txt']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_irrelevenant_paths,"def test_virtual_copy_irrelevenant_paths(self):
        file_links = ['/bin', 'foo/bar.txt', 'foo.txt']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

        file_links = [os.path.dirname(self.prefix), 'foo/bar.txt', 'foo.txt']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_linkself,"def test_virtual_copy_linkself(self):
        file_links = ['.']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_virtual_copy_linkparent,"def test_virtual_copy_linkparent(self):
        file_links = ['..']
        with pytest.raises(ValueError):
            os_ext.copytree_virtual(self.prefix, self.target,
                                    file_links, dirs_exist_ok=True)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_relpath,"def test_load_relpath(self):
        module = util.import_module_from_file('reframe/__init__.py')
        assert reframe.VERSION == module.VERSION
        assert 'reframe' == module.__name__
        assert module is sys.modules.get('reframe')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_directory,"def test_load_directory(self):
        module = util.import_module_from_file('reframe')
        assert reframe.VERSION == module.VERSION
        assert 'reframe' == module.__name__
        assert module is sys.modules.get('reframe')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_abspath,"def test_load_abspath(self):
        filename = os.path.abspath('reframe/__init__.py')
        module = util.import_module_from_file(filename)
        assert reframe.VERSION == module.VERSION
        assert 'reframe' == module.__name__
        assert module is sys.modules.get('reframe')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_unknown_path,"def test_load_unknown_path(self):
        try:
            util.import_module_from_file('/foo')
            pytest.fail()
        except ImportError as e:
            assert 'foo' == e.name
            assert '/foo' == e.path

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_directory_relative,"def test_load_directory_relative(self):
        with os_ext.change_dir('reframe'):
            module = util.import_module_from_file('../reframe')
            assert reframe.VERSION == module.VERSION
            assert 'reframe' == module.__name__
            assert module is sys.modules.get('reframe')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_relative,"def test_load_relative(self):
        with os_ext.change_dir('reframe'):
            # Load a module from a directory up
            module = util.import_module_from_file('../reframe/__init__.py')
            assert reframe.VERSION == module.VERSION
            assert 'reframe' == module.__name__
            assert module is sys.modules.get('reframe')

            # Load a module from the current directory
            module = util.import_module_from_file('utility/os_ext.py')
            assert 'reframe.utility.os_ext' == module.__name__
            assert module is sys.modules.get('reframe.utility.os_ext')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_outside_pkg,"def test_load_outside_pkg(self):
        module = util.import_module_from_file(os.path.__file__)

        # os imports the OS-specific path libraries under the name `path`. Our
        # importer will import the actual file, thus the module name should be
        # the real one.
        assert (module is sys.modules.get('posixpath') or
                module is sys.modules.get('ntpath') or
                module is sys.modules.get('macpath'))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_twice,"def test_load_twice(self):
        filename = os.path.abspath('reframe')
        module1 = util.import_module_from_file(filename)
        module2 = util.import_module_from_file(filename)
        assert module1 is module2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_load_namespace_package,"def test_load_namespace_package(self):
        module = util.import_module_from_file('unittests/resources')
        assert 'unittests' in sys.modules
        assert 'unittests.resources' in sys.modules


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_simple_types,"def test_simple_types(self):
        assert util.ppretty(1) == repr(1)
        assert util.ppretty(1.2) == repr(1.2)
        assert util.ppretty('a string') == repr('a string')
        assert util.ppretty([]) == '[]'
        assert util.ppretty(()) == '()'
        assert util.ppretty(set()) == 'set()'
        assert util.ppretty({}) == '{}'
        assert util.ppretty([1, 2, 3]) == '[\n    1,\n    2,\n    3\n]'
        assert util.ppretty((1, 2, 3)) == '(\n    1,\n    2,\n    3\n)'
        assert util.ppretty({1, 2, 3}) == '{\n    1,\n    2,\n    3\n}'
        assert util.ppretty({'a': 1, 'b': 2}) == (""{\n""
                                                  ""    'a': 1,\n""
                                                  ""    'b': 2\n""
                                                  ""}"")

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_mixed_types,"def test_mixed_types(self):
        assert (
            util.ppretty(['a string', 2, 'another string']) ==
            ""[\n""
            ""    'a string',\n""
            ""    2,\n""
            ""    'another string'\n""
            ""]""
        )
        assert util.ppretty({'a': 1, 'b': (2, 3)}) == (""{\n""
                                                       ""    'a': 1,\n""
                                                       ""    'b': (\n""
                                                       ""        2,\n""
                                                       ""        3\n""
                                                       ""    )\n""
                                                       ""}"")
        assert (
            util.ppretty({'a': 1, 'b': {2: {3: 4, 5: {}}}, 'c': 6}) ==
            ""{\n""
            ""    'a': 1,\n""
            ""    'b': {\n""
            ""        2: {\n""
            ""            3: 4,\n""
            ""            5: {}\n""
            ""        }\n""
            ""    },\n""
            ""    'c': 6\n""
            ""}"")
        assert (
            util.ppretty({'a': 2, 34: (2, 3),
                          'b': [[], [1.2, 3.4], {1, 2}]}) ==
            ""{\n""
            ""    'a': 2,\n""
            ""    34: (\n""
            ""        2,\n""
            ""        3\n""
            ""    ),\n""
            ""    'b': [\n""
            ""        [],\n""
            ""        [\n""
            ""            1.2,\n""
            ""            3.4\n""
            ""        ],\n""
            ""        {\n""
            ""            1,\n""
            ""            2\n""
            ""        }\n""
            ""    ]\n""
            ""}""
        )

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_obj_print,"def test_obj_print(self):
        ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_repr_default,"def test_repr_default():
    c0, c1 = _Y(1), _Y(2, _X())
    s = util.repr([c0, c1])
    assert s == f'''[
    _Y({{
        'x': 1,
        'y': 'foo',
        'z': _Y(...)@{hex(id(c0))},
        'a': None
    }})@{hex(id(c0))},
    _Y({{
        'x': 2,
        'y': 'foo',
        'z': _Y(...)@{hex(id(c1))},
        'a': _X({{
            '_a': False
        }})@{hex(id(c1.a))}
    }})@{hex(id(c1))}
]'''


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_change_dir_working,"def test_change_dir_working(self):
        with os_ext.change_dir(self.temp_dir):
            assert os.getcwd(), self.temp_dir

        assert os.getcwd() == self.wd_save

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_exception_propagation,"def test_exception_propagation(self):
        try:
            with os_ext.change_dir(self.temp_dir):
                raise RuntimeError
        except RuntimeError:
            assert os.getcwd() == self.wd_save
        else:
            pytest.fail('exception not propagated by the ctx manager')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_allx,"def test_allx(self):
        l1 = [1, 1, 1]
        l2 = [True, False]
        assert all(l1), util.allx(l1)
        assert not all(l2), util.allx(l2)
        assert not util.allx([])
        assert util.allx(i for i in [1, 1, 1])
        assert util.allx(i for i in range(1, 2))
        assert not util.allx(i for i in range(1))
        assert not util.allx(i for i in range(0))
        with pytest.raises(TypeError):
            util.allx(None)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_decamelize,"def test_decamelize(self):
        assert '' == util.decamelize('')
        assert 'my_base_class' == util.decamelize('MyBaseClass')
        assert 'my_base_class12' == util.decamelize('MyBaseClass12')
        assert 'my_class_a' == util.decamelize('MyClass_A')
        assert 'my_class' == util.decamelize('my_class')
        with pytest.raises(TypeError):
            util.decamelize(None)

        with pytest.raises(TypeError):
            util.decamelize(12)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_sanitize,"def test_sanitize(self):
        assert '' == util.toalphanum('')
        assert 'ab12' == util.toalphanum('ab12')
        assert 'ab1_2' == util.toalphanum('ab1_2')
        assert 'ab1__2' == util.toalphanum('ab1**2')
        assert 'ab__12_' == util.toalphanum('ab (12)')
        with pytest.raises(TypeError):
            util.toalphanum(None)

        with pytest.raises(TypeError):
            util.toalphanum(12)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_construction,"def test_construction(self):
        d = {
            'a': {'k1': 3, 'k2': 4},
            'b': {'k3': 5}
        }
        namespace_dict = reframe.utility.ScopedDict()
        namespace_dict = reframe.utility.ScopedDict(d)

        # Change local dict and verify that the stored values are not affected
        d['a']['k1'] = 10
        d['b']['k3'] = 10
        assert 3 == namespace_dict['a:k1']
        assert 5 == namespace_dict['b:k3']
        del d['b']
        assert 'b:k3' in namespace_dict

        with pytest.raises(TypeError):
            reframe.utility.ScopedDict(1)

        with pytest.raises(TypeError):
            reframe.utility.ScopedDict({'a': 1, 'b': 2})

        with pytest.raises(TypeError):
            reframe.utility.ScopedDict([('a', 1), ('b', 2)])

        with pytest.raises(TypeError):
            reframe.utility.ScopedDict({'a': {1: 'k1'}, 'b': {2: 'k2'}})

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_contains,"def test_contains(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        # Test simple lookup
        assert 'a:k1' in scoped_dict
        assert 'a:k2' in scoped_dict
        assert 'a:k3' in scoped_dict
        assert 'a:k4' in scoped_dict

        assert 'a:b:k1' in scoped_dict
        assert 'a:b:k2' in scoped_dict
        assert 'a:b:k3' in scoped_dict
        assert 'a:b:k4' in scoped_dict

        assert 'a:b:c:k1' in scoped_dict
        assert 'a:b:c:k2' in scoped_dict
        assert 'a:b:c:k3' in scoped_dict
        assert 'a:b:c:k4' in scoped_dict

        # Test global scope
        assert 'k1' in scoped_dict
        assert 'k2' not in scoped_dict
        assert 'k3' in scoped_dict
        assert 'k4' in scoped_dict

        assert ':k1' in scoped_dict
        assert ':k2' not in scoped_dict
        assert ':k3' in scoped_dict
        assert ':k4' in scoped_dict

        assert '*:k1' in scoped_dict
        assert '*:k2' not in scoped_dict
        assert '*:k3' in scoped_dict
        assert '*:k4' in scoped_dict

        # Try to get full scopes as keys
        assert 'a' not in scoped_dict
        assert 'a:b' not in scoped_dict
        assert 'a:b:c' not in scoped_dict
        assert 'a:b:c:d' not in scoped_dict
        assert '*' not in scoped_dict
        assert '' not in scoped_dict

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_iter_keys,"def test_iter_keys(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        expected_keys = [
            'a:k1', 'a:k2',
            'a:b:k1', 'a:b:k3',
            'a:b:c:k2', 'a:b:c:k3',
            '*:k1', '*:k3', '*:k4'
        ]
        assert sorted(expected_keys) == sorted(k for k in scoped_dict.keys())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_iter_items,"def test_iter_items(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        expected_items = [
            ('a:k1', 1), ('a:k2', 2),
            ('a:b:k1', 3), ('a:b:k3', 4),
            ('a:b:c:k2', 5), ('a:b:c:k3', 6),
            ('*:k1', 7), ('*:k3', 9), ('*:k4', 10)
        ]
        assert (sorted(expected_items) ==
                sorted(item for item in scoped_dict.items()))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_iter_values,"def test_iter_values(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        expected_values = [1, 2, 3, 4, 5, 6, 7, 9, 10]
        assert expected_values == sorted(v for v in scoped_dict.values())

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_key_resolution,"def test_key_resolution(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        assert 1 == scoped_dict['a:k1']
        assert 2 == scoped_dict['a:k2']
        assert 9 == scoped_dict['a:k3']
        assert 10 == scoped_dict['a:k4']

        assert 3 == scoped_dict['a:b:k1']
        assert 2 == scoped_dict['a:b:k2']
        assert 4 == scoped_dict['a:b:k3']
        assert 10 == scoped_dict['a:b:k4']

        assert 3 == scoped_dict['a:b:c:k1']
        assert 5 == scoped_dict['a:b:c:k2']
        assert 6 == scoped_dict['a:b:c:k3']
        assert 10 == scoped_dict['a:b:c:k4']

        # Test global scope
        assert 7 == scoped_dict['k1']
        with pytest.raises(KeyError):
            scoped_dict['k2']

        assert 9 == scoped_dict['k3']
        assert 10 == scoped_dict['k4']

        assert 7 == scoped_dict[':k1']
        with pytest.raises(KeyError):
            scoped_dict[':k2']

        assert 9 == scoped_dict[':k3']
        assert 10 == scoped_dict[':k4']

        assert 7 == scoped_dict['*:k1']
        with pytest.raises(KeyError):
            scoped_dict['*:k2']

        assert 9 == scoped_dict['*:k3']
        assert 10 == scoped_dict['*:k4']

        # Try to fool it, by requesting keys with scope names
        with pytest.raises(KeyError):
            scoped_dict['a']

        with pytest.raises(KeyError):
            scoped_dict['a:b']

        with pytest.raises(KeyError):
            scoped_dict['a:b:c']

        with pytest.raises(KeyError):
            scoped_dict['a:b:c:d']

        with pytest.raises(KeyError):
            scoped_dict['*']

        with pytest.raises(KeyError):
            scoped_dict['']

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_setitem,"def test_setitem(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        scoped_dict['a:k2'] = 20
        scoped_dict['c:k2'] = 30
        scoped_dict[':k4'] = 40
        scoped_dict['*:k5'] = 50
        scoped_dict['k6'] = 60
        assert 20 == scoped_dict['a:k2']
        assert 30 == scoped_dict['c:k2']
        assert 40 == scoped_dict[':k4']
        assert 50 == scoped_dict['k5']
        assert 60 == scoped_dict['k6']

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_delitem,"def test_delitem(self):
        scoped_dict = reframe.utility.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        # delete key
        del scoped_dict['a:k1']
        assert 7 == scoped_dict['a:k1']

        # delete key from global scope
        del scoped_dict['k1']
        assert 9 == scoped_dict['k3']
        assert 10 == scoped_dict['k4']
        with pytest.raises(KeyError):
            scoped_dict['k1']

        # delete a whole scope
        del scoped_dict['*']
        with pytest.raises(KeyError):
            scoped_dict[':k4']

        with pytest.raises(KeyError):
            scoped_dict['a:k3']

        # try to delete a non-existent key
        with pytest.raises(KeyError):
            del scoped_dict['a:k4']

        # test deletion of parent scope keeping a nested one
        scoped_dict = reframe.utility.ScopedDict()
        scoped_dict['s0:k0'] = 1
        scoped_dict['s0:s1:k0'] = 2
        scoped_dict['*:k0'] = 3
        del scoped_dict['s0']
        assert 3 == scoped_dict['s0:k0']
        assert 2 == scoped_dict['s0:s1:k0']

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_scope_key_name_pseudoconflict,"def test_scope_key_name_pseudoconflict(self):
        scoped_dict = reframe.utility.ScopedDict({
            's0': {'s1': 1},
            's0:s1': {'k0': 2}
        })

        assert 1 == scoped_dict['s0:s1']
        assert 2 == scoped_dict['s0:s1:k0']

        del scoped_dict['s0:s1']
        assert 2 == scoped_dict['s0:s1:k0']
        with pytest.raises(KeyError):
            scoped_dict['s0:s1']

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_update,"def test_update(self):
        scoped_dict = util.ScopedDict({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })

        scoped_dict_alt = util.ScopedDict({'a': {'k1': 3, 'k2': 5}})
        scoped_dict_alt.update({
            'a': {'k1': 1, 'k2': 2},
            'a:b': {'k1': 3, 'k3': 4},
            'a:b:c': {'k2': 5, 'k3': 6},
            '*': {'k1': 7, 'k3': 9, 'k4': 10}
        })
        assert scoped_dict == scoped_dict_alt


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_sequence,"def test_sequence(self):
        l = util.SequenceView([1, 2, 2])
        assert 1 == l[0]
        assert 3 == len(l)
        assert 2 in l
        assert l == [1, 2, 2]
        assert l == util.SequenceView([1, 2, 2])
        assert list(reversed(l)) == [2, 2, 1]
        assert 1 == l.index(2)
        assert 2 == l.count(2)
        assert str(l) == str([1, 2, 2])

        # Assert immutability
        m = l + [3, 4]
        assert [1, 2, 2, 3, 4] == m
        assert isinstance(m, util.SequenceView)

        m = l
        l += [3, 4]
        assert m is not l
        assert [1, 2, 2] == m
        assert [1, 2, 2, 3, 4] == l
        assert isinstance(l, util.SequenceView)

        with pytest.raises(TypeError):
            l[1] = 3

        with pytest.raises(TypeError):
            l[1:2] = [3]

        with pytest.raises(TypeError):
            l *= 3

        with pytest.raises(TypeError):
            del l[:1]

        with pytest.raises(AttributeError):
            l.append(3)

        with pytest.raises(AttributeError):
            l.clear()

        with pytest.raises(AttributeError):
            s = l.copy()

        with pytest.raises(AttributeError):
            l.extend([3, 4])

        with pytest.raises(AttributeError):
            l.insert(1, 4)

        with pytest.raises(AttributeError):
            l.pop()

        with pytest.raises(AttributeError):
            l.remove(2)

        with pytest.raises(AttributeError):
            l.reverse()

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_mapping,"def test_mapping(self):
        d = util.MappingView({'a': 1, 'b': 2})
        assert 1 == d['a']
        assert 2 == len(d)
        assert {'a': 1, 'b': 2} == dict(d)
        assert 'b' in d
        assert {'a', 'b'} == set(d.keys())
        assert {1, 2} == set(d.values())
        assert {('a', 1), ('b', 2)} == set(d.items())
        assert 2 == d.get('b')
        assert 3 == d.get('c', 3)
        assert {'a': 1, 'b': 2} == d
        assert d == util.MappingView({'b': 2, 'a': 1})
        assert str(d) == str({'a': 1, 'b': 2})
        assert {'a': 1, 'b': 2, 'c': 3} != d

        # Assert immutability
        with pytest.raises(TypeError):
            d['c'] = 3

        with pytest.raises(TypeError):
            del d['b']

        with pytest.raises(AttributeError):
            d.pop('a')

        with pytest.raises(AttributeError):
            d.popitem()

        with pytest.raises(AttributeError):
            d.clear()

        with pytest.raises(AttributeError):
            d.update({'a': 4, 'b': 5})

        with pytest.raises(AttributeError):
            d.setdefault('c', 3)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_construction,"def test_construction(self):
        l = list(range(10))
        random.shuffle(l)

        s = util.OrderedSet(l + l)
        assert len(s) == 10
        for i in range(10):
            assert i in s

        assert list(s) == l

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_construction_empty,"def test_construction_empty(self):
        s = util.OrderedSet()
        assert s == set()
        assert set() == s

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_str,"def test_str(self):
        l = list(range(10))
        random.shuffle(l)

        s = util.OrderedSet(l)
        assert str(s) == str(l).replace('[', '{').replace(']', '}')

        s = util.OrderedSet()
        assert str(s) == type(s).__name__ + '()'

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_construction_error,"def test_construction_error(self):
        with pytest.raises(TypeError):
            s = util.OrderedSet(2)

        with pytest.raises(TypeError):
            s = util.OrderedSet(1, 2, 3)

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_operators,"def test_operators(self):
        s0 = util.OrderedSet(range(10))
        s1 = util.OrderedSet(range(20))
        s2 = util.OrderedSet(range(10, 20))

        assert s0 == set(range(10))
        assert set(range(10)) == s0
        assert s0 != s1
        assert s1 != s0

        assert s0 < s1
        assert s0 <= s1
        assert s0 <= s0
        assert s1 > s0
        assert s1 >= s0
        assert s1 >= s1

        assert s0.issubset(s1)
        assert s1.issuperset(s0)

        assert (s0 & s1) == s0
        assert (s0 & s2) == set()
        assert (s0 | s2) == s1

        assert (s1 - s0) == s2
        assert (s2 - s0) == s2

        assert (s0 ^ s1) == s2

        assert s0.isdisjoint(s2)
        assert not s0.isdisjoint(s1)
        assert s0.symmetric_difference(s1) == s2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_union,"def test_union(self):
        l0 = list(range(10))
        l1 = list(range(10, 20))
        l2 = list(range(20, 30))
        random.shuffle(l0)
        random.shuffle(l1)
        random.shuffle(l2)

        s0 = util.OrderedSet(l0)
        s1 = util.OrderedSet(l1)
        s2 = util.OrderedSet(l2)

        assert list(s0.union(s1, s2)) == l0 + l1 + l2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_intersection,"def test_intersection(self):
        l0 = list(range(10, 40))
        l1 = list(range(20, 40))
        l2 = list(range(20, 30))
        random.shuffle(l0)
        random.shuffle(l1)
        random.shuffle(l2)

        s0 = util.OrderedSet(l0)
        s1 = util.OrderedSet(l1)
        s2 = util.OrderedSet(l2)

        assert s0.intersection(s1, s2) == s2

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_difference,"def test_difference(self):
        l0 = list(range(10, 40))
        l1 = list(range(20, 40))
        l2 = list(range(20, 30))
        random.shuffle(l0)
        random.shuffle(l1)
        random.shuffle(l2)

        s0 = util.OrderedSet(l0)
        s1 = util.OrderedSet(l1)
        s2 = util.OrderedSet(l2)

        assert s0.difference(s1, s2) == set(range(10, 20))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_reversed,"def test_reversed(self):
        l = list(range(10))
        random.shuffle(l)

        s = util.OrderedSet(l)
        assert list(reversed(s)) == list(reversed(l))

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_concat_files,"def test_concat_files(self):
        with tempfile.TemporaryDirectory(dir='unittests') as tmpdir:
            with os_ext.change_dir(tmpdir):
                file1 = 'in1.txt'
                file2 = 'in2.txt'
                concat_file = 'out.txt'
                with open(file1, 'w') as f1:
                    f1.write('Hello1')

                with open(file2, 'w') as f2:
                    f2.write('Hello2')

                os_ext.concat_files(concat_file, file1, file2, overwrite=True)
                with open(concat_file) as cf:
                    out = cf.read()
                    assert out == 'Hello1\nHello2\n'

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_unique_abs_paths,"def test_unique_abs_paths(self):
        p1 = 'a/b/c'
        p2 = p1[:]
        p3 = 'a/b'
        p4 = '/d/e//'
        p5 = '/d/e/f'
        expected_paths = [os.path.abspath('a/b'), '/d/e']
        actual_paths = os_ext.unique_abs_paths(
            [p1, p2, p3, p4, p5])
        assert expected_paths == actual_paths

        expected_paths = [os.path.abspath('a/b/c'),  os.path.abspath('a/b'),
                          '/d/e', '/d/e/f']
        actual_paths = os_ext.unique_abs_paths(
            [p1, p2, p3, p4, p5], prune_children=False)
        assert expected_paths == actual_paths

        with pytest.raises(TypeError):
            os_ext.unique_abs_paths(None)


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cdt_version,"def test_cray_cdt_version(tmp_path, monkeypatch):
    # Mock up a CDT file
    rcfile = tmp_path / 'rcfile'
    with open(rcfile, 'w') as fp:
        fp.write('#%Module CDT 20.06\nblah blah\n')

    monkeypatch.setenv('MODULERCFILE', str(rcfile))
    assert os_ext.cray_cdt_version() == '20.06'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cdt_version_unknown_fmt,"def test_cray_cdt_version_unknown_fmt(tmp_path, monkeypatch):
    # Mock up a CDT file
    rcfile = tmp_path / 'rcfile'
    with open(rcfile, 'w') as fp:
        fp.write('random stuff')

    monkeypatch.setenv('MODULERCFILE', str(rcfile))
    assert os_ext.cray_cdt_version() is None


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cdt_version_empty_file,"def test_cray_cdt_version_empty_file(tmp_path, monkeypatch):
    # Mock up a CDT file
    rcfile = tmp_path / 'rcfile'
    rcfile.touch()
    monkeypatch.setenv('MODULERCFILE', str(rcfile))
    assert os_ext.cray_cdt_version() is None


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cdt_version_no_such_file,"def test_cray_cdt_version_no_such_file(tmp_path, monkeypatch):
    # Mock up a CDT file
    rcfile = tmp_path / 'rcfile'
    monkeypatch.setenv('MODULERCFILE', str(rcfile))
    assert os_ext.cray_cdt_version() is None


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cle_info,"def test_cray_cle_info(tmp_path):
    # Mock up a CLE release
    cle_info_file = tmp_path / 'cle-release'
    with open(cle_info_file, 'w') as fp:
        fp.write('RELEASE=7.0.UP01\n'
                 'BUILD=7.0.1227\n'
                 'DATE=20200326\n'
                 'ARCH=noarch\n'
                 'NETWORK=ari\n'
                 'PATCHSET=09-202003261814\n')

    cle_info = os_ext.cray_cle_info(cle_info_file)
    assert cle_info.release == '7.0.UP01'
    assert cle_info.build == '7.0.1227'
    assert cle_info.date == '20200326'
    assert cle_info.network == 'ari'
    assert cle_info.patchset == '09'


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cle_info_no_such_file,"def test_cray_cle_info_no_such_file(tmp_path):
    cle_info_file = tmp_path / 'cle-release'
    assert os_ext.cray_cle_info(cle_info_file) is None


",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_utility.py,,test_cray_cle_info_missing_parts,"def test_cray_cle_info_missing_parts(tmp_path):
    # Mock up a CLE release
    cle_info_file = tmp_path / 'cle-release'
    with open(cle_info_file, 'w') as fp:
        fp.write('RELEASE=7.0.UP01\n'
                 'PATCHSET=09-202003261814\n')

    cle_info = os_ext.cray_cle_info(cle_info_file)
    assert cle_info.release == '7.0.UP01'
    assert cle_info.build is None
    assert cle_info.date is None
    assert cle_info.network is None
    assert cle_info.patchset == '09'
",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,,test_version_format,"def test_version_format(self):
        Version('1.2')
        Version('1.2.3')
        Version('1.2-dev0')
        Version('1.2-dev5')
        Version('1.2.3-dev2')
        with pytest.raises(ValueError):
            Version(None)

        with pytest.raises(ValueError):
            Version('')

        with pytest.raises(ValueError):
            Version('1')

        with pytest.raises(ValueError):
            Version('1.2a')

        with pytest.raises(ValueError):
            Version('a.b.c')

        with pytest.raises(ValueError):
            Version('1.2.3-dev')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,,test_comparing_versions,"def test_comparing_versions(self):
        assert Version('1.2') < Version('1.2.1')
        assert Version('1.2.1') < Version('1.2.2')
        assert Version('1.2.2') < Version('1.3-dev0')
        assert Version('1.3-dev0') < Version('1.3-dev1')
        assert Version('1.3-dev1') < Version('1.3')
        assert Version('1.3') == Version('1.3.0')
        assert Version('1.3-dev1') == Version('1.3.0-dev1')
        assert Version('1.12.3') > Version('1.2.3')
        assert Version('1.2.23') > Version('1.2.3')

    ",False
-1,reframe,https://github.com/reframe-hpc/reframe/blob/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,https://raw.githubusercontent.com/reframe-hpc/reframe/576eb3f1dcc015d1e6d7a10602c748d4f810da68/unittests/test_versioning.py,,test_version_validation,"def test_version_validation(self):
        conditions = [VersionValidator('<=1.0.0'),
                      VersionValidator('2.0.0..2.5'),
                      VersionValidator('3.0')]

        assert all([any(c.validate('0.1') for c in conditions),
                    any(c.validate('2.0.0') for c in conditions),
                    any(c.validate('2.2') for c in conditions),
                    any(c.validate('2.5') for c in conditions),
                    any(c.validate('3.0') for c in conditions),
                    not any(c.validate('3.1') for c in conditions)])
        with pytest.raises(ValueError):
            VersionValidator('2.0.0..')

        with pytest.raises(ValueError):
            VersionValidator('..2.0.0')

        with pytest.raises(ValueError):
            VersionValidator('1.0.0..2.0.0..3.0.0')

        with pytest.raises(ValueError):
            VersionValidator('=>2.0.0')

        with pytest.raises(ValueError):
            VersionValidator('2.0.0>')

        with pytest.raises(ValueError):
            VersionValidator('2.0.0>1.0.0')

        with pytest.raises(ValueError):
            VersionValidator('=>')

        with pytest.raises(ValueError):
            VersionValidator('>1')
",False
1896,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_invalid_pubkey_for_user_robey,"def test_app_auth_with_invalid_pubkey_for_user_robey(self):
        url = self.get_url('/')
        privatekey = 'h' * 1024
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }

        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid key', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    @tornado.testing.gen_test
    ",True
1897,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_pubkey_cannot_be_decoded_by_multipart_form,"def test_app_auth_with_pubkey_cannot_be_decoded_by_multipart_form(self):
        url = self.get_url('/')
        privatekey = 'h' * 1024
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        body = body.encode('utf-8')
        # added some gbk bytes to the privatekey, make it cannot be decoded
        body = body[:-100] + b'\xb4\xed\xce\xf3' + body[-100:]
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid unicode', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    ",True
1898,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_pubkey_exceeds_key_max_size,"def test_app_auth_with_pubkey_exceeds_key_max_size(self):
        url = self.get_url('/')
        privatekey = 'h' * (handler.PrivateKey.max_length + 1)
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        if swallow_http_errors:
            response = yield self.async_post(url, body, headers=headers)
            self.assertIn(b'Invalid key', response.body)
        else:
            with self.assertRaises(HTTPError) as ctx:
                yield self.async_post(url, body, headers=headers)
            self.assertIn('Bad Request', ctx.exception.message)

    @tornado.testing.gen_test
    ",True
1899,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_valid_pubkey_by_multipart_form,"def test_app_auth_with_valid_pubkey_by_multipart_form(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        response = yield self.async_post(url, body, headers=headers)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1900,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_auth_with_valid_pubkey_by_urlencoded_form,"def test_app_auth_with_valid_pubkey_by_urlencoded_form(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(privatekey=privatekey)
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1901,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_post_form_with_large_body_size_by_multipart_form,"def test_app_post_form_with_large_body_size_by_multipart_form(self):
        privatekey = 'h' * (2 * max_body_size)
        files = [('privatekey', 'user_rsa_key', privatekey)]
        content_type, body = encode_multipart_formdata(self.body_dict.items(),
                                                       files)
        headers = {
            'Content-Type': content_type, 'content-length': str(len(body))
        }
        response = self.sync_post('/', body, headers=headers)
        self.assertIn(response.code, [400, 599])

    ",True
1902,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_post_form_with_large_body_size_by_urlencoded_form,"def test_app_post_form_with_large_body_size_by_urlencoded_form(self):
        privatekey = 'h' * (2 * max_body_size)
        body = self.body + '&privatekey=' + privatekey
        response = self.sync_post('/', body)
        self.assertIn(response.code, [400, 599])

    @tornado.testing.gen_test
    ",True
1903,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials,"def test_app_with_correct_credentials(self):
        response = self.sync_post('/', self.body)
        self.assert_status_none(json.loads(to_str(response.body)))

    ",True
1904,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_empty_id,"def test_app_with_correct_credentials_but_empty_id(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id='
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Missing value id', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1905,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_ip_not_matched,"def test_app_with_correct_credentials_but_ip_not_matched(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        clients = handler.clients
        handler.clients = {}
        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertEqual(ws.close_reason, 'Websocket authentication failed.')
        handler.clients = clients

    @tornado.testing.gen_test
    ",True
1906,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_with_no_port,"def test_app_with_correct_credentials_but_with_no_port(self):
        default_port = handler.DEFAULT_PORT
        handler.DEFAULT_PORT = self.sshserver_port

        # with no port value
        body = self.body.replace(str(self.sshserver_port), '')
        response = self.sync_post('/', body)
        self.assert_status_none(json.loads(to_str(response.body)))

        # with no port argument
        body = body.replace('port=&', '')
        response = self.sync_post('/', body)
        self.assert_status_none(json.loads(to_str(response.body)))

        handler.DEFAULT_PORT = default_port

    @tornado.testing.gen_test
    ",True
1907,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_without_id_argument,"def test_app_with_correct_credentials_but_without_id_argument(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws'
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Missing argument id', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1908,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_but_wrong_id,"def test_app_with_correct_credentials_but_wrong_id(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=1' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertIn('Websocket authentication failed', ws.close_reason)

    @tornado.testing.gen_test
    ",True
1909,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_timeout,"def test_app_with_correct_credentials_timeout(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        yield tornado.gen.sleep(handler.DELAY + 0.1)
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertIsNone(msg)
        self.assertEqual(ws.close_reason, 'Websocket authentication failed.')

    @tornado.testing.gen_test
    ",True
1910,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_user_bar,"def test_app_with_correct_credentials_user_bar(self):
        body = self.body.replace('robey', 'bar')
        url = self.get_url('/')
        response = yield self.async_post(url, body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)

        # messages below will be ignored silently
        yield ws.write_message('hello')
        yield ws.write_message('""hello""')
        yield ws.write_message('[hello]')
        yield ws.write_message(json.dumps({'resize': []}))
        yield ws.write_message(json.dumps({'resize': {}}))
        yield ws.write_message(json.dumps({'resize': 'ab'}))
        yield ws.write_message(json.dumps({'resize': ['a', 'b']}))
        yield ws.write_message(json.dumps({'resize': {'a': 1, 'b': 2}}))
        yield ws.write_message(json.dumps({'resize': [100]}))
        yield ws.write_message(json.dumps({'resize': [100]*10}))
        yield ws.write_message(json.dumps({'resize': [-1, -1]}))
        yield ws.write_message(json.dumps({'data': [1]}))
        yield ws.write_message(json.dumps({'data': (1,)}))
        yield ws.write_message(json.dumps({'data': {'a': 2}}))
        yield ws.write_message(json.dumps({'data': 1}))
        yield ws.write_message(json.dumps({'data': 2.1}))
        yield ws.write_message(json.dumps({'key-non-existed': 'hello'}))
        # end - those just for testing webssh websocket stablity

        yield ws.write_message(json.dumps({'resize': [79, 23]}))
        msg = yield ws.read_message()
        self.assertEqual(b'resized', msg)

        yield ws.write_message(json.dumps({'data': 'bye'}))
        msg = yield ws.read_message()
        self.assertEqual(b'bye', msg)
        ws.close()

    @tornado.testing.gen_test
    ",True
1911,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_correct_credentials_user_robey,"def test_app_with_correct_credentials_user_robey(self):
        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)
        ws.close()

    @tornado.testing.gen_test
    ",True
1912,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_invalid_form_for_invalid_value,"def test_app_with_invalid_form_for_invalid_value(self):
        body = 'hostname=127.0.0&port=22&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid hostname', response)

        body = 'hostname=http://www.googe.com&port=22&username=&password&_xsrf=yummy'  # noqa
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid hostname', response)

        body = 'hostname=127.0.0.1&port=port&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid port', response)

        body = 'hostname=127.0.0.1&port=70000&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Invalid port', response)

    ",True
1913,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_invalid_form_for_missing_argument,"def test_app_with_invalid_form_for_missing_argument(self):
        response = self.fetch('/')
        self.assertEqual(response.code, 200)

        body = 'port=7000&username=admin&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing argument hostname', response)

        body = 'hostname=127.0.0.1&port=7000&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing argument username', response)

        body = 'hostname=&port=&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing value hostname', response)

        body = 'hostname=127.0.0.1&port=7000&username=&password&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assert_response(b'Missing value username', response)

    ",True
1914,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_keyonly_for_bad_authentication_type,"def test_app_with_user_keyonly_for_bad_authentication_type(self):
        self.body_dict.update(username='keyonly', password='foo')
        response = yield self.async_post('/', self.body_dict)
        self.assertEqual(response.code, 200)
        self.assert_status_in('Bad authentication type', json.loads(to_str(response.body))) # noqa

    @tornado.testing.gen_test
    ",True
1915,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pass2fa_with_correct_passwords,"def test_app_with_user_pass2fa_with_correct_passwords(self):
        self.body_dict.update(username='pass2fa', password='password',
                              totp='passcode')
        response = yield self.async_post('/', self.body_dict)
        self.assertEqual(response.code, 200)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1916,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pass2fa_with_wrong_pkey_correct_passwords,"def test_app_with_user_pass2fa_with_wrong_pkey_correct_passwords(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pass2fa', password='password',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1917,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_correct_passwords,"def test_app_with_user_pkey2fa_with_correct_passwords(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

    @tornado.testing.gen_test
    ",True
1918,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_empty_passcode,"def test_app_with_user_pkey2fa_with_empty_passcode(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Need a verification code', data)


",True
1919,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_wrong_passcode,"def test_app_with_user_pkey2fa_with_wrong_passcode(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='password',
                              privatekey=privatekey, totp='wrongpasscode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Authentication failed', data)

    @tornado.testing.gen_test
    ",True
1920,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_user_pkey2fa_with_wrong_password,"def test_app_with_user_pkey2fa_with_wrong_password(self):
        url = self.get_url('/')
        privatekey = read_file(make_tests_data_path('user_rsa_key'))
        self.body_dict.update(username='pkey2fa', password='wrongpassword',
                              privatekey=privatekey, totp='passcode')
        response = yield self.async_post(url, self.body_dict)
        data = json.loads(to_str(response.body))
        self.assert_status_in('Authentication failed', data)

    @tornado.testing.gen_test
    ",True
1921,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_credentials,"def test_app_with_wrong_credentials(self):
        response = self.sync_post('/', self.body + 's')
        self.assert_status_in('Authentication failed.', json.loads(to_str(response.body))) # noqa

    ",True
1922,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_hostname_domain,"def test_app_with_wrong_hostname_domain(self):
        body = 'hostname=xxxxxxxxxxxx&port=2200&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
1923,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_hostname_ip,"def test_app_with_wrong_hostname_ip(self):
        body = 'hostname=127.0.0.2&port=2200&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
1924,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,TestAppBasic,test_app_with_wrong_port,"def test_app_with_wrong_port(self):
        body = 'hostname=127.0.0.1&port=7000&username=admin&_xsrf=yummy'
        response = self.sync_post('/', body)
        self.assertEqual(response.code, 200)
        self.assertIn(b'Unable to connect to', response.body)

    ",True
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_server_error_for_post_method,"def test_server_error_for_post_method(self):
        body = dict(self.body, error='raise')
        response = self.sync_post('/', body)
        self.assert_response(b'""status"": ""Internal Server Error""', response)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_html,"def test_html(self):
        response = self.fetch('/', method='GET')
        self.assertIn(b'novalidate>', response.body)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_for_sending_message_with_large_size,"def test_app_for_sending_message_with_large_size(self):
        url = self.get_url('/')
        response = yield self.async_post(url, dict(self.body, username='foo'))
        data = json.loads(to_str(response.body))
        self.assert_status_none(data)

        url = url.replace('http', 'ws')
        ws_url = url + 'ws?id=' + data['id']
        ws = yield tornado.websocket.websocket_connect(ws_url)
        msg = yield ws.read_message()
        self.assertEqual(to_str(msg, data['encoding']), banner)

        send = 'h' * (64 * 1024) + '\r\n\r\n'
        yield ws.write_message(json.dumps({'data': send}))
        lst = []
        while True:
            msg = yield ws.read_message()
            lst.append(msg)
            if msg.endswith(b'\r\n\r\n'):
                break
        recv = b''.join(lst).decode(data['encoding'])
        self.assertEqual(send, recv)
        ws.close()


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_hostname_not_in_hostkeys,"def test_app_with_hostname_not_in_hostkeys(self):
        response = yield self.async_post('/', self.body)
        data = json.loads(to_str(response.body))
        message = 'Connection to {}:{} is not allowed.'.format(self.body['hostname'], self.sshserver_port) # noqa
        self.assertEqual(message, data['status'])


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_bad_host_key,"def test_app_with_bad_host_key(self):
        response = yield self.async_post('/', self.body)
        data = json.loads(to_str(response.body))
        self.assertEqual('Bad host key.', data['status'])


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_forbidden_get_request,"def test_with_forbidden_get_request(self):
        response = self.fetch('/', method='GET')
        self.assertEqual(response.code, 403)
        self.assertIn('Forbidden', response.error.message)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_forbidden_post_request,"def test_with_forbidden_post_request(self):
        response = self.sync_post('/', self.body)
        self.assertEqual(response.code, 403)
        self.assertIn('Forbidden', response.error.message)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_forbidden_put_request,"def test_with_forbidden_put_request(self):
        response = self.fetch_request('/', method='PUT', body=self.body)
        self.assertEqual(response.code, 403)
        self.assertIn('Forbidden', response.error.message)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_not_found_get_request,"def test_with_not_found_get_request(self):
        response = self.fetch('/pathnotfound', method='GET')
        self.assertEqual(response.code, 404)
        self.assertEqual(
            response.headers['Server'], self.custom_headers['Server']
        )
        self.assertIn(b'404: Not Found', response.body)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_not_found_post_request,"def test_with_not_found_post_request(self):
        response = self.sync_post('/pathnotfound', self.body)
        self.assertEqual(response.code, 404)
        self.assertEqual(
            response.headers['Server'], self.custom_headers['Server']
        )
        self.assertIn(b'404: Not Found', response.body)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_not_found_put_request,"def test_with_not_found_put_request(self):
        response = self.fetch_request('/pathnotfound', method='PUT',
                                      body=self.body)
        self.assertEqual(response.code, 404)
        self.assertEqual(
            response.headers['Server'], self.custom_headers['Server']
        )
        self.assertIn(b'404: Not Found', response.body)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_index_path,"def test_with_index_path(self):
        response = self.fetch('/', method='HEAD')
        self.assertEqual(response.code, 200)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_ws_path,"def test_with_ws_path(self):
        response = self.fetch('/ws', method='HEAD')
        self.assertEqual(response.code, 405)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_with_not_found_path,"def test_with_not_found_path(self):
        response = self.fetch('/notfound', method='HEAD')
        self.assertEqual(response.code, 404)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_method_not_supported,"def test_app_with_method_not_supported(self):
        with self.assertRaises(HTTPError) as ctx:
            yield self.fetch_request('/', 'PUT', self.body, sync=False)
        self.assertIn('Method Not Allowed', ctx.exception.message)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_too_many_connections,"def test_app_with_too_many_connections(self):
        clients['127.0.0.1'] = {'fake_worker_id': None}

        url = self.get_url('/')
        response = yield self.async_post(url, self.body)
        data = json.loads(to_str(response.body))
        self.assertEqual('Too many live connections.', data['status'])

        clients['127.0.0.1'].clear()
        response = yield self.async_post(url, self.body)
        self.assert_status_none(json.loads(to_str(response.body)))


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_wrong_event_origin,"def test_app_with_wrong_event_origin(self):
        body = dict(self.body, _origin='localhost')
        response = yield self.async_post('/', body)
        self.assert_status_equal('Cross origin operation is not allowed.', json.loads(to_str(response.body))) # noqa

    @tornado.testing.gen_test
    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_wrong_header_origin,"def test_app_with_wrong_header_origin(self):
        headers = dict(Origin='localhost')
        response = yield self.async_post('/', self.body, headers=headers)
        self.assert_status_equal('Cross origin operation is not allowed.', json.loads(to_str(response.body)), ) # noqa

    @tornado.testing.gen_test
    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_correct_event_origin,"def test_app_with_correct_event_origin(self):
        body = dict(self.body, _origin=self.origin)
        response = yield self.async_post('/', body)
        self.assert_status_none(json.loads(to_str(response.body)))
        self.assertIsNone(response.headers.get('Access-Control-Allow-Origin'))

    @tornado.testing.gen_test
    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_correct_header_origin,"def test_app_with_correct_header_origin(self):
        headers = dict(Origin=self.origin)
        response = yield self.async_post('/', self.body, headers=headers)
        self.assert_status_none(json.loads(to_str(response.body)))
        self.assertEqual(
            response.headers.get('Access-Control-Allow-Origin'), self.origin
        )


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_a_bad_encoding,"def test_app_with_a_bad_encoding(self):
        response = yield self.async_post('/', self.body)
        dic = json.loads(to_str(response.body))
        self.assert_status_none(dic)
        self.assertIn(dic['encoding'], server_encodings)


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_app.py,,test_app_with_a_unknown_encoding,"def test_app_with_a_unknown_encoding(self):
        response = yield self.async_post('/', self.body)
        self.assert_status_none(json.loads(to_str(response.body)))
        dic = json.loads(to_str(response.body))
        self.assert_status_none(dic)
        self.assertEqual(dic['encoding'], 'utf-8')
",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_is_forbidden,"def test_is_forbidden(self):
        mhandler = MixinHandler()
        handler.redirecting = True
        options.fbidhttp = True

        context = Mock(
            address=('8.8.8.8', 8888),
            trusted_downstream=['127.0.0.1'],
            _orig_protocol='http'
        )
        hostname = '4.4.4.4'
        self.assertTrue(mhandler.is_forbidden(context, hostname))

        context = Mock(
            address=('8.8.8.8', 8888),
            trusted_downstream=[],
            _orig_protocol='http'
        )
        hostname = 'www.google.com'
        self.assertEqual(mhandler.is_forbidden(context, hostname), False)

        context = Mock(
            address=('8.8.8.8', 8888),
            trusted_downstream=[],
            _orig_protocol='http'
        )
        hostname = '4.4.4.4'
        self.assertTrue(mhandler.is_forbidden(context, hostname))

        context = Mock(
            address=('192.168.1.1', 8888),
            trusted_downstream=[],
            _orig_protocol='http'
        )
        hostname = 'www.google.com'
        self.assertIsNone(mhandler.is_forbidden(context, hostname))

        options.fbidhttp = False
        self.assertIsNone(mhandler.is_forbidden(context, hostname))

        hostname = '4.4.4.4'
        self.assertIsNone(mhandler.is_forbidden(context, hostname))

        handler.redirecting = False
        self.assertIsNone(mhandler.is_forbidden(context, hostname))

        context._orig_protocol = 'https'
        self.assertIsNone(mhandler.is_forbidden(context, hostname))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_redirect_url,"def test_get_redirect_url(self):
        mhandler = MixinHandler()
        hostname = 'www.example.com'
        uri = '/'
        port = 443

        self.assertEqual(
            mhandler.get_redirect_url(hostname, port, uri=uri),
            'https://www.example.com/'
        )

        port = 4433
        self.assertEqual(
            mhandler.get_redirect_url(hostname, port, uri),
            'https://www.example.com:4433/'
        )

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_client_addr,"def test_get_client_addr(self):
        mhandler = MixinHandler()
        client_addr = ('8.8.8.8', 8888)
        context_addr = ('127.0.0.1', 1234)
        options.xheaders = True

        mhandler.context = Mock(address=context_addr)
        mhandler.get_real_client_addr = lambda: None
        self.assertEqual(mhandler.get_client_addr(), context_addr)

        mhandler.context = Mock(address=context_addr)
        mhandler.get_real_client_addr = lambda: client_addr
        self.assertEqual(mhandler.get_client_addr(), client_addr)

        options.xheaders = False
        mhandler.context = Mock(address=context_addr)
        mhandler.get_real_client_addr = lambda: client_addr
        self.assertEqual(mhandler.get_client_addr(), context_addr)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_real_client_addr,"def test_get_real_client_addr(self):
        x_forwarded_for = '1.1.1.1'
        x_forwarded_port = 1111
        x_real_ip = '2.2.2.2'
        x_real_port = 2222
        fake_port = 65535

        mhandler = MixinHandler()
        mhandler.request = HTTPServerRequest(uri='/')
        mhandler.request.remote_ip = x_forwarded_for

        self.assertIsNone(mhandler.get_real_client_addr())

        mhandler.request.headers.add('X-Forwarded-For', x_forwarded_for)
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_forwarded_for, fake_port))

        mhandler.request.headers.add('X-Forwarded-Port', fake_port + 1)
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_forwarded_for, fake_port))

        mhandler.request.headers['X-Forwarded-Port'] = x_forwarded_port
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_forwarded_for, x_forwarded_port))

        mhandler.request.remote_ip = x_real_ip

        mhandler.request.headers.add('X-Real-Ip', x_real_ip)
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_real_ip, fake_port))

        mhandler.request.headers.add('X-Real-Port', fake_port + 1)
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_real_ip, fake_port))

        mhandler.request.headers['X-Real-Port'] = x_real_port
        self.assertEqual(mhandler.get_real_client_addr(),
                         (x_real_ip, x_real_port))


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_class_with_invalid_key_length,"def test_class_with_invalid_key_length(self):
        key = u'a' * (PrivateKey.max_length + 1)

        with self.assertRaises(InvalidValueError) as ctx:
            PrivateKey(key)
        self.assertIn('Invalid key length', str(ctx.exception))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_invalid_key,"def test_get_pkey_obj_with_invalid_key(self):
        key = u'a b c'
        fname = 'abc'

        pk = PrivateKey(key, filename=fname)
        with self.assertRaises(InvalidValueError) as ctx:
            pk.get_pkey_obj()
        self.assertIn('Invalid key {}'.format(fname), str(ctx.exception))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_plain_rsa_key,"def test_get_pkey_obj_with_plain_rsa_key(self):
        pk = self.get_pk_obj('test_rsa.key')
        self.assertIsInstance(pk.get_pkey_obj(), paramiko.RSAKey)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_plain_ed25519_key,"def test_get_pkey_obj_with_plain_ed25519_key(self):
        pk = self.get_pk_obj('test_ed25519.key')
        self.assertIsInstance(pk.get_pkey_obj(), paramiko.Ed25519Key)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_encrypted_rsa_key,"def test_get_pkey_obj_with_encrypted_rsa_key(self):
        fname = 'test_rsa_password.key'
        password = 'television'
        self._test_with_encrypted_key(fname, password, paramiko.RSAKey)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_encrypted_ed25519_key,"def test_get_pkey_obj_with_encrypted_ed25519_key(self):
        fname = 'test_ed25519_password.key'
        password = 'abc123'
        self._test_with_encrypted_key(fname, password, paramiko.Ed25519Key)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_encrypted_new_rsa_key,"def test_get_pkey_obj_with_encrypted_new_rsa_key(self):
        fname = 'test_new_rsa_password.key'
        password = '123456'
        self._test_with_encrypted_key(fname, password, paramiko.RSAKey)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_get_pkey_obj_with_plain_new_dsa_key,"def test_get_pkey_obj_with_plain_new_dsa_key(self):
        pk = self.get_pk_obj('test_new_dsa.key')
        self.assertIsInstance(pk.get_pkey_obj(), paramiko.DSSKey)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_parse_name,"def test_parse_name(self):
        key = u'-----BEGIN PRIVATE KEY-----'
        pk = PrivateKey(key)
        name, _ = pk.parse_name(pk.iostr, pk.tag_to_name)
        self.assertIsNone(name)

        key = u'-----BEGIN xxx PRIVATE KEY-----'
        pk = PrivateKey(key)
        name, _ = pk.parse_name(pk.iostr, pk.tag_to_name)
        self.assertIsNone(name)

        key = u'-----BEGIN  RSA PRIVATE KEY-----'
        pk = PrivateKey(key)
        name, _ = pk.parse_name(pk.iostr, pk.tag_to_name)
        self.assertIsNone(name)

        key = u'-----BEGIN RSA  PRIVATE KEY-----'
        pk = PrivateKey(key)
        name, _ = pk.parse_name(pk.iostr, pk.tag_to_name)
        self.assertIsNone(name)

        key = u'-----BEGIN RSA PRIVATE  KEY-----'
        pk = PrivateKey(key)
        name, _ = pk.parse_name(pk.iostr, pk.tag_to_name)
        self.assertIsNone(name)

        for tag, to_name in PrivateKey.tag_to_name.items():
            key = u'-----BEGIN {} PRIVATE KEY----- \r\n'.format(tag)
            pk = PrivateKey(key)
            name, length = pk.parse_name(pk.iostr, pk.tag_to_name)
            self.assertEqual(name, to_name)
            self.assertEqual(length, len(key))


",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_handler.py,,test_check_origin,"def test_check_origin(self):
        request = HTTPServerRequest(uri='/')
        obj = Mock(spec=WsockHandler, request=request)

        obj.origin_policy = 'same'
        request.headers['Host'] = 'www.example.com:4433'
        origin = 'https://www.example.com:4433'
        self.assertTrue(WsockHandler.check_origin(obj, origin))

        origin = 'https://www.example.com'
        self.assertFalse(WsockHandler.check_origin(obj, origin))

        obj.origin_policy = 'primary'
        self.assertTrue(WsockHandler.check_origin(obj, origin))

        origin = 'https://blog.example.com'
        self.assertTrue(WsockHandler.check_origin(obj, origin))

        origin = 'https://blog.example.org'
        self.assertFalse(WsockHandler.check_origin(obj, origin))

        origin = 'https://blog.example.org'
        obj.origin_policy = {'https://blog.example.org'}
        self.assertTrue(WsockHandler.check_origin(obj, origin))

        origin = 'http://blog.example.org'
        obj.origin_policy = {'http://blog.example.org'}
        self.assertTrue(WsockHandler.check_origin(obj, origin))

        origin = 'http://blog.example.org'
        obj.origin_policy = {'https://blog.example.org'}
        self.assertFalse(WsockHandler.check_origin(obj, origin))

        obj.origin_policy = '*'
        origin = 'https://blog.example.org'
        self.assertTrue(WsockHandler.check_origin(obj, origin))
",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_main.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_main.py,,test_app_listen,"def test_app_listen(self):
        app = Application()
        app.listen = lambda x, y, **kwargs: 1

        handler.redirecting = None
        server_settings = dict()
        app_listen(app, 80, '127.0.0.1', server_settings)
        self.assertFalse(handler.redirecting)

        handler.redirecting = None
        server_settings = dict(ssl_options='enabled')
        app_listen(app, 80, '127.0.0.1', server_settings)
        self.assertTrue(handler.redirecting)
",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_get_policy_dictionary,"def test_get_policy_dictionary(self):
        classes = [AutoAddPolicy, RejectPolicy, WarningPolicy]
        dic = get_policy_dictionary()
        for cls in classes:
            val = dic[cls.__name__.lower()]
            self.assertIs(cls, val)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_load_host_keys,"def test_load_host_keys(self):
        path = '/path-not-exists'
        host_keys = load_host_keys(path)
        self.assertFalse(host_keys)

        path = '/tmp'
        host_keys = load_host_keys(path)
        self.assertFalse(host_keys)

        path = make_tests_data_path('known_hosts_example')
        host_keys = load_host_keys(path)
        self.assertEqual(host_keys, paramiko.hostkeys.HostKeys(path))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_get_policy_class,"def test_get_policy_class(self):
        keys = ['autoadd', 'reject', 'warning']
        vals = [AutoAddPolicy, RejectPolicy, WarningPolicy]
        for key, val in zip(keys, vals):
            cls = get_policy_class(key)
            self.assertIs(cls, val)

        key = 'non-exists'
        with self.assertRaises(ValueError):
            get_policy_class(key)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_check_policy_setting,"def test_check_policy_setting(self):
        host_keys_filename = make_tests_data_path('host_keys_test.db')
        host_keys_settings = dict(
            host_keys=paramiko.hostkeys.HostKeys(),
            system_host_keys=paramiko.hostkeys.HostKeys(),
            host_keys_filename=host_keys_filename
        )

        with self.assertRaises(ValueError):
            check_policy_setting(RejectPolicy, host_keys_settings)

        try:
            os.unlink(host_keys_filename)
        except OSError:
            pass
        check_policy_setting(AutoAddPolicy, host_keys_settings)
        self.assertEqual(os.path.exists(host_keys_filename), True)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_is_missing_host_key,"def test_is_missing_host_key(self):
        client = paramiko.SSHClient()
        file1 = make_tests_data_path('known_hosts_example')
        file2 = make_tests_data_path('known_hosts_example2')
        client.load_host_keys(file1)
        client.load_system_host_keys(file2)

        autoadd = AutoAddPolicy()
        for f in [file1, file2]:
            entry = paramiko.hostkeys.HostKeys(f)._entries[0]
            hostname = entry.hostnames[0]
            key = entry.key
            self.assertIsNone(
                autoadd.is_missing_host_key(client, hostname, key)
            )

        for f in [file1, file2]:
            entry = paramiko.hostkeys.HostKeys(f)._entries[0]
            hostname = entry.hostnames[0]
            key = entry.key
            key.get_name = lambda: 'unknown'
            self.assertTrue(
                autoadd.is_missing_host_key(client, hostname, key)
            )
        del key.get_name

        for f in [file1, file2]:
            entry = paramiko.hostkeys.HostKeys(f)._entries[0]
            hostname = entry.hostnames[0][1:]
            key = entry.key
            self.assertTrue(
                autoadd.is_missing_host_key(client, hostname, key)
            )

        file3 = make_tests_data_path('known_hosts_example3')
        entry = paramiko.hostkeys.HostKeys(file3)._entries[0]
        hostname = entry.hostnames[0]
        key = entry.key
        with self.assertRaises(paramiko.BadHostKeyException):
            autoadd.is_missing_host_key(client, hostname, key)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_policy.py,,test_missing_host_key,"def test_missing_host_key(self):
        client = paramiko.SSHClient()
        file1 = make_tests_data_path('known_hosts_example')
        file2 = make_tests_data_path('known_hosts_example2')
        filename = make_tests_data_path('known_hosts')
        copyfile(file1, filename)
        client.load_host_keys(filename)
        n1 = len(client._host_keys)

        autoadd = AutoAddPolicy()
        entry = paramiko.hostkeys.HostKeys(file2)._entries[0]
        hostname = entry.hostnames[0]
        key = entry.key
        autoadd.missing_host_key(client, hostname, key)
        self.assertEqual(len(client._host_keys),  n1 + 1)
        self.assertEqual(paramiko.hostkeys.HostKeys(filename),
                         client._host_keys)
        os.unlink(filename)
",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_print_version,"def test_print_version(self):
        sys_stdout = sys.stdout
        sys.stdout = io.StringIO() if UnicodeType == str else io.BytesIO()

        self.assertEqual(print_version(False), None)
        self.assertEqual(sys.stdout.getvalue(), '')

        with self.assertRaises(SystemExit):
            self.assertEqual(print_version(True), None)
        self.assertEqual(sys.stdout.getvalue(), __version__ + '\n')

        sys.stdout = sys_stdout

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_host_keys_settings,"def test_get_host_keys_settings(self):
        options.hostfile = ''
        options.syshostfile = ''
        dic = get_host_keys_settings(options)

        filename = os.path.join(base_dir, 'known_hosts')
        self.assertEqual(dic['host_keys'], load_host_keys(filename))
        self.assertEqual(dic['host_keys_filename'], filename)
        self.assertEqual(
            dic['system_host_keys'],
            load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))
        )

        options.hostfile = make_tests_data_path('known_hosts_example')
        options.syshostfile = make_tests_data_path('known_hosts_example2')
        dic2 = get_host_keys_settings(options)
        self.assertEqual(dic2['host_keys'], load_host_keys(options.hostfile))
        self.assertEqual(dic2['host_keys_filename'], options.hostfile)
        self.assertEqual(dic2['system_host_keys'],
                         load_host_keys(options.syshostfile))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_policy_setting,"def test_get_policy_setting(self):
        options.policy = 'warning'
        options.hostfile = ''
        options.syshostfile = ''
        settings = get_host_keys_settings(options)
        instance = get_policy_setting(options, settings)
        self.assertIsInstance(instance, paramiko.client.WarningPolicy)

        options.policy = 'autoadd'
        options.hostfile = ''
        options.syshostfile = ''
        settings = get_host_keys_settings(options)
        instance = get_policy_setting(options, settings)
        self.assertIsInstance(instance, paramiko.client.AutoAddPolicy)
        os.unlink(settings['host_keys_filename'])

        options.policy = 'reject'
        options.hostfile = ''
        options.syshostfile = ''
        settings = get_host_keys_settings(options)
        try:
            instance = get_policy_setting(options, settings)
        except ValueError:
            self.assertFalse(
                settings['host_keys'] and settings['system_host_keys']
            )
        else:
            self.assertIsInstance(instance, paramiko.client.RejectPolicy)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_ssl_context,"def test_get_ssl_context(self):
        options.certfile = ''
        options.keyfile = ''
        ssl_ctx = get_ssl_context(options)
        self.assertIsNone(ssl_ctx)

        options.certfile = 'provided'
        options.keyfile = ''
        with self.assertRaises(ValueError) as ctx:
            ssl_ctx = get_ssl_context(options)
        self.assertEqual('keyfile is not provided', str(ctx.exception))

        options.certfile = ''
        options.keyfile = 'provided'
        with self.assertRaises(ValueError) as ctx:
            ssl_ctx = get_ssl_context(options)
        self.assertEqual('certfile is not provided', str(ctx.exception))

        options.certfile = 'FileDoesNotExist'
        options.keyfile = make_tests_data_path('cert.key')
        with self.assertRaises(ValueError) as ctx:
            ssl_ctx = get_ssl_context(options)
        self.assertIn('does not exist', str(ctx.exception))

        options.certfile = make_tests_data_path('cert.key')
        options.keyfile = 'FileDoesNotExist'
        with self.assertRaises(ValueError) as ctx:
            ssl_ctx = get_ssl_context(options)
        self.assertIn('does not exist', str(ctx.exception))

        options.certfile = make_tests_data_path('cert.key')
        options.keyfile = make_tests_data_path('cert.key')
        with self.assertRaises(ssl.SSLError) as ctx:
            ssl_ctx = get_ssl_context(options)

        options.certfile = make_tests_data_path('cert.crt')
        options.keyfile = make_tests_data_path('cert.key')
        ssl_ctx = get_ssl_context(options)
        self.assertIsNotNone(ssl_ctx)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_trusted_downstream,"def test_get_trusted_downstream(self):
        tdstream = ''
        result = set()
        self.assertEqual(get_trusted_downstream(tdstream), result)

        tdstream = '1.1.1.1, 2.2.2.2'
        result = set(['1.1.1.1', '2.2.2.2'])
        self.assertEqual(get_trusted_downstream(tdstream), result)

        tdstream = '1.1.1.1, 2.2.2.2, 2.2.2.2'
        result = set(['1.1.1.1', '2.2.2.2'])
        self.assertEqual(get_trusted_downstream(tdstream), result)

        tdstream = '1.1.1.1, 2.2.2.'
        with self.assertRaises(ValueError):
            get_trusted_downstream(tdstream)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_origin_setting,"def test_get_origin_setting(self):
        options.debug = False
        options.origin = '*'
        with self.assertRaises(ValueError):
            get_origin_setting(options)

        options.debug = True
        self.assertEqual(get_origin_setting(options), '*')

        options.origin = random.choice(['Same', 'Primary'])
        self.assertEqual(get_origin_setting(options), options.origin.lower())

        options.origin = ''
        with self.assertRaises(ValueError):
            get_origin_setting(options)

        options.origin = ','
        with self.assertRaises(ValueError):
            get_origin_setting(options)

        options.origin = 'www.example.com,  https://www.example.org'
        result = {'http://www.example.com', 'https://www.example.org'}
        self.assertEqual(get_origin_setting(options), result)

        options.origin = 'www.example.com:80,  www.example.org:443'
        result = {'http://www.example.com', 'https://www.example.org'}
        self.assertEqual(get_origin_setting(options), result)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_get_font_setting,"def test_get_font_setting(self):
        font_dir = os.path.join(base_dir, 'tests', 'data', 'fonts')
        font = ''
        self.assertEqual(get_font_filename(font, font_dir), 'fake-font')

        font = 'fake-font'
        self.assertEqual(get_font_filename(font, font_dir), 'fake-font')

        font = 'wrong-name'
        with self.assertRaises(ValueError):
            get_font_filename(font, font_dir)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_settings.py,,test_check_encoding_setting,"def test_check_encoding_setting(self):
        self.assertIsNone(check_encoding_setting(''))
        self.assertIsNone(check_encoding_setting('utf-8'))
        with self.assertRaises(ValueError):
            check_encoding_setting('unknown-encoding')
",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_to_str,"def test_to_str(self):
        b = b'hello'
        u = u'hello'
        self.assertEqual(to_str(b), u)
        self.assertEqual(to_str(u), u)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_to_bytes,"def test_to_bytes(self):
        b = b'hello'
        u = u'hello'
        self.assertEqual(to_bytes(b), b)
        self.assertEqual(to_bytes(u), b)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_to_int,"def test_to_int(self):
        self.assertEqual(to_int(''), None)
        self.assertEqual(to_int(None), None)
        self.assertEqual(to_int('22'), 22)
        self.assertEqual(to_int(' 22 '), 22)

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_is_valid_ip_address,"def test_is_valid_ip_address(self):
        self.assertFalse(is_valid_ip_address('127.0.0'))
        self.assertFalse(is_valid_ip_address(b'127.0.0'))
        self.assertTrue(is_valid_ip_address('127.0.0.1'))
        self.assertTrue(is_valid_ip_address(b'127.0.0.1'))
        self.assertFalse(is_valid_ip_address('abc'))
        self.assertFalse(is_valid_ip_address(b'abc'))
        self.assertTrue(is_valid_ip_address('::1'))
        self.assertTrue(is_valid_ip_address(b'::1'))
        self.assertTrue(is_valid_ip_address('fe80::1111:2222:3333:4444'))
        self.assertTrue(is_valid_ip_address(b'fe80::1111:2222:3333:4444'))
        self.assertTrue(is_valid_ip_address('fe80::1111:2222:3333:4444%eth0'))
        self.assertTrue(is_valid_ip_address(b'fe80::1111:2222:3333:4444%eth0'))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_is_valid_port,"def test_is_valid_port(self):
        self.assertTrue(is_valid_port(80))
        self.assertFalse(is_valid_port(0))
        self.assertFalse(is_valid_port(65536))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_is_valid_hostname,"def test_is_valid_hostname(self):
        self.assertTrue(is_valid_hostname('google.com'))
        self.assertTrue(is_valid_hostname('google.com.'))
        self.assertTrue(is_valid_hostname('www.google.com'))
        self.assertTrue(is_valid_hostname('www.google.com.'))
        self.assertFalse(is_valid_hostname('.www.google.com'))
        self.assertFalse(is_valid_hostname('http://www.google.com'))
        self.assertFalse(is_valid_hostname('https://www.google.com'))
        self.assertFalse(is_valid_hostname('127.0.0.1'))
        self.assertFalse(is_valid_hostname('::1'))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_is_ip_hostname,"def test_is_ip_hostname(self):
        self.assertTrue(is_ip_hostname('[::1]'))
        self.assertTrue(is_ip_hostname('127.0.0.1'))
        self.assertFalse(is_ip_hostname('localhost'))
        self.assertFalse(is_ip_hostname('www.google.com'))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_is_same_primary_domain,"def test_is_same_primary_domain(self):
        domain1 = 'localhost'
        domain2 = 'localhost'
        self.assertTrue(is_same_primary_domain(domain1, domain2))

        domain1 = 'localhost'
        domain2 = 'test'
        self.assertFalse(is_same_primary_domain(domain1, domain2))

        domain1 = 'com'
        domain2 = 'example.com'
        self.assertFalse(is_same_primary_domain(domain1, domain2))

        domain1 = 'example.com'
        domain2 = 'example.com'
        self.assertTrue(is_same_primary_domain(domain1, domain2))

        domain1 = 'www.example.com'
        domain2 = 'example.com'
        self.assertTrue(is_same_primary_domain(domain1, domain2))

        domain1 = 'wwwexample.com'
        domain2 = 'example.com'
        self.assertFalse(is_same_primary_domain(domain1, domain2))

        domain1 = 'www.example.com'
        domain2 = 'www2.example.com'
        self.assertTrue(is_same_primary_domain(domain1, domain2))

        domain1 = 'xxx.www.example.com'
        domain2 = 'xxx.www2.example.com'
        self.assertTrue(is_same_primary_domain(domain1, domain2))

    ",False
-1,webssh,https://github.com/huashengdun/webssh/blob/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,https://raw.githubusercontent.com/huashengdun/webssh/51d527fe75a62aed239126a6697749a30baecb30/tests/test_utils.py,,test_parse_origin_from_url,"def test_parse_origin_from_url(self):
        url = ''
        self.assertIsNone(parse_origin_from_url(url))

        url = 'www.example.com'
        self.assertEqual(parse_origin_from_url(url), 'http://www.example.com')

        url = 'http://www.example.com'
        self.assertEqual(parse_origin_from_url(url), 'http://www.example.com')

        url = 'www.example.com:80'
        self.assertEqual(parse_origin_from_url(url), 'http://www.example.com')

        url = 'http://www.example.com:80'
        self.assertEqual(parse_origin_from_url(url), 'http://www.example.com')

        url = 'www.example.com:443'
        self.assertEqual(parse_origin_from_url(url), 'https://www.example.com')

        url = 'https://www.example.com'
        self.assertEqual(parse_origin_from_url(url), 'https://www.example.com')

        url = 'https://www.example.com:443'
        self.assertEqual(parse_origin_from_url(url), 'https://www.example.com')

        url = 'https://www.example.com:80'
        self.assertEqual(parse_origin_from_url(url), url)

        url = 'http://www.example.com:443'
        self.assertEqual(parse_origin_from_url(url), url)
",False
